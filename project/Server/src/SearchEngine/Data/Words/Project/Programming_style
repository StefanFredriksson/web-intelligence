Programming style This article has multiple issues Please help improve it or discuss these issues on the talk page Learn how and when to remove these template messages This article is written like a personal reflection personal essay or argumentative essay that states a Wikipedia editors personal feelings or presents an original argument about a topic Please help improve it by rewriting it in an encyclopedic style October 2008 Learn how and when to remove this template message This article needs additional citations for verification Please help improve this article by adding citations to reliable sources Unsourced material may be challenged and removed Find sources Programming style news newspapers books scholar JSTOR June 2016 Learn how and when to remove this template message Learn how and when to remove this template message Programming style also known as code style is a set of rules or guidelines used when writing the source code for a computer program It is often claimed that following a particular programming style will help programmers read and understand source code conforming to the style and help to avoid introducing errors A classic work on the subject was The Elements of Programming Style written in the 1970s and illustrated with examples from the Fortran and PLI languages prevalent at the time The programming style used in a particular program may be derived from the coding conventions of a company or other computing organization as well as the preferences of the author of the code Programming styles are often designed for a specific programming language or language family style considered good in C source code may not be appropriate for BASIC source code etc However some rules are commonly applied to many languages Contents 1 Elements of good style 2 Code appearance 21 Indentation 211 ModuLiq 212 Lua 213 Python 214 Haskell 22 Vertical alignment 23 Spaces 24 Tabs 3 See also 4 References 5 External links Elements of good style edit Good style is a subjective matter and is difficult to define However there are several elements common to a large number of programming styles The issues usually considered as part of programming style include the layout of the source code including indentation the use of white space around operators and keywords the capitalization or otherwise of keywords and variable names the style and spelling of userdefined identifiers such as function procedure and variable names and the use and style of comments Code appearance edit Programming styles commonly deal with the visual appearance of source code with the goal of readability Software has long been available that formats source code automatically leaving coders to concentrate on naming logic and higher techniques As a practical point using a computer to format source code saves time and it is possible to then enforce companywide standards without debates Indentation edit Indentation styles assist in identifying control flow and blocks of code In some programming languages indentation is used to delimit logical blocks of code correct indentation in these cases is more than a matter of style In other languages indentation and white space do not affect function although logical and consistent indentation makes code more readable Compare if hours 24 minutes 60 seconds 60 return true else return false or if hours 24 minutes 60 seconds 60 return true else return false with something like if hours 24 minutes 60 seconds 60 return true else return false The first two examples are probably much easier to read because they are indented in an established way a hanging paragraph style This indentation style is especially useful when dealing with multiple nested constructs Note however that this example is the same as simply return hours 24 minutes 60 seconds 60 ModuLiq edit The ModuLiq Zero Indentation Style groups with carriage returns rather than indentations Compare all of the above to if hours 24 minutes 60 seconds 60 return true else return false Lua edit Lua does not use the traditional curly braces or parenthesis ifelse statements only require the expression be followed by then and closing the ifelse statement with end if hours 24 and minutes 60 and seconds 60 then return true else return false end Indentation is optional and or not are used in between truefalse statements They are truefalse statements as print not true would mean false Python edit Python uses indentation to indicate control structures so correct indentation is required By doing this the need for bracketing with curly braces ie and is eliminated On the other hand copying and pasting Python code can lead to problems because the indentation level of the pasted code may not be the same as the indentation level of the current line Such reformatting can be tedious to do by hand but some text editors and IDEs have features to do it automatically There are also problems when Python code being rendered unusable when posted on a forum or web page that removes white space though this problem can be avoided where it is possible to enclose code in white spacepreserving tags such as pre pre for HTML code code for bbcode etc if hours 24 and minutes 60 and seconds 60 return True else return False Notice that Python does not use curly braces but a regular colon eg else Many Python programmers tend to follow a commonly agreed style guide known as PEP8 1 There are tools designed to automate PEP8 compliance Haskell edit Haskell similarly has the offside rule ie it has a twodimension syntax where indentation is meaningful to define blocks although an alternate syntax uses curly braces and semicolonsHaskell is a declarative language there are statements but declarations within a Haskell script Example let c1 1 c2 2 in f x y c1 x c2 y may be written in one line as let c1 1 c2 2 in f x y c1 x c2 y Haskell encourage the use of literate programming where extended text explain the genesis of the code In literate Haskell scripts named with the lhs extension everything is a comment except blocks marked as codeThe program can be written in LaTeX in such case the code environment marks what is code Also each active code paragraph can be marked by preceding and ending it with an empty line and starting each line of code with a greater than sign and a spaceHere an example using LaTeX markup The function verb isValidDate test if date is valid begin code isValidDate Date Bool isValidDate date hh 0 mm 0 ss 0 hh 24 mm 60 ss 60 where hh mm ss fromDate date end code observe that in this case the overloaded function is verb fromDate Date Int Int Int And an example using plain text The function isValidDate test if date is valid isValidDate Date Bool isValidDate date hh 0 mm 0 ss 0 hh 24 mm 60 ss 60 where hh mm ss fromDate date observe that in this case the overloaded function is fromDate Date Int Int Int Vertical alignment edit It is often helpful to align similar elements vertically to make typogenerated bugs more obvious Compare search array a b c d e replacement array foo bar baz quux Another example value 0 anothervalue 1 yetanothervalue 2 with search array a b c d e replacement array foo bar baz quux Another example value 0 anothervalue 1 yetanothervalue 2 The latter example makes two things intuitively clear that were not clear in the former the search and replace terms are related and match up they are not discrete variables there is one more search term than there are replacement terms If this is a bug it is now more likely to be spotted However note that there are arguments against vertical alignment Interline false dependencies tabular formatting creates dependencies across lines For example if an identifier with a long name is added to a tabular layout the column width may have to be increased to accommodate it This forces a bigger change to the source code than necessary and the essential change may be lost in the noise This is detrimental to Revision control where inspecting differences between versions is essential Brittleness if a programmer does not neatly format the table when making a change maybe legitimately with the previous point in mind the result becomes a mess that deteriorates with further such changes Simple refactoring operations such as searchandreplace may also break the formatting Resistance to modification tabular formatting requires more effort to maintain This may put off a programmer from making a beneficial change such as adding correcting or improving the name of an identifier because it will mess up the formatting Reliance on monospaced font tabular formatting assumes that the editor uses a fixedwidth font Many modern code editors support proportional fonts and the programmer may prefer to use a proportional font for readability Tool dependence some of the effort of maintaining alignment can be alleviated by tools eg a source code editor that supports elastic tabstops although that creates a reliance on such tools For example if a simple refactoring operation is performed on the code above renaming variables replacement to r and anothervalue to a the resulting code will look like this search array a b c d e r array foo bar baz quux Another example value 0 a 1 yetanothervalue 2 The original sequential formatting will still look fine after such change search array a b c d e r array foo bar baz quux Another example value 0 a 1 yetanothervalue 2 Spaces edit In those situations where some white space is required the grammars of most freeformat languages are unconcerned with the amount that appears Style related to white space is commonly used to enhance readability There are currently no known hard facts conclusions from studies about which of the whitespace styles have the best readability For instance compare the following syntactically equivalent examples of C code int i for i 0 i 10 i printf d i i i versus int i for i 0 i 10 i printf d i i i Tabs edit The use of tabs to create white space presents particular issues when not enough care is taken because the location of the tabulation point can be different depending on the tools being used and even the preferences of the user As an example one programmer prefers tab stops of four and has their toolset configured this way and uses these to format their code int ix Index to scan array long sum Accumulator for sum Another programmer prefers tab stops of eight and their toolset is configured this way When someone else examines the original persons code they may well find it difficult to read int ix Index to scan array long sum Accumulator for sum One widely used solution to this issue may involve forbidding the use of tabs for alignment or rules on how tab stops must be set Note that tabs work fine provided they are used consistently restricted to logical indentation and not used for alignment class MyClass int foobar int qux first parameter int quux second parameter int foobar2 int qux first parameter int quux second parameter int quuux third parameter See also edit Coding conventions MISRA C Naming convention programming References edit PEP 0008 Style Guide for Python Code pythonorg mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em External links edit Source Code Formatters at Curlie