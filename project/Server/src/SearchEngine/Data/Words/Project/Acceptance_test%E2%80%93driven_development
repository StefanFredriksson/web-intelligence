Acceptance testdriven development Software development Core activities Processes Requirements Design Engineering Construction Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DevOps DAD DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TSP OpenUP UP XP Supporting disciplines Configuration management Documentation Software quality assurance SQA Project management User experience Practices ATDD BDD CCO CI CD DDD PP SBE Standup TDD Tools Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing Standards and Bodies of Knowledge BABOK CMMI IEEE standards ISO 9001 ISOIEC standards PMBOK SWEBOK ITIL Glossaries Artificial intelligence Computer science Electrical and electronics engineering v t e Acceptance testdriven development ATDD is a development methodology based on communication between the business customers the developers and the testers 1 ATDD encompasses many of the same practices as specification by example SBE 2 3 behaviordriven development BDD 4 exampledriven development EDD 5 and supportdriven development also called story testdriven development SDD 6 All these processes aid developers and testers in understanding the customers needs prior to implementation and allow customers to be able to converse in their own domain language ATDD is closely related to testdriven development TDD 7 It differs by the emphasis on developertesterbusiness customer collaboration ATDD encompasses acceptance testing but highlights writing acceptance tests before developers begin coding Contents 1 Overview 11 Creation 12 Testing strategy 2 Acceptance criteria and tests 21 Test format 22 Complete test 23 Test examination 24 Another test example 25 Project acceptance tests 3 See also 4 References 5 External links Overview edit Acceptance tests are from the users point of view the external view of the system 1 They examine externally visible effects such as specifying the correct output of a system given a particular input Acceptance tests can verify how the state of something changes such as an order that goes from paid to shipped They also can check the interactions with interfaces of other systems such as shared databases or web services In general they are implementation independent although automation of them may not be 8 9 Creation edit Acceptance tests are created when the requirements are analyzed and prior to coding 1 They can be developed collaboratively by requirement requester product owner business analyst customer representative etc developer and tester Developers implement the system using the acceptance tests Failing tests provide quick feedback that the requirements are not being met The tests are specified in business domain terms The terms then form a ubiquitous language that is shared between the customers developers and testers 10 Tests and requirements are interrelated 11 A requirement that lacks a test may not be implemented properly A test that does not refer to a requirement is an unneeded test An acceptance test that is developed after implementation begins represents a new requirement 12 Testing strategy edit Acceptance tests are a part of an overall testing strategy They are the customer tests that demonstrate the business intent of a system Component tests are technical acceptance tests developed by an architect that specify the behavior of large modules Unit tests are created by the developer to drive easytomaintain code 13 They are often derived from acceptance tests and unit tests Crossfunctional testing includes usability testing 14 exploratory testing 15 and property testing scaling and security 16 Acceptance criteria and tests edit Acceptance criteria are a description of what would be checked by a test Given a requirement such as As a user I want to check out a book from the library an acceptance criterion might be Verify the book is marked as checked out An acceptance test for this requirement gives the details so that the test can be run with the same effect each time Test format edit Acceptance tests usually follow this form 1 Given setup A specified state of a system When trigger An action or event occurs Then verification The state of the system has changed or an output has been produced Also it is possible to add Statements that start with AND in any of the sections below Given When Then For the example requirement the steps could be listed as Given Book that has not been checked out And User who is registered on the system When User checks out a book Then Book is marked as checked out Complete test edit The previous steps do not include any specific example data so that is added to complete the test Given Book that has not been checked out Books Title Checked out Great book No User who is registered on the system Users Name Sam When User checks out a book Checkout action User Sam Checks out Great book Then Book is marked as checked out Books Title Checked out User Great book Yes Sam Test examination edit Examination of the test with specific data usually leads to many questions For the sample these might be What if the book is already checked out What if the book does not exist What if the user is not registered on the system Is there a date that the book is due to be checkedin How many books can a user check out These questions help illuminate missing or ambiguous requirements Additional details such as a duedate can be added to the expected result Other acceptance tests can check that conditions such as attempting to check out a book that is already checked out produces the expected error Another test example edit Suppose the business customer wanted a business rule that a user could only check out one book at a time The following test would demonstrate that Scenario Check that checkout business rule is enforced Given Book that has been checked out Books Title Checked out User Great book Yes Sam Another great book No Users Name Sam When User checks out another book Checkout action User Sam Checks out Another great book Then Error occurs Error occurred Description Violation of checkout business rule Project acceptance tests edit In addition to acceptance tests for requirements acceptance tests can be used on a project as a whole 1 For example if this requirement was part of a library book checkout project there could be acceptance tests for the whole project These are often termed SMART objectives An example test is When the new library system is in production the users will be able to check books in and out three times as fast as they do today See also edit Concordion FitNesse Robot Framework Gauge software Cucumber software References edit a b c d e Pugh Ken 2011 LeanAgile Acceptance TestDriven Development Better Software Through Collaboration AddisonWesley ISBN 9780321714084 mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em Adzic Gojko 2009 Bridging the Communication Gap Specification by Example and Agile Acceptance Testing Neuri Limited Adzic Gojko 2011 Specification by example How successful teams deliver the right software Manning ISBN 9780321278654 Chelimsky David Dave Astels Zach Dennis Aslak Hellesøy Bryan Helmkamp and Dan North The RSpec Book Behaviour Driven Development with RSpec Cucumber and Friends The Pragmatic Bookshelf Example Driven Design Retrieved 20130415 Story TestDriven Development PDF Retrieved 20130415 Beck Kent Test Driven Development By Example AddisonWesley Professional 2002 Melnik Grigori and Frank Maurer Multiple Perspectives on Executable Acceptance TestDriven Development Retrieved 20130415 Koskela Lasse 2007 Test Driven TDD and Acceptance TDD for Java Developers Manning Publications Evans Eric 2003 DomainDriven Design Tackling Complexity in the Heart of Software AddisonWesley Professional Weinberg Gerald Gause Donald 1989 Exploring Requirements Quality Before Design Dorset House ISBN 0932633137 Martin Robert C and Grigori Melnik Tests and Requirements Requirements and Tests A Möbius Strip PDF Retrieved 20130415 Testdrivendevelopment Meszaros Gerard and Janice Aston 2006 Adding Usability Testing to an Agile ProjectAgile Conference Exploratory Testing Explained PDF Meszaros Gerard2007 xUnit Test Patterns Refactoring Test Code AddisonWesley External links edit Example of automation frameworks