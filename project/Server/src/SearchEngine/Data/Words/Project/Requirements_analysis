Requirements analysis Engineering process For broader coverage of this topic see Requirements engineering This article needs additional citations for verification Please help improve this article by adding citations to reliable sources Unsourced material may be challenged and removed Find sources Requirements analysis news newspapers books scholar JSTOR December 2011 Learn how and when to remove this template message A systems engineering perspective on requirements analysis 1 Software development Core activities Processes Requirements Design Engineering Construction Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DevOps DAD DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TSP OpenUP UP XP Supporting disciplines Configuration management Documentation Software quality assurance SQA Project management User experience Practices ATDD BDD CCO CI CD DDD PP SBE Standup TDD Tools Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing Standards and Bodies of Knowledge BABOK CMMI IEEE standards ISO 9001 ISOIEC standards PMBOK SWEBOK ITIL Glossaries Artificial intelligence Computer science Electrical and electronics engineering v t e In systems engineering and software engineering requirements analysis focuses on the tasks that determine the needs or conditions to meet the new or altered product or project taking account of the possibly conflicting requirements of the various stakeholders analyzing documenting validating and managing software or system requirements 2 Requirements analysis is critical to the success or failure of a systems or software project 3 The requirements should be documented actionable measurable testable traceable related to identified business needs or opportunities and defined to a level of detail sufficient for system design Contents 1 Overview 2 Requirements analysis topics 21 Stakeholder identification 22 Joint Requirements Development JRD Sessions 23 Contractstyle requirement lists 231 Strengths 232 Weaknesses 233 Alternative to requirement lists 24 Measurable goals 25 Prototypes 26 Use cases 27 Requirements specification 3 Types of requirements 4 Requirements analysis issues 41 Stakeholder issues 42 Engineerdeveloper issues 43 Attempted solutions 5 See also 6 References 7 Bibliography 8 External links Overview edit Conceptually requirements analysis includes three types of activities citation needed Eliciting requirements eg the project charter or definition business process documentation and stakeholder interviews This is sometimes also called requirements gathering or requirements discovery Analyzing requirements determining whether the stated requirements are clear complete consistent and unambiguous and resolving any apparent conflicts Recording requirements Requirements may be documented in various forms usually including a summary list and may include naturallanguage documents use cases user stories process specifications and a variety of models including data models Requirements analysis can be a long and tiring process during which many delicate psychological skills are involved Large systems may confront analysts with hundreds or thousands of system requirements 4 New systems change the environment and relationships between people so it is important to identify all the stakeholders take into account all their needs and ensure they understand the implications of the new systems Analysts can employ several techniques to elicit the requirements from the customer These may include the development of scenarios represented as user stories in agile methods the identification of use cases the use of workplace observation or ethnography holding interviews or focus groups more aptly named in this context as requirements workshops or requirements review sessions and creating requirements lists Prototyping may be used to develop an example system that can be demonstrated to stakeholders Where necessary the analyst will employ a combination of these methods to establish the exact requirements of the stakeholders so that a system that meets the business needs is produced citation needed Requirements quality can be improved through these and other methods Visualization Using tools that promote better understanding of the desired endproduct such as visualization and simulation Consistent use of templates Producing a consistent set of models and templates to document the requirements Documenting dependencies Documenting dependencies and interrelationships among requirements as well as any assumptions and congregations Requirements analysis topics edit This section does not cite any sources Please help improve this section by adding citations to reliable sources Unsourced material may be challenged and removed Find sources Requirements analysis news newspapers books scholar JSTOR October 2009 Learn how and when to remove this template message Stakeholder identification edit See Stakeholder analysis for a discussion of people or organizations legal entities such as companies standards bodies that have a valid interest in the system They may be affected by it either directly or indirectlyA major new emphasis in the 1990s was a focus on the identification of stakeholders It is increasingly recognized that stakeholders are not limited to the organization employing the analyst Other stakeholders will include anyone who operates the system normal and maintenance operators anyone who benefits from the system functional political financial and social beneficiaries anyone involved in purchasing or procuring the system In a massmarket product organization product management marketing and sometimes sales act as surrogate consumers massmarket customers to guide development of the product organizations which regulate aspects of the system financial safety and other regulators people or organizations opposed to the system negative stakeholders see also Misuse case organizations responsible for systems which interface with the system under design those organizations who integrate horizontally with the organization for whom the analyst is designing the system Joint Requirements Development JRD Sessions edit Requirements often have crossfunctional implications that are unknown to individual stakeholders and often missed or incompletely defined during stakeholder interviews These crossfunctional implications can be elicited by conducting JRD sessions in a controlled environment facilitated by a trained facilitator Business Analyst wherein stakeholders participate in discussions to elicit requirements analyze their details and uncover crossfunctional implications A dedicated scribe should be present to document the discussion freeing up the Business Analyst to lead the discussion in a direction that generates appropriate requirements which meet the session objective JRD Sessions are analogous to Joint Application Design Sessions In the former the sessions elicit requirements that guide design whereas the latter elicit the specific design features to be implemented in satisfaction of elicited requirements Contractstyle requirement lists edit One traditional way of documenting requirements has been contract style requirement lists In a complex system such requirements lists can run to hundreds of pages long An appropriate metaphor would be an extremely long shopping list Such lists are very much out of favour in modern analysis as they have proved spectacularly unsuccessful at achieving their aims citation needed but they are still seen to this day Strengths edit Provides a checklist of requirements Provide a contract between the project sponsors and developers For a large system can provide a high level description from which lowerlevel requirements can be derived Weaknesses edit Such lists can run to hundreds of pages They are not intended to serve as a readerfriendly description of the desired application Such requirements lists abstract all the requirements and so there is little context The Business Analyst may include context for requirements in accompanying design documentation This abstraction is not intended to describe how the requirements fit or work together The list may not reflect relationships and dependencies between requirements While a list does make it easy to prioritize each individual item removing one item out of context can render an entire use case or business requirement useless The list doesnt supplant the need to review requirements carefully with stakeholders in order to gain a better shared understanding of the implications for the design of the desired system application Simply creating a list does not guarantee its completeness The Business Analyst must make a good faith effort to discover and collect a substantially comprehensive list and rely on stakeholders to point out missing requirements These lists can create a false sense of mutual understanding between the stakeholders and developers Business Analysts are critical to the translation process It is almost impossible to uncover all the functional requirements before the process of development and testing begins If these lists are treated as an immutable contract then requirements that emerge in the Development process may generate a controversial change request Alternative to requirement lists edit As an alternative to requirement lists Agile Software Development uses User stories to suggest requirements in everyday language Measurable goals edit Main article Goal modeling Best practices take the composed list of requirements merely as clues and repeatedly ask why until the actual business purposes are discovered Stakeholders and developers can then devise tests to measure what level of each goal has been achieved thus far Such goals change more slowly than the long list of specific but unmeasured requirements Once a small set of critical measured goals has been established rapid prototyping and short iterative development phases may proceed to deliver actual stakeholder value long before the project is half over Prototypes edit Main article Software prototyping A prototype is a computer program that exhibits a part of the properties of another computer program allowing users to visualize an application that has not yet been constructed A popular form of prototype is a mockup which helps future users and other stakeholders to get an idea of what the system will look like Prototypes make it easier to make design decisions because aspects of the application can be seen and shared before the application is built Major improvements in communication between users and developers were often seen with the introduction of prototypes Early views of applications led to fewer changes later and hence reduced overall costs considerably citation needed Prototypes can be flat diagrams often referred to as wireframes or working applications using synthesized functionality Wireframes are made in a variety of graphic design documents and often remove all color from the design ie use a greyscale color palette in instances where the final software is expected to have graphic design applied to it This helps to prevent confusion as to whether the prototype represents the final visual look and feel of the application citation needed Use cases edit Main article Use case A use case is a structure for documenting the functional requirements for a system usually involving software whether that is new or being changed Each use case provides a set of scenarios that convey how the system should interact with a human user or another system to achieve a specific business goal Use cases typically avoid technical jargon preferring instead the language of the enduser or domain expert Use cases are often coauthored by requirements engineers and stakeholders Use cases are deceptively simple tools for describing the behavior of software or systems A use case contains a textual description of the ways in which users are intended to work with the software or system Use cases should not describe internal workings of the system nor should they explain how that system will be implemented Instead they show the steps needed to perform a task without sequential assumptions Requirements specification edit This section needs expansion You can help by adding to it February 2018 Types of requirements edit This section may require cleanup to meet Wikipedias quality standards No cleanup reason has been specified Please help improve this section if you can February 2011 Learn how and when to remove this template message Requirements are categorized in several ways The following are common categorizations of requirements that relate to technical management 1 Customer requirements Statements of fact and assumptions that define the expectations of the system in terms of mission objectives environment constraints and measures of effectiveness and suitability MOEMOS The customers are those that perform the eight primary functions of systems engineering with special emphasis on the operator as the key customer Operational requirements will define the basic need and at a minimum answer the questions posed in the following listing 1 Operational distribution or deployment Where will the system be used Mission profile or scenario How will the system accomplish its mission objective Performance and related parameters What are the critical system parameters to accomplish the mission Utilization environments How are the various system components to be used Effectiveness requirements How effective or efficient must the system be in performing its mission Operational life cycle How long will the system be in use by the user Environment What environments will the system be expected to operate in an effective manner Architectural requirements Architectural requirements explain what has to be done by identifying the necessary systems architecture of a system Structural requirements Structural requirements explain what has to be done by identifying the necessary structure of a system Behavioral requirements Behavioral requirements explain what has to be done by identifying the necessary behavior of a system Functional requirements Functional requirements explain what has to be done by identifying the necessary task action or activity that must be accomplished Functional requirements analysis will be used as the toplevel functions for functional analysis 1 Nonfunctional requirements Nonfunctional requirements are requirements that specify criteria that can be used to judge the operation of a system rather than specific behaviors Performance requirements The extent to which a mission or function must be executed generally measured in terms of quantity quality coverage timeliness or readiness During requirements analysis performance how well does it have to be done requirements will be interactively developed across all identified functions based on system life cycle factors and characterized in terms of the degree of certainty in their estimate the degree of criticality to system success and their relationship to other requirements 1 Design requirements The build to code to and buy to requirements for products and how to execute requirements for processes expressed in technical data packages and technical manuals 1 Derived requirements Requirements that are implied or transformed from higherlevel requirement For example a requirement for long range or high speed may result in a design requirement for low weight 1 Allocated requirements A requirement that is established by dividing or otherwise allocating a highlevel requirement into multiple lowerlevel requirements Example A 100pound item that consists of two subsystems might result in weight requirements of 70 pounds and 30 pounds for the two lowerlevel items 1 Wellknown requirements categorization models include FURPS and FURPS developed at HewlettPackard Requirements analysis issues edit Stakeholder issues edit Steve McConnell in his book Rapid Development details a number of ways users can inhibit requirements gathering Users do not understand what they want or users dont have a clear idea of their requirements Users will not commit to a set of written requirements Users insist on new requirements after the cost and schedule have been fixed Communication with users is slow Users often do not participate in reviews or are incapable of doing so Users are technically unsophisticated Users do not understand the development process Users do not know about present technology This may lead to the situation where user requirements keep changing even when system or product development has been started Engineerdeveloper issues edit Possible problems caused by engineers and developers during requirements analysis are A natural inclination towards writing code can lead to implementation beginning before the requirements analysis is complete potentially resulting in code changes to meet actual requirements once they are known Technical personnel and endusers may have different vocabularies Consequently they may wrongly believe they are in perfect agreement until the finished product is supplied Engineers and developers may try to make the requirements fit an existing system or model rather than develop a system specific to the needs of the client Attempted solutions edit One attempted solution to communications problems has been to employ specialists in business or system analysis Techniques introduced in the 1990s like prototyping Unified Modeling Language UML use cases and agile software development are also intended as solutions to problems encountered with previous methods Also a new class of application simulation or application definition tools have entered the market These tools are designed to bridge the communication gap between business users and the IT organization and also to allow applications to be test marketed before any code is produced The best of these tools offer electronic whiteboards to sketch application flows and test alternatives ability to capture business logic and data needs ability to generate high fidelity prototypes that closely imitate the final application interactivity capability to add contextual requirements and other comments ability for remote and distributed users to run and interact with the simulation See also edit Business analysis Business Analysis Body of Knowledge BABOK Business process reengineering Creative brief Data modeling Design brief Functional requirements Information technology Modeldriven engineering Model Transformation Language Nonfunctional requirements Process architecture Process modeling Product fit analysis Requirements elicitation Requirements Engineering Specialist Group Requirements management Requirements Traceability Search Based Software Engineering Software prototyping Software requirements Software Requirements Specification Systems analysis System requirements System requirements specification References edit a b c d e f g h Systems Engineering Fundamentals Archived 20110722 at the Wayback Machine Defense Acquisition University Press 2001 Kotonya Gerald Sommerville Ian 1998 Requirements Engineering Processes and Techniques Chichester UK John Wiley and Sons ISBN 9780471972082 mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em Executive Alain Abran James W Moore Pierre Bourque Robert Dupuis eds March 2005 Chapter 2 Software Requirements Guide to the software engineering body of knowledge 2004 ed Los Alamitos CA IEEE Computer Society Press ISBN 0769523307 Retrieved 20070208 It is widely acknowledged within the software industry that software engineering projects are critically vulnerable when these activities are performed poorly CS1 maint uses editors parameter link Beck A Boeing G Shannon D 2014 Systems and Methods for Analyzing Requirements US Patent 8650186 Retrieved 20160317 CS1 maint multiple names authors list link Bibliography edit mwparseroutput refbeginfontsize90marginbottom05emmwparseroutput refbeginhangingindentsgtulliststyletypenonemarginleft0mwparseroutput refbeginhangingindentsgtulgtlimwparseroutput refbeginhangingindentsgtdlgtddmarginleft0paddingleft32emtextindent32emliststylenonemwparseroutput refbegin100fontsize100 Brian Berenbach Daniel Paulish Juergen Katzmeier Arnold Rudorfer 2009 Software Systems Requirements Engineering In Practice New York McGrawHill Professional ISBN 9780071605472 Hay David C 2003 Requirements Analysis From Business Views to Architecture 1st ed Upper Saddle River NJ Prentice Hall ISBN 0130282286 Laplante Phil 2009 Requirements Engineering for Software and Systems 1st ed Redmond WA CRC Press ISBN 9781420064674 McConnell Steve 1996 Rapid Development Taming Wild Software Schedules 1st ed Redmond WA Microsoft Press ISBN 1556159005 Nuseibeh B Easterbrook S 2000 Requirements engineering a roadmap PDF ICSE 00 Proceedings of the conference on the future of Software engineering pp3546 CiteSeerX 10111313116 doi 101145336512336523 ISBN 1581132530 Andrew Stellman Jennifer Greene 2005 Applied Software Project Management Cambridge MA OReilly Media ISBN 0596009488 Karl Wiegers Joy Beatty 2013 Software Requirements 3rd ed Redmond WA Microsoft Press ISBN 9780735679665 External links edit Wikimedia Commons has media related to Requirements analysis Peerreviewed Encyclopedia Entry on Requirements Engineering and Analysis Defense Acquisition University Stakeholder Requirements Definition Process MILHDBK 520 Systems Requirements Document Guidance v t e Computer science Note This template roughly follows the 2012 ACM Computing Classification System Hardware Printed circuit board Peripheral Integrated circuit Very Large Scale Integration Systems on Chip SoCs Energy consumption Green computing Electronic design automation Hardware acceleration Computer systems organization Computer architecture Embedded system Realtime computing Dependability Networks Network architecture Network protocol Network components Network scheduler Network performance evaluation Network service Software organization Interpreter Middleware Virtual machine Operating system Software quality Software notations and tools Programming paradigm Programming language Compiler Domainspecific language Modeling language Software framework Integrated development environment Software configuration management Software library Software repository Software development Software development process Requirements analysis Software design Software construction Software deployment Software maintenance Programming team Opensource model Theory of computation Model of computation Formal language Automata theory Computability theory Computational complexity theory Logic Semantics Algorithms Algorithm design Analysis of algorithms Algorithmic efficiency Randomized algorithm Computational geometry Mathematics of computing Discrete mathematics Probability Statistics Mathematical software Information theory Mathematical analysis Numerical analysis Information systems Database management system Information storage systems Enterprise information system Social information systems Geographic information system Decision support system Process control system Multimedia information system Data mining Digital library Computing platform Digital marketing World Wide Web Information retrieval Security Cryptography Formal methods Security services Intrusion detection system Hardware security Network security Information security Application security Humancomputer interaction Interaction design Social computing Ubiquitous computing Visualization Accessibility Concurrency Concurrent computing Parallel computing Distributed computing Multithreading Multiprocessing Artificial intelligence Natural language processing Knowledge representation and reasoning Computer vision Automated planning and scheduling Search methodology Control method Philosophy of artificial intelligence Distributed artificial intelligence Machine learning Supervised learning Unsupervised learning Reinforcement learning Multitask learning Crossvalidation Graphics Animation Rendering Image manipulation Graphics processing unit Mixed reality Virtual reality Image compression Solid modeling Applied computing Ecommerce Enterprise software Computational mathematics Computational physics Computational chemistry Computational biology Computational social science Computational engineering Computational healthcare Digital art Electronic publishing Cyberwarfare Electronic voting Video games Word processing Operations research Educational technology Document management Book Category Outline WikiProject Commons v t e Software engineering Fields Computer programming Requirements engineering Software deployment Software design Software maintenance Software testing Systems analysis Formal methods Concepts Data modeling Enterprise architecture Functional specification Modeling language Orthogonality Programming paradigm Software Software archaeology Software architecture Software configuration management Software development methodology Software development process Software quality Software quality assurance Software verification and validation Structured analysis Orientations Agile Aspectoriented Object orientation Ontology Service orientation SDLC Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD UP Scrum Spiral model VModel Waterfall model XP Other SPICE CMMI Data model ER model Function model Information model Metamodeling Object model Systems model View model Languages IDEF UML USL SysML Software engineers Victor Basili Kent Beck Grady Booch Fred Brooks Barry Boehm Peter Chen Danese Cooper Ward Cunningham Tom DeMarco Edsger W Dijkstra Delores M Etter Martin Fowler Adele Goldstine Margaret Hamilton C A R Hoare Lois Haibt Mary Jean Harrold Grace Hopper Watts Humphrey Michael A Jackson Ivar Jacobson Alan Kay Nancy Leveson Stephen J Mellor Bertrand Meyer David Parnas Trygve Reenskaug Winston W Royce James Rumbaugh Mary Shaw Peri Tarr Elaine Weyuker Niklaus Wirth Edward Yourdon Related fields Computer science Computer engineering Project management Risk management Systems engineering Category Commons v t e Systems engineering Subfields Aerospace engineering Biological systems engineering Configuration management Earth systems engineering and management Electrical engineering Enterprise systems engineering Performance engineering Reliability engineering Safety engineering Processes Requirements engineering Functional specification System integration Verification and validation Design review Concepts Business process System System lifecycle VModel Systems development life cycle Tools Decisionmaking Function modelling IDEF Optimization Quality function deployment System dynamics Systems Modeling Language Systems analysis Systems modeling Work breakdown structure People James S Albus Ruzena Bajcsy Benjamin S Blanchard Wernher von Braun Kathleen Carley Harold Chestnut Wolt Fabrycky Barbara Grosz Arthur David Hall III Derek Hitchins Robert E Machol Radhika Nagpal Simon Ramo Joseph Francis Shea Katia Sycara Manuela M Veloso John N Warfield Related fields Control engineering Computer engineering Industrial engineering Operations research Project management Quality management Risk management Software engineering Category