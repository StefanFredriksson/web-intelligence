Artifact software development This article needs additional citations for verification Please help improve this article by adding citations to reliable sources Unsourced material may be challenged and removed Find sources Artifactsoftware development news newspapers books scholar JSTOR August 2009 Learn how and when to remove this template message An artifact is one of many kinds of tangible byproducts produced during the development of software Some artifacts eg use cases class diagrams and other Unified Modeling Language UML models requirements and design documents help describe the function architecture and design of software Other artifacts are concerned with the process of development itselfsuch as project plans business cases and risk assessments The term artifact in connection with software development is largely associated with specific development methods or processes eg Unified Process This usage of the term may have originated with those methods citation needed Build tools often refer to source code compiled for testing as an artifact because the executable is necessary to carrying out the testing plan Without the executable to test the testing plan artifact is limited to nonexecution based testing In nonexecution based testing the artifacts are the walkthroughs inspections and correctness proofs On the other hand execution based testing requires at minimum two artifacts a test suite and the executable An artifact occasionally may be used to refer to the released code in the case of a code library or released executable in the case of a program produced but the more common usage is in referring to the byproducts of software development rather than the product itself Open source code libraries often contain a testing harness to allow contributors to ensure their changes do not cause regression bugs in the code library Much of what are considered artifacts is software documentation In enduser development an artifact is either an application or a complex data object that is created by an enduser without the need to know a general programming language Artifacts describe automated behavior or control sequences such as database requests or grammar rules 1 or usergenerated content Artifacts vary in their maintainability Maintainability is primarily affected by the role the artifact fulfills The role can be either practical or symbolic In the earliest stages of software development artifacts may be created by the design team to serve a symbolic role to show the project sponsor how serious the contractor is about meeting the projects needs Symbolic artifacts often convey information poorly but are impressivelooking Symbolic enhance understanding Generally speaking Illuminated Scrolls are also considered unmaintainable due to the diligence it requires to preserve the symbolic quality For this reason once Illuminated Scrolls are shown to the project sponsor and approved they are replaced by artifacts which serve a practical role Practical artifacts usually need to be maintained throughout the project lifecycle and as such are generally highly maintainable Artifacts are significant from a project management perspective as deliverables The deliverables of a software project are likely to be the same as its artifacts with the addition of the software itself The sense of artifacts as byproducts is similar to the use of the term artifact in science to refer to something that arises from the process in hand rather than the issue itself ie a result of interest that stems from the means rather than the end To collect organize and manage artifacts a Software development folder may be utilized POST apiTodoHttpPostpublic async TaskActionResultTodoItem PostTodoItemTodoItem item contextTodoItemsAdditem await contextSaveChangesAsync return CreatedAtActionnameofGetTodoItem new id itemId item See also edit Artifact UML Software development folder References edit H Lieberman B A Nardi and D Wright Grammex Defining grammars by example In ACM conference on Human Factors in Computing Systems Summary Demonstrations CHI 1998 Los Angeles California US pp 1112 ACM Press Apr 1998 Further reading edit Per Kroll Philippe Kruchten 2003 The Rational Unified Process Made Easy A Practitioners Guide to the RUP mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em ISBN 0321166094