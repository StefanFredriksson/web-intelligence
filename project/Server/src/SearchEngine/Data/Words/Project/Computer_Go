Computer Go This article is about the study of Go board game in artificial intelligence For the computer programming language called Go see Go programming language Not to be confused with Go software MIGOS redirects here For the American hip hop trio see Migos Field of artificial intelligence dedicated to creating a computer program that plays Go Part of a series on Go Game specifics Rules Handicaps Proverbs List of terms Strategy and tactics Opening theory strategy Fuseki wholeboard openings Joseki cornerbased openings Life and death Tsumego Go puzzles History and culture History Equipment Variants Four go houses List of games Players and organizations Players Ranks and ratings Professionals Organizations Competitions Computers and mathematics Go and mathematics Computer Go Go software Internet Go servers AlphaGo versus Lee Sedol v t e Computer Go is the field of artificial intelligence AI dedicated to creating a computer program that plays the traditional board game Go The game of Go has been a fertile subject of artificial intelligence research for decades culminating in 2017 with AlphaGo Master winning three of three games against Ke Jie who at the time continuously held the world No 1 ranking for two years 1 2 Contents 1 Performance 11 Early decades 12 21st century 13 2015 onwards The deep learning era 2 Obstacles to highlevel performance 21 Size of board 22 Number of move options 23 Evaluation function 24 Combinatorial problems 25 Endgame 26 Order of play 3 Tactical search 4 State representation 5 System design 51 New approaches to problems 52 Design philosophies 521 Minimax tree search 522 Knowledgebased systems 523 MonteCarlo methods 524 Machine learning 53 AlphaGo 6 List of Goplaying computer programs 7 Competitions among computer Go programs 71 History 72 Rule Formalization Problems in computercomputer games 73 Testing 8 See also 9 References 10 Further reading 11 External links Performance edit Go is a complex board game that requires intuition creative and strategic thinking 3 4 It has long been considered a difficult challenge in the field of artificial intelligence AI and is considerably more difficult 5 to solve than chess Many in the field of artificial intelligence consider Go to require more elements that mimic human thought than chess 6 Mathematician I J Good wrote in 1965 7 mwparseroutput templatequoteoverflowhiddenmargin1em 0padding0 40pxmwparseroutput templatequote templatequotecitelineheight15emtextalignleftpaddingleft16emmargintop0 Go on a computer In order to programme a computer to play a reasonable game of Go rather than merely a legal game it is necessary to formalise the principles of good strategy or to design a learning programme The principles are more qualitative and mysterious than in chess and depend more on judgment So I think it will be even more difficult to programme a computer to play a reasonable game of Go than of chess Prior to 2015 8 the best Go programs only managed to reach amateur dan level 9 On the small 99 board the computer fared better and some programs managed to win a fraction of their 99 games against professional players Prior to AlphaGo some researchers had claimed that computers would never defeat top humans at Go 10 Early decades edit The first Go program was written by Albert Lindsey Zobrist in 1968 as part of his thesis on pattern recognition 11 It introduced an influence function to estimate territory and Zobrist hashing to detect ko In April 1981 Jonathan K Millen published an article in Byte discussing Wally a Go program with a 15x15 board that fit within the KIM1 microcomputers 1K RAM 12 Bruce F Webster published an article in the magazine in November 1984 discussing a Go program he had written for the Apple Macintosh including the MacFORTH source 13 In 1998 very strong players were able to beat computer programs while giving handicaps of 2530 stones an enormous handicap that few human players would ever take There was a case in the 1994 World Computer Go Championship where the winning program Go Intellect lost all three games against the youth players while receiving a 15stone handicap 14 In general players who understood and exploited a programs weaknesses could win with much larger handicaps than typical players 15 21st century edit Developments in Monte Carlo tree search and machine learning brought the best programs to high dan level on the small 9x9 board In 2009 the first such programs appeared which could reach and hold low danlevel ranks on the KGS Go Server on the 19x19 board as well In 2010 at the 2010 European Go Congress in Finland MogoTW played 19x19 Go against Catalin Taranu 5p MogoTW received a sevenstone handicap and won 16 In 2011 Zen reached 5 dan on the server KGS playing games of 15 seconds per move The account which reached that rank uses a cluster version of Zen running on a 26core machine 17 In 2012 Zen beat Takemiya Masaki 9p by 11 points at five stones handicap followed by a 20point win at four stones handicap 18 In 2013 Crazy Stone beat Yoshio Ishida 9p in a 1919 game at four stones handicap 19 The 2014 Codecentric Go Challenge a bestoffive match in an even 19x19 game was played between Crazy Stone and FranzJozef Dickhut 6d No stronger player had ever before agreed to play a serious competition against a go program on even terms FranzJozef Dickhut won though Crazy Stone won the first match by 15 points 20 2015 onwards The deep learning era edit In October 2015 Google DeepMind program AlphaGo beat Fan Hui the European Go champion five times out of five in tournament conditions 21 In March 2016 AlphaGo beat Lee Sedol in the first three of five matches 22 This was the first time that a 9dan master had played a professional game against a computer without handicap 23 Lee won the fourth match describing his win as invaluable 24 AlphaGo won the final match two days later 25 26 In May 2017 AlphaGo beat Ke Jie who at the time was ranked top in the world 27 28 in a threegame match during the Future of Go Summit 29 In October 2017 DeepMind revealed a new version of AlphaGo trained only through self play that had surpassed all previous versions beating the Ke Jie version in 89 out of 100 games 30 Since the basic principles of AlphaGo had been published in the journal Nature other teams were able to produce highlevel programs By 2017 both Zen and Tencent s project Fine Art were capable of defeating very highlevel professionals some of the time and the open source Leela Zero engine was released Obstacles to highlevel performance edit This section needs additional citations for verification Please help improve this article by adding citations to reliable sources Unsourced material may be challenged and removed Find sources Computer Go news newspapers books scholar JSTOR October 2007 Learn how and when to remove this template message For a long time it was a widely held opinion that computer Go posed a problem fundamentally different from computer chess It was believed that methods relying on fast global search with relatively little domain knowledge would not be effective against human experts Therefore a large part of the computer Go development effort was during these times focused on ways of representing humanlike expert knowledge and combining this with local search to answer questions of a tactical nature The result of this were programs that handled many situations well but which had very pronounced weaknesses compared to their overall handling of the game Also these classical programs gained almost nothing from increases in available computing power per se and progress in the field was generally slow A few researchers grasped the potential of probabilistic methods and predicted that they would come to dominate computer gameplaying 31 but many others considered a strong Goplaying program something that could be achieved only in the far future as a result of fundamental advances in general artificial intelligence technology Even writing a program capable of automatically determining the winner of a finished game was seen as no trivial matter The advent of programs based on Monte Carlo search started in 2006 changed this situation in many ways with the first 9dan professional Go players being defeated in 2013 by multicore computers albeit with fourstone handicap Size of board edit The large board 1919 361 intersections is often noted as one of the primary reasons why a strong program is hard to create The large board size prevents an alphabeta searcher from achieving deep lookahead without significant search extensions or pruning heuristics In 2002 a computer program called MIGOS MIni GO Solver completely solved the game of Go for the 55 board Black wins taking the whole board 32 Number of move options edit Continuing the comparison to chess Go moves are not as limited by the rules of the game For the first move in chess the player has twenty choices Go players begin with a choice of 55 distinct legal moves accounting for symmetry This number rises quickly as symmetry is broken and soon almost all of the 361 points of the board must be evaluated Some moves are much more popular than others and some are almost never played but all are possible Evaluation function edit While a material counting evaluation is not sufficient for decent play in chess material balance and various positional factors like pawn structure are easy to quantify These types of positional evaluation rules cannot efficiently be applied to Go The value of a Go position depends on a complex analysis to determine whether or not the group is alive which stones can be connected to one another and heuristics around the extent to which a strong position has influence or the extent to which a weak position can be attacked More than one move can be regarded as the best depending on which strategy is used In order to choose a move the computer must evaluate different possible outcomes and decide which is best This is difficult due to the delicate tradeoffs present in Go For example it may be possible to capture some enemy stones at the cost of strengthening the opponents stones elsewhere Whether this is a good trade or not can be a difficult decision even for human players The computational complexity also shows here as a move might not be immediately important but after many moves could become highly important as other areas of the board take shape Combinatorial problems edit Sometimes it is mentioned in this context that various difficult combinatorial problems in fact any NPhard problem can be converted to Golike problems on a sufficiently large board however the same is true for other abstract board games including chess and minesweeper when suitably generalized to a board of arbitrary size NPcomplete problems do not tend in their general case to be easier for unaided humans than for suitably programmed computers it is doubtful that unaided humans would be able to compete successfully against computers in solving for example instances of the subset sum problem Endgame edit Given that the endgame contains fewer possible moves than the opening fuseki or middle game one might suppose that it is easier to play and thus that a computer should be able to easily tackle it In chess computer programs perform worse in chess endgames because the ideas are longterm unless the number of pieces is reduced to an extent that allows taking advantage of solved endgame tablebases The application of surreal numbers to the endgame in Go a general game analysis pioneered by John H Conway has been further developed by Elwyn R Berlekamp and David Wolfe and outlined in their book Mathematical Go mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput idlockfree amwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput idlocklimited amwparseroutput idlockregistration amwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput idlocksubscription amwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em ISBN 9781568810324 While not of general utility in most playing circumstances it greatly aids the analysis of certain classes of positions Nonetheless although elaborate study has been conducted Go endgames have been proven to be PSPACEhard There are many reasons why they are so hard Even if a computer can play each local endgame area flawlessly we cannot conclude that its plays would be flawless in regard to the entire board Additional areas of consideration in endgames include sente and gote relationships prioritization of different local endgames territory counting and estimation and so on The endgame may involve many other aspects of Go including life and death which are also known to be NPhard 33 34 Each of the local endgame areas may affect one another In other words they are dynamic in nature although visually isolated This makes it much more difficult for computers to deal with This nature leads to some very complex situations like Triple Ko 35 Quadruple Ko 36 Molasses Ko 37 and Moonshine Life 38 Thus it is very unlikely that it will be possible to program a reasonably fast algorithm for playing the Go endgame flawlessly let alone the whole Go game 39 Order of play edit MonteCarlo based Go engines have a reputation of being much more willing to play tenuki moves elsewhere on the board rather than continue a local fight than human players Directly calculating when a specific local move is required can be difficult 40 This was often perceived as a weakness early in these programs existence 41 That said this tendency has persisted in AlphaGos playstyle with dominant results so this may be more of a quirk than a weakness 42 Tactical search edit One of the main concerns for a Go player is which groups of stones can be kept alive and which can be captured This general class of problems is known as life and death The most direct strategy for calculating life and death is to perform a tree search on the moves which potentially affect the stones in question and then to record the status of the stones at the end of the main line of play However within time and memory constraints it is not generally possible to determine with complete accuracy which moves could affect the life of a group of stones This implies that some heuristic must be applied to select which moves to consider The net effect is that for any given program there is a tradeoff between playing speed and life and death reading abilities With Bensons algorithm it is possible to determine the chains which are unconditionally alive and therefore would not need to be checked in the future for safety State representation edit An issue that all Go programs must tackle is how to represent the current state of the game For programs that use extensive searching techniques this representation needs to be copied andor modified for each new hypothetical move considered This need places the additional constraint that the representation should either be small enough to be copied quickly or flexible enough that a move can be made and undone easily The most direct way of representing a board is as a one or twodimensional array where elements in the array represent points on the board and can take on a value corresponding to a white stone a black stone or an empty intersection Additional data is needed to store how many stones have been captured whose turn it is and which intersections are illegal due to the Ko rule Most programs however use more than just the raw board information to evaluate positions Data such as which stones are connected in strings which strings are associated with each other which groups of stones are in risk of capture and which groups of stones are effectively dead are necessary to make an accurate evaluation of the position While this information can be extracted from just the stone positions much of it can be computed more quickly if it is updated in an incremental permove basis This incremental updating requires more information to be stored as the state of the board which in turn can make copying the board take longer This kind of tradeoff is indicative of the problems involved in making fast computer Go programs An alternative method is to have a single board and make and take back moves so as to minimize the demands on computer memory and have the results of the evaluation of the board stored This avoids having to copy the information over and over again System design edit New approaches to problems edit Historically GOFAI Good Old Fashioned AI techniques have been used to approach the problem of Go AI More recently neural networks have been used as an alternative approach One example of a program which uses neural networks is WinHonte 43 These approaches attempt to mitigate the problems of the game of Go having a high branching factor and numerous other difficulties Computer Go research results are being applied to other similar fields such as cognitive science pattern recognition and machine learning 44 Combinatorial Game Theory a branch of applied mathematics is a topic relevant to computer Go 44 Design philosophies edit The only choice a program needs to make is where to place its next stone However this decision is made difficult by the wide range of impacts a single stone can have across the entire board and the complex interactions various stones groups can have with each other Various architectures have arisen for handling this problem The most popular use some form of tree search the application of Monte Carlo methods the application of pattern matching the creation of knowledgebased systems and the use of machine learning Few programs use only one of these techniques exclusively most combine portions of each into one synthetic system Minimax tree search edit One traditional AI technique for creating game playing software is to use a minimax tree search This involves playing out all hypothetical moves on the board up to a certain point then using an evaluation function to estimate the value of that position for the current player The move which leads to the best hypothetical board is selected and the process is repeated each turn While tree searches have been very effective in computer chess they have seen less success in Computer Go programs This is partly because it has traditionally been difficult to create an effective evaluation function for a Go board and partly because the large number of possible moves each side can make each leads to a high branching factor This makes this technique very computationally expensive Because of this many programs which use search trees extensively can only play on the smaller 99 board rather than full 1919 ones There are several techniques which can greatly improve the performance of search trees in terms of both speed and memory Pruning techniques such as alphabeta pruning Principal Variation Search and MTDf can reduce the effective branching factor without loss of strength In tactical areas such as life and death Go is particularly amenable to caching techniques such as transposition tables These can reduce the amount of repeated effort especially when combined with an iterative deepening approach In order to quickly store a fullsized Go board in a transposition table a hashing technique for mathematically summarizing is generally necessary Zobrist hashing is very popular in Go programs because it has low collision rates and can be iteratively updated at each move with just two XORs rather than being calculated from scratch Even using these performanceenhancing techniques full tree searches on a fullsized board are still prohibitively slow Searches can be sped up by using large amounts of domain specific pruning techniques such as not considering moves where your opponent is already strong and selective extensions like always considering moves next to groups of stones which are about to be captured However both of these options introduce a significant risk of not considering a vital move which would have changed the course of the game Results of computer competitions show that pattern matching techniques for choosing a handful of appropriate moves combined with fast localized tactical searches explained above were once sufficient to produce a competitive program For example GNU Go was competitive until 2008 Knowledgebased systems edit Novices often learn a lot from the game records of old games played by master players There is a strong hypothesis that suggests that acquiring Go knowledge is a key to making a strong computer Go For example Tim Kinger and David Mechner argue that it is our belief that with better tools for representing and maintaining Go knowledge it will be possible to develop stronger Go programs They propose two ways recognizing common configurations of stones and their positions and concentrating on local battles Go programs are still lacking in both quality and quantity of knowledge 45 After implementation the use of expert knowledge has been proved very effective in programming Go software Hundreds of guidelines and rules of thumb for strong play have been formulated by both highlevel amateurs and professionals The programmers task is to take these heuristics formalize them into computer code and utilize pattern matching and pattern recognition algorithms to recognize when these rules apply It is also important to have a system for determining what to do in the event that two conflicting guidelines are applicable Most of the relatively successful results come from programmers individual skills at Go and their personal conjectures about Go but not from formal mathematical assertions they are trying to make the computer mimic the way they play Go Most competitive programs have required 515 personyears of effort and contain 50100 modules dealing with different aspects of the game 46 This method has until recently been the most successful technique in generating competitive Go programs on a fullsized board Some example of programs which have relied heavily on expert knowledge are Handtalk later known as Goemate The Many Faces of Go Go Intellect and Go each of which has at some point been considered the worlds best Go program Nevertheless adding knowledge of Go sometimes weakens the program because some superficial knowledge might bring mistakes the best programs usually play good master level moves However as every games player knows just one bad move can ruin a good game Program performance over a full game can be much lower than master level 46 MonteCarlo methods edit Main article MonteCarlo tree search One major alternative to using handcoded knowledge and searches is the use of Monte Carlo methods This is done by generating a list of potential moves and for each move playing out thousands of games at random on the resulting board The move which leads to the best set of random games for the current player is chosen as the best move The advantage of this technique is that it requires very little domain knowledge or expert input the tradeoff being increased memory and processor requirements However because the moves used for evaluation are generated at random it is possible that a move which would be excellent except for one specific opponent response would be mistakenly evaluated as a good move The result of this are programs which are strong in an overall strategic sense but are imperfect tactically citation needed This problem can be mitigated by adding some domain knowledge in the move generation and a greater level of search depth on top of the random evolution Some programs which use MonteCarlo techniques are Fuego 47 The Many Faces of Go v12 48 Leela 49 MoGo 50 Crazy Stone MyGoFriend 51 and Zen In 2006 a new search technique upper confidence bounds applied to trees UCT 52 was developed and applied to many 9x9 MonteCarlo Go programs with excellent results UCT uses the results of the play outs collected so far to guide the search along the more successful lines of play while still allowing alternative lines to be explored The UCT technique along with many other optimizations for playing on the larger 19x19 board has led MoGo to become one of the strongest research programs Successful early applications of UCT methods to 19x19 Go include MoGo Crazy Stone and Mango 53 MoGo won the 2007 Computer Olympiad and won one out of three blitz game against Guo Juan 5th Dan Pro in the much less complex 9x9 Go The Many Faces of Go 54 won the 2008 Computer Olympiad after adding UCT search to its traditional knowledgebased engine Machine learning edit While knowledgebased systems have been very effective at Go their skill level is closely linked to the knowledge of their programmers and associated domain experts One way to break this limitation is to use machine learning techniques in order to allow the software to automatically generate rules patterns andor rule conflict resolution strategies This is generally done by allowing a neural network or genetic algorithm to either review a large database of professional games or play many games against itself or other people or programs These algorithms are then able to utilize this data as a means of improving their performance AlphaGo used this to great effect Other programs using neural nets previously have been NeuroGo and WinHonte Machine learning techniques can also be used in a less ambitious context to tune specific parameters of programs which rely mainly on other techniques For example Crazy Stone learns move generation patterns from several hundred sample games using a generalization of the Elo rating system 55 AlphaGo edit Main article AlphaGo AlphaGo developed by Google DeepMind made a significant advance by beating a professional human player in October 2015 using techniques that combined deep learning and MonteCarlo tree search 56 AlphaGo is significantly more powerful than other previous Go programs and the first to beat a 9 dan human professional in a game without handicaps on a fullsized board List of Goplaying computer programs edit See also Go software AlphaGo the first computer program to win in even matches against a professional human Go player AYA 57 by Hiroshi Yamashita Crazy Stone by Rémi Coulom sold as Saikyo no Igo in Japan Darkforest by Facebook Fine Art by Tencent Fuego 47 an open source Monte Carlo program Goban 58 Macintosh OS X Go program by Sente requires free Goban Extensions 59 GNU Go an open source classical Go program Go 60 by Michael Reiss sold as Strongest Go or Tuyoi Igo in Japan Leela 49 the first Monte Carlo program for sale to the public Leela Zero 49 a reimplementation of the system described in the AlphaGo Zero paper The Many Faces of Go 48 by David Fotland sold as AI Igo in Japan MyGoFriend 51 by Frank Karger MoGo 61 by Sylvain Gelly parallel version 50 by many people Pachi 62 open source Monte Carlo program by Petr Baudiš online version Peepo 63 by Jonathan Chetwynd with maps and comments as you play Smart Go 64 by Anders Kierulf inventor of the Smart Game Format Steenvreter 65 by Erik van der Werf Zen 66 by Yoji Ojima aka Yamato sold as Tencho no Igo in Japan parallel version by Hideki Kato Competitions among computer Go programs edit Several annual competitions take place between Go computer programs the most prominent being the Go events at the Computer Olympiad Regular less formal competitions between programs used to occur on the KGS Go Server 67 monthly and the Computer Go Server 68 continuous Prominent goplaying programs include Crazy Stone Zen Aya Mogo The Many Faces of Go pachi and Fuego all listed above and Taiwaneseauthored coldmilk Dutchauthored Steenvreter and Koreanauthored DolBaram History edit The first computer Go competition was sponsored by Acornsoft 69 and the first regular ones by USENIX They ran from 1984 to 1988 These competitions introduced Nemesis the first competitive Go program from Bruce Wilcox and G25 by David Fotland which would later evolve into Cosmos and The Many Faces of Go One of the early drivers of computer Go research was the Ing Prize a relatively large money award sponsored by Taiwanese banker Ing Changki offered annually between 1985 and 2000 at the World Computer Go Congress or Ing Cup The winner of this tournament was allowed to challenge young players at a handicap in a short match If the computer won the match the prize was awarded and a new prize announced a larger prize for beating the players at a lesser handicap The series of Ing prizes was set to expire either 1 in the year 2000 or 2 when a program could beat a 1dan professional at no handicap for 40000000 NT dollars The last winner was Handtalk in 1997 claiming 250000 NT dollars for winning an 11stone handicap match against three 1113 year old amateur 26 dans At the time the prize expired in 2000 the unclaimed prize was 400000 NT dollars for winning a ninestone handicap match 70 Many other large regional Go tournaments congresses had an attached computer Go event The European Go Congress has sponsored a computer tournament since 1987 and the USENIX event evolved into the USNorth American Computer Go Championship held annually from 19882000 at the US Go Congress Japan started sponsoring computer Go competitions in 1995 The FOST Cup was held annually from 1995 to 1999 in Tokyo That tournament was supplanted by the Gifu Challenge which was held annually from 2003 to 2006 in Ogaki Gifu The Computer Go UEC Cup has been held annually since 2007 Rule Formalization Problems in computercomputer games edit When two computers play a game of Go against each other the ideal is to treat the game in a manner identical to two humans playing while avoiding any intervention from actual humans However this can be difficult during end game scoring The main problem is that Go playing software which usually communicates using the standardized Go Text Protocol GTP will not always agree with respect to the alive or dead status of stones While there is no general way for two different programs to talk it out and resolve the conflict this problem is avoided for the most part by using Chinese TrompTaylor or American Go Association AGA rules in which continued play without penalty is required until there is no more disagreement on the status of any stones on the board In practice such as on the KGS Go Server the server can mediate a dispute by sending a special GTP command to the two client programs indicating they should continue placing stones until there is no question about the status of any particular group all dead stones have been captured The CGOS Go Server usually sees programs resign before a game has even reached the scoring phase but nevertheless supports a modified version of TrompTaylor rules requiring a full play out These rule sets mean that a program which was in a winning position at the end of the game under Japanese rules when both players have passed could lose because of poor play in the resolution phase but this is not a common occurrence and is considered a normal part of the game under all of the area rule sets The main drawback to the above system is that some rule sets such as the traditional Japanese rules penalize the players for making these extra moves precluding the use of additional playout for two computers Nevertheless most modern Go Programs support Japanese rules against humans and are competent in both play and scoring Fuego Many Faces of Go SmartGo etc Historically another method for resolving this problem was to have an expert human judge the final board However this introduces subjectivity into the results and the risk that the expert would miss something the program saw Testing edit Many programs are available that allow computer Go engines to play against each other and they almost always communicate via the Go Text Protocol GTP GoGUI and its addon goguitwogtp can be used to play two engines against each other on a single computer system 71 SmartGo and Many Faces of Go also provide this feature To play as wide a variety of opponents as possible the KGS Go Server allows Go engine vs Go engine play as well as Go engine vs human in both ranked and unranked matches CGOS is a dedicated computer vs computer Go server See also edit Computer chess Computer Othello Computer shogi Deep Blue Chess computer Deep Thought Go Text Protocol References edit 柯洁迎19岁生日 雄踞人类世界排名第一已两年 in Chinese May 2017 Worlds Go Player Ratings 24 May 2017 Googles AI Wins First Game in Historic Match With Go Champion WIRED 9 March 2016 httpswwwkoreatimescokrwwwnewstech201603325200068html Bouzy Bruno Cazenave Tristan 9 August 2001 Computer Go An AI oriented survey Artificial Intelligence 132 1 39103 doi 101016S0004370201001278 Johnson George 19970729 To Test a Powerful Computer Play an Ancient Game The New York Times retrieved 20080616 httpwwwchiltoncomputingorgukaclliteraturereportsp019htm Silver David Huang Aja Maddison Chris J Guez Arthur Sifre Laurent Driessche George van den Schrittwieser Julian Antonoglou Ioannis Panneershelvam Veda Lanctot Marc Dieleman Sander Grewe Dominik Nham John Kalchbrenner Nal Sutskever Ilya Lillicrap Timothy Leach Madeleine Kavukcuoglu Koray Graepel Thore Hassabis Demis 28 January 2016 Mastering the game of Go with deep neural networks and tree search Nature 529 7587 484489 Bibcode 2016Natur529484S doi 101038nature16961 ISSN 00280836 PMID 26819042 Wedd Nick HumanComputer Go Challenges computergoinfo Retrieved 20111028 Huge leap forward Computer that mimics human brain beats professional at game of Go Albert Zobrist 1970 Feature Extraction and Representation for Pattern Recognition and the Game of Go PhD Thesis 152 pp University of Wisconsin Also published as technical report Millen Jonathan K April 1981 Programming the Game of Go Byte p102 Retrieved 18 October 2013 Webster Bruce November 1984 A Go Board for the Macintosh Byte p125 Retrieved 23 October 2013 CSTR339 Computer Go Tech Report Retrieved 28 January 2016 See for instance intgofedorg Archived May 28 2008 at the Wayback Machine EGC 2010 Tampere News Archived from the original on 14 August 2009 Retrieved 28 January 2016 KGS Game Archives Retrieved 28 January 2016 Zen computer Go program beats Takemiya Masaki with just 4 stones Go Game Guru Archived from the original on 20160201 Retrieved 28 January 2016 アマ六段の力天才かも囲碁棋士コンピューターに敗れる初の公式戦 MSN Sankei News Archived from the original on 24 March 2013 Retrieved 27 March 2013 codecentric go challenge Just another WordPress site Retrieved 28 January 2016 Google AI algorithm masters ancient game of Go Nature News Comment Retrieved 28 January 2016 Artificial intelligence Googles AlphaGo beats Go master Lee Sedol BBC News Online 12 March 2016 Retrieved 12 March 2016 Googles DeepMind defeats legendary Go player Lee Sedol in historic victory wwwthevergecom Retrieved 9 March 2016 Artificial intelligence Go master Lee Sedol wins against AlphaGo program BBC News Online 13 March 2016 Retrieved 13 March 2016 Googles AlphaGo AI beats Lee Sedol again to win Go series 41 The Verge Retrieved 15 March 2016 After Win in China AlphaGos Designers Explore New AI 20170527 Worlds Go Player Ratings May 2017 柯洁迎19岁生日 雄踞人类世界排名第一已两年 in Chinese May 2017 Googles AlphaGo Continues Dominance With Second Win in China 20170525 Silver David Schrittwieser Julian Simonyan Karen Antonoglou Ioannis Huang Aja Guez Arthur Hubert Thomas Baker Lucas Lai Matthew Bolton Adrian Chen Yutian Lillicrap Timothy Fan Hui Sifre Laurent Driessche George van den Graepel Thore Hassabis Demis 19 October 2017 Mastering the game of Go without human knowledge PDF Nature 550 7676 354359 Bibcode 2017Natur550354S doi 101038nature24270 ISSN 00280836 PMID 29052630 Game Tree Searching with Dynamic Stochastic Control pp 194195 5x5 Go is solved Retrieved 28 January 2016 On page 11 Crasmaru shows that it is NPcomplete to determine the status of certain restricted forms of lifeanddeath problems in Go See the following reference Erik D Demaine Robert A Hearn 20080422 Playing Games with Algorithms Algorithmic Combinatorial Game Theory arXiv cs0106019 Marcel Crasmaru 1999 On the complexity of TsumeGo Computers and Games Lecture Notes in Computer Science 1558 London UK SpringerVerlag pp222231 doi 101007354048957615 ISBN 9783540657668 Triple Ko Quadruple Ko Molasses Ko Moonshine Life Computer Go Programming example of weak play of a computer program Archived from the original on 20120710 Retrieved 20100828 Facebook trains AI to beat humans at Go board game BBC News BBC News Retrieved 20160424 Ormerod David 12 March 2016 AlphaGo shows its true strength in 3rd victory against Lee Sedol Go Game Guru Archived from the original on 13 March 2016 Retrieved 12 March 2016 JellyfishGocom Archived from the original on 3 July 2007 Retrieved 28 January 2016 a b Müller Martin Computer Go permanent dead link Artificial Intelligence 134 2002 p150 Müller Martin Computer Go permanent dead link Artificial Intelligence 134 2002 p151 a b Müller Martin Computer Go permanent dead link Artificial Intelligence 134 2002 p148 a b Fuego a b David Fotland Dan Level Go Software Many Faces of Go a b c Sjeng chess audio and misc software a b Archived copy Archived from the original on 20080810 Retrieved 20080603 CS1 maint archived copy as title link a b MyGoFriend Gold Medal Winner 15th Computer Olympiad Go 9x9 Archived from the original on 20101208 UCT Page not found 404 Archived from the original on 20071103 David Fotland Smart Games Computing Elo Ratings of Move Patterns in the Game of Go Retrieved 28 January 2016 Research Blog AlphaGo Mastering the ancient game of Go with Machine Learning Google Research Blog 27 January 2016 Page ONサービス終了のお知らせ Archived from the original on 20061211 Goban Play Go on Mac Sente Archived from the original on 20130519 Retrieved 20130614 Goban Extensions Sente Archived from the original on 20160518 Retrieved 20130614 Go Go playing program Archived copy Archived from the original on 20061128 Retrieved 20070221 CS1 maint archived copy as title link Pachi Board Game of Go Weiqi Baduk httpwwwpeepocom Archived 20110904 at the Wayback Machine Anders Kierulf SmartGo STEENVRETER Zen go program Computer Go Tournaments on KGS 9x9 Go Server Archived from the original on 20070119 Retrieved 20070325 Acorn 1984 The First Computer Go Tournament computergoinfo David Fotland World Computer Go Championships Retrieved 28 January 2016 Using GoGUI to play go computers against each other Archived 20110309 at the Wayback Machine Further reading edit CoEvolving a GoPlaying Neural Network written by Alex Lubberts Risto Miikkulainen 2001 Computer Game Playing Theory and Practice edited by MA Brauner The Ellis Horwood Series in Artificial Intelligence Halstead Press 1983 A collection of computer Go articles The American Go Journal vol 18 No 4 page 6 ISSN 01480243 A MachineLearning Approach to Computer Go Jeffrey Bagdis 2007 Minimalism in Ubiquitous Interface Design Wren C and Reynolds C 2004 Personal and Ubiquitous Computing 85 pages 370374 Video of computer Go vision system in operation shows interaction and users exploring Joseki and Fuseki MonteCarlo Go presented by Markus Enzenberger Computer Go Seminar University of Alberta April 2004 MonteCarlo Go written by B Bouzy and B Helmstetter from Scientific Literature Digital Library Static analysis of life and death in the game of Go written by Ken Chen Zhixing Chen 20 February 1999 article describing the techniques underlying Mogo External links edit Wikibooks has a book on the topic of Computer Go video computer Go to come Extensive list of computer Go events All systems Go by David A Mechner 1998 discusses the game where professional Go player Janice Kim won a game against program Handtalk after giving a 25stone handicap Kinger Tim and Mechner David An Architecture for Computer Go 1996 Computer Go and Computer Go Programming pages at Senseis Library Computer Go bibliography Another Computer Go Bibliography Computer Go mailing list Published articles about computer Go on Ideosphere gives current estimate of whether a Go program will be best player in the world Information on the Go Text Protocol commonly used for interfacing Go playing engines with graphical clients and internet servers The Computer Go Room on the K Go Server KGS for online discussion and running bots Two Representative Computer Go Games an article about two computer Go games played in 1999 one with two computers players and the other a 29stone handicap humancomputer game What A Way to Go describes work at Microsoft Research on building a computer Go player Cracking Go by Fenghsiung Hsu IEEE Spectrum magazine October 2007 Why it should be possible to build a Go machine stronger than any human player computergodataset SGF datasets of 1645958 games 