Software bug To report a MediaWiki error on Wikipedia see WikipediaBug reports This article needs additional citations for verification Please help improve this article by adding citations to reliable sources Unsourced material may be challenged and removed Find sources Software bug news newspapers books scholar JSTOR September 2017 Learn how and when to remove this template message Software development Core activities Processes Requirements Design Engineering Construction Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DevOps DAD DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TSP OpenUP UP XP Supporting disciplines Configuration management Documentation Software quality assurance SQA Project management User experience Practices ATDD BDD CCO CI CD DDD PP SBE Standup TDD Tools Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing Standards and Bodies of Knowledge BABOK CMMI IEEE standards ISO 9001 ISOIEC standards PMBOK SWEBOK ITIL Glossaries Artificial intelligence Computer science Electrical and electronics engineering v t e A software bug is an error flaw or fault in a computer program or system that causes it to produce an incorrect or unexpected result or to behave in unintended ways The process of finding and fixing bugs is termed debugging and often uses formal techniques or tools to pinpoint bugs and since the 1950s some computer systems have been designed to also deter detect or autocorrect various computer bugs during operations Most bugs arise from mistakes and errors made in either a programs source code or its design or in components and operating systems used by such programs A few are caused by compilers producing incorrect code A program that contains many bugs andor bugs that seriously interfere with its functionality is said to be buggy defective Bugs can trigger errors that may have ripple effects Bugs may have subtle effects or cause the program to crash or freeze the computer Other bugs qualify as security bugs and might for example enable a malicious user to bypass access controls in order to obtain unauthorized privileges Some software bugs have been linked to disasters Bugs in code that controlled the Therac25 radiation therapy machine were directly responsible for patient deaths in the 1980s In 1996 the European Space Agency s US1billion prototype Ariane 5 rocket had to be destroyed less than a minute after launch due to a bug in the onboard guidance computer program In June 1994 a Royal Air Force Chinook helicopter crashed into the Mull of Kintyre killing 29 This was initially dismissed as pilot error but an investigation by Computer Weekly convinced a House of Lords inquiry that it may have been caused by a software bug in the aircrafts enginecontrol computer 1 In 2002 a study commissioned by the US Department of Commerce s National Institute of Standards and Technology concluded that software bugs or errors are so prevalent and so detrimental that they cost the US economy an estimated 59billion annually or about 06 percent of the gross domestic product 2 Contents 1 History 11 Bugs in the System report 2 Terminology 3 Prevention 31 Typographical errors 32 Development methodologies 33 Programming language support 34 Code analysis 35 Instrumentation 4 Testing 5 Debugging 6 Benchmark of bugs 7 Bug management 71 Severity 72 Priority 73 Software releases 8 Types 81 Arithmetic 82 Logic 83 Syntax 84 Resource 85 Multithreading 86 Interfacing 87 Teamworking 9 Implications 10 Wellknown bugs 11 In popular culture 12 See also 13 References 14 External links History edit Main article Bug engineering The Middle English word bugge is the basis for the terms bugbear and bugaboo as terms used for a monster 3 The term bug to describe defects has been a part of engineering jargon since the 1870s and predates electronic computers and computer software it may have originally been used in hardware engineering to describe mechanical malfunctions For instance Thomas Edison wrote the following words in a letter to an associate in 1878 4 mwparseroutput templatequoteoverflowhiddenmargin1em 0padding0 40pxmwparseroutput templatequote templatequotecitelineheight15emtextalignleftpaddingleft16emmargintop0 It has been just so in all of my inventions The first step is an intuition and comes with a burst then difficulties arisethis thing gives out and it is then that Bugsas such little faults and difficulties are calledshow themselves and months of intense watching study and labor are requisite before commercial success or failure is certainly reached 5 Baffle Ball the first mechanical pinball game was advertised as being free of bugs in 1931 6 Problems with military gear during World War II were referred to as bugs or glitches 7 In the 1940 film Flight Command a defect in a piece of directionfinding gear is called a bug citation needed In a book published in 1942 Louise Dickinson Rich speaking of a powered ice cutting machine said Ice sawing was suspended until the creator could be brought in to take the bugs out of his darling 8 Isaac Asimov used the term bug to relate to issues with a robot in his short story Catch That Rabbit published in 1944 A page from the Harvard Mark II electromechanical computers log featuring a dead moth that was removed from the device The term bug was used in an account by computer pioneer Grace Hopper who publicized the cause of a malfunction in an early electromechanical computer 9 A typical version of the story is In 1946 when Hopper was released from active duty she joined the Harvard Faculty at the Computation Laboratory where she continued her work on the Mark II and Mark III Operators traced an error in the Mark II to a moth trapped in a relay coining the term bug This bug was carefully removed and taped to the log book Stemming from the first bug today we call errors or glitches in a program a bug 10 Hopper did not find the bug as she readily acknowledged The date in the log book was September 9 1947 11 12 13 The operators who found it including William Bill Burke later of the Naval Weapons Laboratory Dahlgren Virginia 14 were familiar with the engineering term and amusedly kept the insect with the notation First actual case of bug being found Hopper loved to recount the story 15 This log book complete with attached moth is part of the collection of the Smithsonian National Museum of American History 12 The related term debug also appears to predate its usage in computing the Oxford English Dictionary s etymology of the word contains an attestation from 1945 in the context of aircraft engines 16 The concept that software might contain errors dates back to Ada Lovelaces 1843 notes on the analytical engine in which she speaks of the possibility of program cards for Charles Babbage s analytical engine being erroneous an analysing process must equally have been performed in order to furnish the Analytical Engine with the necessary operative data and that herein may also lie a possible source of error Granted that the actual mechanism is unerring in its processes the cards may give it wrong orders Bugs in the System report edit The Open Technology Institute run by the group New America 17 released a report Bugs in the System in August 2016 stating that US policymakers should make reforms to help researchers identify and address software bugs The report highlights the need for reform in the field of software vulnerability discovery and disclosure 18 One of the reports authors said that Congress has not done enough to address cyber software vulnerability even though Congress has passed a number of bills to combat the larger issue of cyber security 18 Government researchers companies and cyber security experts are the people who typically discover software flaws The report calls for reforming computer crime and copyright laws 18 The Computer Fraud and Abuse Act the Digital Millennium Copyright Act and the Electronic Communications Privacy Act criminalize and create civil penalties for actions that security researchers routinely engage in while conducting legitimate security research the report said 18 Terminology edit While the use of the term bug to describe software errors is common many have suggested that it should be abandoned One argument is that the word bug is divorced from a sense that a human being caused the problem and instead implies that the defect arose on its own leading to a push to abandon the term bug in favor of terms such as defect with limited success 19 Since the 1970s Gary Kildall somewhat humorously suggested to use the term blunder 20 21 In software engineering mistake metamorphism from Greek meta change morph form refers to the evolution of a defect in the final stage of software deployment Transformation of a mistake committed by an analyst in the early stages of the software development lifecycle which leads to a defect in the final stage of the cycle has been called mistake metamorphism 22 Different stages of a mistake in the entire cycle may be described as mistakes anomalies faults failures errors exceptions crashes bugs defects incidents or side effects 22 Prevention edit The software industry has put much effort into reducing bug counts 23 24 These include Typographical errors edit Bugs usually appear when the programmer makes a logic error Various innovations in programming style and defensive programming are designed to make these bugs less likely or easier to spot Some typos especially of symbols or logical mathematical operators allow the program to operate incorrectly while others such as a missing symbol or misspelled name may prevent the program from operating Compiled languages can reveal some typos when the source code is compiled Development methodologies edit Several schemes assist managing programmer activity so that fewer bugs are produced Software engineering which addresses software design issues as well applies many techniques to prevent defects For example formal program specifications state the exact behavior of programs so that design bugs may be eliminated Unfortunately formal specifications are impractical for anything but the shortest programs because of problems of combinatorial explosion and indeterminacy Unit testing involves writing a test for every function unit that a program is to perform In testdriven development unit tests are written before the code and the code is not considered complete until all tests complete successfully Agile software development involves frequent software releases with relatively small changes Defects are revealed by user feedback Open source development allows anyone to examine source code A school of thought popularized by Eric S Raymond as Linuss law says that popular opensource software has more chance of having few or no bugs than other software because given enough eyeballs all bugs are shallow 25 This assertion has been disputed however computer security specialist Elias Levy wrote that it is easy to hide vulnerabilities in complex little understood and undocumented source code because even if people are reviewing the code that doesnt mean theyre qualified to do so 26 An example of this actually happening accidentally was the 2008 OpenSSL vulnerability in Debian Programming language support edit Programming languages include features to help prevent bugs such as static type systems restricted namespaces and modular programming For example when a programmer writes pseudocode LET REALVALUE PI THREE AND A BIT although this may be syntactically correct the code fails a type check Compiled languages catch this without having to run the program Interpreted languages catch such errors at runtime Some languages deliberately exclude features that easily lead to bugs at the expense of slower performance the general principle being that it is almost always better to write simpler slower code than inscrutable code that runs slightly faster especially considering that maintenance cost is substantial For example the Java programming language does not support pointer arithmetic implementations of some languages such as Pascal and scripting languages often have runtime bounds checking of arrays at least in a debugging build Code analysis edit Tools for code analysis help developers by inspecting the program text beyond the compilers capabilities to spot potential problems Although in general the problem of finding all programming errors given a specification is not solvable see halting problem these tools exploit the fact that human programmers tend to make certain kinds of simple mistakes often when writing software Instrumentation edit Tools to monitor the performance of the software as it is running either specifically to find problems such as bottlenecks or to give assurance as to correct working may be embedded in the code explicitly perhaps as simple as a statement saying PRINT I AM HERE or provided as tools It is often a surprise to find where most of the time is taken by a piece of code and this removal of assumptions might cause the code to be rewritten Testing edit Software testers are people whose primary task is to find bugs or write code to support testing On some projects more resources may be spent on testing than in developing the program Measurements during testing can provide an estimate of the number of likely bugs remaining this becomes more reliable the longer a product is tested and developed citation needed Debugging edit The typical bug history GNU Classpath project data A new bug submitted by the user is unconfirmed Once it has been reproduced by a developer it is a confirmed bug The confirmed bugs are later fixed Bugs belonging to other categories unreproducible will not be fixed etc are usually in the minority Main article Debugging Finding and fixing bugs or debugging is a major part of computer programming Maurice Wilkes an early computing pioneer described his realization in the late 1940s that much of the rest of his life would be spent finding mistakes in his own programs 27 Usually the most difficult part of debugging is finding the bug Once it is found correcting it is usually relatively easy Programs known as debuggers help programmers locate bugs by executing code line by line watching variable values and other features to observe program behavior Without a debugger code may be added so that messages or values may be written to a console or to a window or log file to trace program execution or show values However even with the aid of a debugger locating bugs is something of an art It is not uncommon for a bug in one section of a program to cause failures in a completely different section citation needed thus making it especially difficult to track for example an error in a graphics rendering routine causing a file IO routine to fail in an apparently unrelated part of the system Sometimes a bug is not an isolated flaw but represents an error of thinking or planning on the part of the programmer Such logic errors require a section of the program to be overhauled or rewritten As a part of code review stepping through the code and imagining or transcribing the execution process may often find errors without ever reproducing the bug as such More typically the first step in locating a bug is to reproduce it reliably Once the bug is reproducible the programmer may use a debugger or other tool while reproducing the error to find the point at which the program went astray Some bugs are revealed by inputs that may be difficult for the programmer to recreate One cause of the Therac25 radiation machine deaths was a bug specifically a race condition that occurred only when the machine operator very rapidly entered a treatment plan it took days of practice to become able to do this so the bug did not manifest in testing or when the manufacturer attempted to duplicate it Other bugs may stop occurring whenever the setup is augmented to help find the bug such as running the program with a debugger these are called heisenbugs humorously named after the Heisenberg uncertainty principle Since the 1990s particularly following the Ariane 5 Flight 501 disaster interest in automated aids to debugging rose such as static code analysis by abstract interpretation 28 Some classes of bugs have nothing to do with the code Faulty documentation or hardware may lead to problems in system use even though the code matches the documentation In some cases changes to the code eliminate the problem even though the code then no longer matches the documentation Embedded systems frequently work around hardware bugs since to make a new version of a ROM is much cheaper than remanufacturing the hardware especially if they are commodity items Benchmark of bugs edit To facilitate reproducible research on testing and debugging researchers use curated benchmarks of bugs the Siemens benchmark ManyBugs 29 is a benchmark of 185 C bugs in nine opensource programs Defects4J 30 is a benchmark of 341 Java bugs from 5 opensource projects It contains the corresponding patches which cover a variety of patch type 31 BEARS 32 is a benchmark of continuous integration build failures focusing on test failures It has been created by monitoring builds from opensource projects on Travis CI Bug management edit Bug management includes the process of documenting categorizing assigning reproducing correcting and releasing the corrected code Proposed changes to software bugs as well as enhancement requests and even entire releases are commonly tracked and managed using bug tracking systems or issue tracking systems 33 The items added may be called defects tickets issues or following the agile development paradigm stories and epics Categories may be objective subjective or a combination such as version number area of the software severity and priority as well as what type of issue it is such as a feature request or a bug Severity edit Severity is the impact the bug has on system operation This impact may be data loss financial loss of goodwill and wasted effort Severity levels are not standardized Impacts differ across industry A crash in a video game has a totally different impact than a crash in a web browser or real time monitoring system For example bug severity levels might be crash or hang no workaround meaning there is no way the customer can accomplish a given task has workaround meaning the user can still accomplish the task visual defect for example a missing image or displaced button or form element or documentation error Some software publishers use more qualified severities such as critical high low blocker or trivial 34 The severity of a bug may be a separate category to its priority for fixing and the two may be quantified and managed separately Priority edit Priority controls where a bug falls on the list of planned changes The priority is decided by each software producer Priorities may be numerical such as 1 through 5 or named such as critical high low or deferred These rating scales may be similar or even identical to severity ratings but are evaluated as a combination of the bugs severity with its estimated effort to fix a bug with low severity but easy to fix may get a higher priority than a bug with moderate severity that requires excessive effort to fix Priority ratings may be aligned with product releases such as critical priority indicating all the bugs that must be fixed before the next software release Software releases edit It is common practice to release software with known lowpriority bugs Most big software projects maintain two lists of known bugs those known to the software team and those to be told to users citation needed The second list informs users about bugs that are not fixed in a specific release and workarounds may be offered Releases are of different kinds Bugs of sufficiently high priority may warrant a special release of part of the code containing only modules with those fixes These are known as patches Most releases include a mixture of behavior changes and multiple bug fixes Releases that emphasize bug fixes are known as maintenance releases Releases that emphasize feature additionschanges are known as major releases and often have names to distinguish the new features from the old Reasons that a software publisher opts not to patch or even fix a particular bug include A deadline must be met and resources are insufficient to fix all bugs by the deadline 35 The bug is already fixed in an upcoming release and it is not of high priority The changes required to fix the bug are too costly or affect too many other components requiring a major testing activity It may be suspected or known that some users are relying on the existing buggy behavior a proposed fix may introduce a breaking change The problem is in an area that will be obsolete with an upcoming release fixing it is unnecessary Its not a bug A misunderstanding has arisen between expected and perceived behavior when such misunderstanding is not due to confusion arising from design flaws or faulty documentation Types edit This section contains embedded lists that may be poorly defined unverified or indiscriminate Please help to clean it up to meet Wikipedias quality standards Where appropriate incorporate items into the main body of the article August 2015 This section is in list format but may read better as prose You can help by converting this section if appropriate Editing help is available August 2015 In software development projects a mistake or fault may be introduced at any stage Bugs arise from oversights or misunderstandings made by a software team during specification design coding data entry or documentation For example a relatively simple program to alphabetize a list of words the design might fail to consider what should happen when a word contains a hyphen Or when converting an abstract design into code the coder might inadvertently create an offbyone error and fail to sort the last word in a list Errors may be as simple as a typing error a where a was intended Another category of bug is called a race condition that may occur when programs have multiple components executing at the same time If the components interact in a different order than the developer intended they could interfere with each other and stop the program from completing its tasks These bugs may be difficult to detect or anticipate since they may not occur during every execution of a program Conceptual errors are a developers misunderstanding of what the software must do The resulting software may perform according to the developers understanding but not what is really needed Other types Arithmetic edit Division by zero Arithmetic overflow or underflow Loss of arithmetic precision due to rounding or numerically unstable algorithms Logic edit Infinite loops and infinite recursion Offbyone error counting one too many or too few when looping Syntax edit Use of the wrong operator such as performing assignment instead of equality test For example in some languages x5 will set the value of x to 5 while x5 will check whether x is currently 5 or some other number Interpreted languages allow such code to fail Compiled languages can catch such errors before testing begins Resource edit Null pointer dereference Using an uninitialized variable Using an otherwise valid instruction on the wrong data type see packed decimal binary coded decimal Access violations Resource leaks where a finite system resource such as memory or file handles become exhausted by repeated allocation without release Buffer overflow in which a program tries to store data past the end of allocated storage This may or may not lead to an access violation or storage violation These are known as security bugs Excessive recursion whichthough logically validcauses stack overflow Useafterfree error where a pointer is used after the system has freed the memory it references Double free error Multithreading edit Deadlock where task A cannot continue until task B finishes but at the same time task B cannot continue until task A finishes Race condition where the computer does not perform tasks in the order the programmer intended Concurrency errors in critical sections mutual exclusions and other features of concurrent processing Timeofchecktotimeofuse TOCTOU is a form of unprotected critical section Interfacing edit Incorrect API usage 36 Incorrect protocol implementation Incorrect hardware handling Incorrect assumptions of a particular platform Incompatible systems A new API or communications protocol may seem to work when two systems use different versions but errors may occur when a function or feature implemented in one version is changed or missing in another In production systems which must run continually shutting down the entire system for a major update may not be possible such as in the telecommunication industry 37 or the internet 38 39 40 In this case smaller segments of a large system are upgraded individually to minimize disruption to a large network However some sections could be overlooked and not upgraded and cause compatibility errors which may be difficult to find and repair Incorrect code annotations 41 Teamworking edit Unpropagated updates eg programmer changes myAdd but forgets to change mySubtract which uses the same algorithm These errors are mitigated by the Dont Repeat Yourself philosophy Comments out of date or incorrect many programmers assume the comments accurately describe the code Differences between documentation and product Implications edit The amount and type of damage a software bug may cause naturally affects decisionmaking processes and policy regarding software quality In applications such as manned space travel or automotive safety since software flaws have the potential to cause human injury or even death such software will have far more scrutiny and quality control than for example an online shopping website In applications such as banking where software flaws have the potential to cause serious financial damage to a bank or its customers quality control is also more important than say a photo editing application NASAs Software Assurance Technology Center managed to reduce the number of errors to fewer than 01 per 1000 lines of code SLOC citation needed but this was not felt to be feasible for projects in the business world Wellknown bugs edit Main article List of software bugs A number of software bugs have become wellknown usually due to their severity examples include various space and military aircraft crashes Possibly the most famous bug is the Year 2000 problem also known as the Y2K bug in which it was feared that worldwide economic collapse would happen at the start of the year 2000 as a result of computers thinking it was 1900 In the end no major problems occurred The 2012 stock trading disruption involved one such incompatibility between the old API and a new API In popular culture edit In both the 1968 novel 2001 A Space Odyssey and the corresponding 1968 film 2001 A Space Odyssey a spaceships onboard computer HAL 9000 attempts to kill all its crew members In the followup 1982 novel 2010 Odyssey Two and the accompanying 1984 film 2010 it is revealed that this action was caused by the computer having been programmed with two conflicting objectives to fully disclose all its information and to keep the true purpose of the flight secret from the crew this conflict caused HAL to become paranoid and eventually homicidal In the 1999 American comedy Office Space three employees attempt to exploit their companys preoccupation with fixing the Y2K computer bug by infecting the companys computer system with a virus that sends rounded off pennies to a separate bank account The plan backfires as the virus itself has its own bug which sends large amounts of money to the account prematurely The 2004 novel The Bug by Ellen Ullman is about a programmers attempt to find an elusive bug in a database application 42 The 2008 Canadian film Control Alt Delete is about a computer programmer at the end of 1999 struggling to fix bugs at his company related to the year 2000 problem See also edit Antipattern Bug bounty program Glitch removal ISOIEC 9126 which classifies a bug as either a defect or a nonconformity Orthogonal Defect Classification Racetrack problem RISKS Digest Software defect indicator Software regression Software rot Automatic bug fixing References edit Prof Simon Rogerson The Chinook Helicopter Disaster Ccsrcsedmuacuk Archived from the original on July 17 2012 Retrieved September 24 2012 mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em Software bugs cost US economy dear June 10 2009 Archived from the original on June 10 2009 Retrieved September 24 2012 CS1 maint unfit url link Computerworld staff September 3 2011 Moth in the machine Debugging the origins of bug Computerworld Archived from the original on August 25 2015 Did You Know Edison Coined the Term Bug August 1 2013 Retrieved July 19 2019 Edison to Puskas 13 November 1878 Edison papers Edison National Laboratory US National Park Service West Orange NJ cited in Hughes Thomas Parke 1989 American Genesis A Century of Invention and Technological Enthusiasm 18701970 Penguin Books p75 ISBN 9780140097412 Baffle Ball Internet Pinball Database See image of advertisement in reference entry Modern Aircraft Carriers are Result of 20 Years of Smart Experimentation Life June 29 1942 p25 Archived from the original on June 4 2013 Retrieved November 17 2011 Dickinson Rich Louise 1942 We Took to the Woods JB Lippincott Co p93 LCCN 42024308 OCLC 405243 archived from the original on March 16 2017 FCAT NRT Test Harcourt March 18 2008 Danis Sharron Ann Rear Admiral Grace Murray Hopper eicsvtedu February 16 1997 Retrieved January 31 2010 Bug Archived March 23 2017 at the Wayback Machine The Jargon File ver 447 Retrieved June 3 2010 a b Log Book With Computer Bug Archived March 23 2017 at the Wayback Machine National Museum of American History Smithsonian Institution The First Computer Bug Naval Historical Center But note the Harvard Mark II computer was not complete until the summer of 1947 IEEE Annals of the History of Computing Vol 22 Issue 1 2000 James S Huggins First Computer Bug Jamesshugginscom Archived from the original on August 16 2000 Retrieved September 24 2012 Journal of the Royal Aeronautical Society 49 1832 1945 It ranged through the stage of type test and flight test and debugging Wilson Andi Schulman Ross Bankston Kevin Herr Trey Bugs in the System PDF Open Policy Institute Archived PDF from the original on September 21 2016 Retrieved August 22 2016 a b c d Rozens Tracy August 12 2016 Cyber reforms needed to strengthen software bug discovery and disclosure New America report Homeland Preparedness News Retrieved August 23 2016 News at SEI 1999 Archive cmuedu Archived from the original on May 26 2013 Shustek Len August 2 2016 In His Own Words Gary Kildall Remarkable People Computer History Museum Archived from the original on December 17 2016 Kildall Gary Arlen August 2 2016 1993 Kildall Scott Kildall Kristin eds Computer Connections People Places and Events in the Evolution of the Personal Computer Industry Manuscript part 1 Kildall Family 1415 Archived from the original on November 17 2016 Retrieved November 17 2016 Cite journal requires journal help a b Testing experience te the magazine for professional testers Testing Experience Germany testingexperience 42 March 2012 ISSN 18665705 subscription required Huizinga Dorota Kolawa Adam 2007 Automated Defect Prevention Best Practices in Software Management WileyIEEE Computer Society Press p426 ISBN 9780470042120 Archived from the original on April 25 2012 McDonald Marc Musson Robert Smith Ross 2007 The Practical Guide to Defect Prevention Microsoft Press p 480 ISBN 9780735622531 Release Early Release Often Archived May 14 2011 at the Wayback Machine Eric S Raymond The Cathedral and the Bazaar Wide Open Source Archived September 29 2007 at the Wayback Machine Elias Levy SecurityFocus April 17 2000 Maurice Wilkes Quotes PolySpace Technologies history christelefaurepagespersoorangefr Retrieved August 1 2019 Le Goues Claire Holtschulte Neal Smith Edward K Brun Yuriy Devanbu Premkumar Forrest Stephanie Weimer Westley 2015 The ManyBugs and IntroClass Benchmarks for Automated Repair of C Programs IEEE Transactions on Software Engineering 41 12 12361256 doi 101109TSE20152454513 ISSN 00985589 Just René Jalali Darioush Ernst Michael D 2014 Defects4J a database of existing faults to enable controlled testing studies for Java programs Proceedings of the 2014 International Symposium on Software Testing and Analysis ISSTA 2014 pp437440 CiteSeerX 10116463086 doi 10114526103842628055 ISBN 9781450326452 Sobreira Victor Durieux Thomas Madeiral Fernanda Monperrus Martin de Almeida Maia Marcelo 2018 Dissection of a bug dataset Anatomy of 395 patches from Defects4J 2018 IEEE 25th International Conference on Software Analysis Evolution and Reengineering SANER pp130140 arXiv 180106393 doi 101109SANER20188330203 ISBN 9781538649695 Madeiral Fernanda Urli Simon Maia Marcelo Monperrus Martin Maia Marcelo A 2019 BEARS An Extensible Java Bug Benchmark for Automatic Program Repair Studies 2019 IEEE 26th International Conference on Software Analysis Evolution and Reengineering SANER pp468478 arXiv 190106024 doi 101109SANER20198667991 ISBN 9781728105918 Allen Mitch MayJune 2002 Bug Tracking Basics A beginners guide to reporting and tracking defects Software Testing Quality Engineering Magazine Vol4 no3 pp2024 Retrieved December 19 2017 53 Anatomy of a Bug bugzillaorg Archived from the original on May 23 2013 The Next Generation 1996 Lexicon A to Z Slipstream Release Next Generation No15 Imagine Media March 1996 p41 Monperrus Martin Bruch Marcel Mezini Mira 2010 Detecting Missing Method Calls in ObjectOriented Software ECOOP 2010 ObjectOriented Programming Lecture Notes in Computer Science 6183 pp225 doi 10100797836421410722 ISBN 9783642141065 Kimbler K 1998 Feature Interactions in Telecommunications and Software Systems V IOS Press p8 ISBN 9789051994315 Syed Mahbubur Rahman July 1 2001 Multimedia Networking Technology Management and Applications Technology Management and Applications Idea Group Inc IGI p398 ISBN 9781591400059 Wu ChwanHwa John Irwin J David April 19 2016 Introduction to Computer Networks and Cybersecurity CRC Press p500 ISBN 9781466572140 RFC 1263 TCP Extensions Considered Harmful quote the time to distribute the new version of the protocol to all hosts can be quite long forever in fact If there is the slightest incompatibly between old and new versions chaos can result Yu Zhongxing Bai Chenggang Seinturier Lionel Monperrus Martin 2019 Characterizing the Usage Evolution and Impact of Java Annotations in Practice IEEE Transactions on Software Engineering doi 101109TSE20192910516 inactive November 12 2019 Ullman Ellen 2004 The Bug Picador ISBN 9781250002495 External links edit MediaWiki has documentation related to Bug management Common Weakness Enumeration an expert webpage focus on bugs at NISTgov BUG type of Jim Gray another Bug type Picture of the first computer bug at the Wayback Machine archived January 12 2015 The First Computer Bug an email from 1981 about Adm Hoppers bug Toward Understanding Compiler Bugs in GCC and LLVM A 2016 study of bugs in compilers