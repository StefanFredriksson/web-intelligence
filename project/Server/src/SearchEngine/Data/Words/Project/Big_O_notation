Big O notation Fit approximation Concepts Orders of approximation Scale analysis Big O notation Curve fitting False precision Significant figures Other fundamentals Approximation Generalization error Taylor polynomial Scientific modelling v t e Example of Big O notation f x O g x as there exists c 0 eg c 1 and x 0 eg x 0 5 such that f x c g x whenever x x 0 Big O notation is a mathematical notation that describes the limiting behavior of a function when the argument tends towards a particular value or infinity It is a member of a family of notations invented by Paul Bachmann 1 Edmund Landau 2 and others collectively called BachmannLandau notation or asymptotic notation In computer science big O notation is used to classify algorithms according to how their running time or space requirements grow as the input size grows 3 In analytic number theory big O notation is often used to express a bound on the difference between an arithmetical function and a better understood approximation a famous example of such a difference is the remainder term in the prime number theorem Big O notation characterizes functions according to their growth rates different functions with the same growth rate may be represented using the same O notation The letter O is used because the growth rate of a function is also referred to as the order of the function A description of a function in terms of big O notation usually only provides an upper bound on the growth rate of the function Associated with big O notation are several related notations using the symbols o Ω ω and Θ to describe other kinds of bounds on asymptotic growth rates Big O notation is also used in many other fields to provide similar estimates Contents 1 Formal definition 2 Example 3 Usage 31 Infinite asymptotics 32 Infinitesimal asymptotics 4 Properties 41 Product 42 Sum 43 Multiplication by a constant 5 Multiple variables 6 Matters of notation 61 Equals sign 62 Other arithmetic operators 621 Example 63 Multiple uses 64 Typesetting 7 Orders of common functions 8 Related asymptotic notations 81 Littleo notation 82 Big Omega notation 821 The HardyLittlewood definition 8211 Simple examples 822 The Knuth definition 83 Family of BachmannLandau notations 84 Use in computer science 85 Other notation 86 Extensions to the BachmannLandau notations 9 Generalizations and related usages 10 History BachmannLandau Hardy and Vinogradov notations 11 See also 12 References and notes 13 Further reading 14 External links Formal definition edit Let f be a real or complex valued function and g a real valued function both defined on some unbounded subset of the real positive numbers such that g x is strictly positive for all large enough values of x 4 One writes f x O g x as x displaystyle fxOgxtext as xto infty if and only if for all sufficiently large values of x the absolute value of f x is at most a positive constant multiple of g x That is f x O g x if and only if there exists a positive real number M and a real number x 0 such that f x M g x for all x x 0 displaystyle fxleq Mgxtext for all xgeq x0 In many contexts the assumption that we are interested in the growth rate as the variable x goes to infinity is left unstated and one writes more simply that f x O g x displaystyle fxOgx The notation can also be used to describe the behavior of f near some real number a often a 0 we say f x O g x as x a displaystyle fxOgxtext as xto a if and only if there exist positive numbers δ and M such that f x M g x when 0 x a δ displaystyle fxleq Mgxtext when 0xadelta As g x is chosen to be nonzero for values of x sufficiently close to a both of these definitions can be unified using the limit superior f x O g x as x a displaystyle fxOgxtext as xto a if and only if limsup x a f x g x displaystyle limsup xto aleftfrac fxgxrightinfty Example edit In typical usage the O notation is asymptotical that is it refers to very large x In this setting the contribution of the terms that grow most quickly will eventually make the other ones irrelevant As a result the following simplification rules can be applied If f x is a sum of several terms if there is one with largest growth rate it can be kept and all others omitted If f x is a product of several factors any constants terms in the product that do not depend on x can be omitted For example let f x 6 x 4 2 x 3 5 and suppose we wish to simplify this function using O notation to describe its growth rate as x approaches infinity This function is the sum of three terms 6 x 4 2 x 3 and 5 Of these three terms the one with the highest growth rate is the one with the largest exponent as a function of x namely 6 x 4 Now one may apply the second rule 6 x 4 is a product of 6 and x 4 in which the first factor does not depend on x Omitting this factor results in the simplified form x 4 Thus we say that f x is a bigoh of x 4 Mathematically we can write f x O x 4 One may confirm this calculation using the formal definition let f x 6 x 4 2 x 3 5 and g x x 4 Applying the formal definition from above the statement that f x O x 4 is equivalent to its expansion f x M x 4 displaystyle fxleq Mx4 for some suitable choice of x 0 and M and for all x x 0 To prove this let x 0 1 and M 13 Then for all x x 0 6 x 4 2 x 3 5 6 x 4 2 x 3 5 6 x 4 2 x 4 5 x 4 13 x 4 displaystyle beginaligned6x42x35leq 6x42x35leq 6x42x45x413x4endaligned so 6 x 4 2 x 3 5 13 x 4 displaystyle 6x42x35leq 13x4 Usage edit Big O notation has two main areas of application in mathematics it is commonly used to describe how closely a finite series approximates a given function especially in the case of a truncated Taylor series or asymptotic expansion in computer science it is useful in the analysis of algorithms In both applications the function g x appearing within the O is typically chosen to be as simple as possible omitting constant factors and lower order terms There are two formally close but noticeably different usages of this notation infinite asymptotics infinitesimal asymptotics This distinction is only in application and not in principle howeverthe formal definition for the big O is the same for both cases only with different limits for the function argument Infinite asymptotics edit Graphs of functions commonly used in the analysis of algorithms showing the number of operations N versus input size n for each function Big O notation is useful when analyzing algorithms for efficiency For example the time or the number of steps it takes to complete a problem of size n might be found to be T n 4 n 2 2 n 2As n grows large the n 2 term will come to dominate so that all other terms can be neglectedfor instance when n 500 the term 4 n 2 is 1000 times as large as the 2 n term Ignoring the latter would have negligible effect on the expressions value for most purposesFurther the coefficients become irrelevant if we compare to any other order of expression such as an expression containing a term n 3 or n 4 Even if T n 1000000 n 2 if U n n 3 the latter will always exceed the former once n grows larger than 1000000 T 1000000 1000000 3 U 1000000 Additionally the number of steps depends on the details of the machine model on which the algorithm runs but different types of machines typically vary by only a constant factor in the number of steps needed to execute an algorithmSo the big O notation captures what remains we write either T n O n 2 displaystyle TnOn2 or T n O n 2 displaystyle Tnin On2 and say that the algorithm has order of n 2 time complexityThe sign is not meant to express is equal to in its normal mathematical sense but rather a more colloquial is so the second expression is sometimes considered more accurate see the Equals sign discussion below while the first is considered by some as an abuse of notation 5 Infinitesimal asymptotics edit Big O can also be used to describe the error term in an approximation to a mathematical function The most significant terms are written explicitly and then the leastsignificant terms are summarized in a single big O term Consider for example the exponential series and two expressions of it that are valid when x is small e x 1 x x 2 2 x 3 3 x 4 4 for all x 1 x x 2 2 O x 3 as x 0 1 x O x 2 as x 0 displaystyle beginalignedex1xfrac x22frac x33frac x44dotsb textfor all x1xfrac x22Ox3textas xto 01xOx2textas xto 0endaligned The second expression the one with O x 3 means the absolutevalue of the error e x 1 x x 2 2 is at most some constant times x 3 when x is close enough to0 Properties edit If the function f can be written as a finite sum of other functions then the fastest growing one determines the order of f n For example f n 9 log n 5 log n 4 3 n 2 2 n 3 O n 3 as n displaystyle fn9log n5log n43n22n3On3qquad textas nto infty In particular if a function may be bounded by a polynomial in n then as n tends to infinity one may disregard lowerorder terms of the polynomialThe sets O n c and O c n are very different If c is greater than one then the latter grows much faster A function that grows faster than n c for any c is called superpolynomial One that grows more slowly than any exponential function of the form c n is called subexponential An algorithm can require time that is both superpolynomial and subexponential examples of this include the fastest known algorithms for integer factorization and the function n log n We may ignore any powers of n inside of the logarithms The set O log n is exactly the same as O log n c The logarithms differ only by a constant factor sincelog n c c log n and thus the big O notation ignores that Similarly logs with different constant bases are equivalent On the other hand exponentials with different bases are not of the same order For example 2 n and 3 n are not of the same order Changing units may or may not affect the order of the resulting algorithm Changing units is equivalent to multiplying the appropriate variable by a constant wherever it appears For example if an algorithm runs in the order of n 2 replacing n by cn means the algorithm runs in the order of c 2 n 2 and the big O notation ignores the constant c 2 This can be written as c 2 n 2 O n 2 If however an algorithm runs in the order of 2 n replacing n with cn gives 2 cn 2 c n This is not equivalent to 2 n in generalChanging variables may also affect the order of the resulting algorithm For example if an algorithms run time is O n when measured in terms of the number n of digits of an input number x then its run time is O log x when measured as a function of the input number x itself because n O log x Product edit f 1 O g 1 and f 2 O g 2 f 1 f 2 O g 1 g 2 displaystyle f1Og1text and f2Og2Rightarrow f1f2Og1g2 f O g O f g displaystyle fcdot OgOfg Sum edit f 1 O g 1 and f 2 O g 2 f 1 f 2 O max g 1 g 2 displaystyle f1Og1text and f2Og2Rightarrow f1f2Omaxg1g2 This implies f 1 O g and f 2 O g f 1 f 2 O g displaystyle f1Ogtext and f2OgRightarrow f1f2in Og which means that O g displaystyle Og is a convex cone Multiplication by a constant edit Let k be constant Then O k g O g displaystyle OkgOg if k is nonzero f O g k f O g displaystyle fOgRightarrow kfOg Multiple variables edit Big O and little o Ω etc can also be used with multiple variablesTo define big O formally for multiple variables suppose f displaystyle f and g displaystyle g are two functions defined on some subset of R n displaystyle mathbb R n We say f x is O g x as x displaystyle fvec xtext is Ogvec xtext as vec xto infty if and only if 6 M C 0 such that for all x with x i M for some i f x C g x displaystyle exists Mexists C0text such that for all vec xtext with xigeq Mtext for some ifvec xleq Cgvec x Equivalently the condition that x i M displaystyle xigeq M for some i displaystyle i can be replaced with the condition that x M displaystyle vec xinfty geq M where x displaystyle vec xinfty denotes the Chebyshev norm For example the statement f n m n 2 m 3 O n m as n m displaystyle fnmn2m3Onmtext as nmto infty asserts that there exist constants C and M such that n m M g n m C n m displaystyle forall nminfty geq Mgnmleq Cnm where g n m is defined by f n m n 2 m 3 g n m displaystyle fnmn2m3gnm This definition allows all of the coordinates of x displaystyle vec x to increase to infinity In particular the statement f n m O n m as n m displaystyle fnmOnmtext as nmto infty ie C M n m displaystyle exists Cexists Mforall nforall mdots is quite different from m f n m O n m as n displaystyle forall mcolon fnmOnmtext as nto infty ie m C M n displaystyle forall mexists Cexists Mforall ndots Under this definition the subset on which a function is defined is significant when generalizing statements from the univariate setting to the multivariate setting For example if f n m 1 displaystyle fnm1 and g n m n displaystyle gnmn then f n m O g n m displaystyle fnmOgnm if we restrict f displaystyle f and g displaystyle g to 1 2 displaystyle 1infty 2 but not if they are defined on 0 2 displaystyle 0infty 2 This is not the only generalization of big O to multivariate functions and in practice there is some inconsistency in the choice of definition 7 Matters of notation edit Equals sign edit The statement f x is O g x as defined above is usually written as f x O g x Some consider this to be an abuse of notation since the use of the equals sign could be misleading as it suggests a symmetry that this statement does not have As de Bruijn says O x O x 2 is true but O x 2 O x is not 8 Knuth describes such statements as oneway equalities since if the sides could be reversed we could deduce ridiculous things like n n 2 from the identities n O n 2 and n 2 O n 2 9 For these reasons it would be more precise to use set notation and write f x O g x thinking of O g x as the class of all functions h x such that h x C g x for some constant C 9 However the use of the equals sign is customary Knuth pointed out that mathematicians customarily use the sign as they use the word is in English Aristotle is a man but a man isnt necessarily Aristotle 10 Other arithmetic operators edit Big O notation can also be used in conjunction with other arithmetic operators in more complicated equations For example h x O f x denotes the collection of functions having the growth of h x plus a part whose growth is limited to that of f x Thus g x h x O f x displaystyle gxhxOfx expresses the same as g x h x O f x displaystyle gxhxOfx Example edit Suppose an algorithm is being developed to operate on a set of n elements Its developers are interested in finding a function T n that will express how long the algorithm will take to run in some arbitrary measurement of time in terms of the number of elements in the input set The algorithm works by first calling a subroutine to sort the elements in the set and then perform its own operations The sort has a known time complexity of O n 2 and after the subroutine runs the algorithm must take an additional 55 n 3 2 n 10 steps before it terminates Thus the overall time complexity of the algorithm can be expressed as T n 55 n 3 O n 2 Here the terms 2 n 10 are subsumed within the fastergrowing O n 2 Again this usage disregards some of the formal meaning of the symbol but it does allow one to use the big O notation as a kind of convenient placeholder Multiple uses edit In more complicated usage O can appear in different places in an equation even several times on each side For example the following are true for n displaystyle nto infty n 1 2 n 2 O n displaystyle n12n2On n O n 1 2 n O log n 2 n 3 O n 5 2 displaystyle nOn12nOlog n2n3On52 n O 1 O e n displaystyle nO1Oen The meaning of such statements is as follows for any functions which satisfy each O on the left side there are some functions satisfying each O on the right side such that substituting all these functions into the equation makes the two sides equal For example the third equation above means For any function f n O 1 there is some function g n O e n such that n f n g n In terms of the set notation above the meaning is that the class of functions represented by the left side is a subset of the class of functions represented by the right side In this use the is a formal symbol that unlike the usual use of is not a symmetric relation Thus for example n O 1 O e n does not imply the false statement O e n n O 1 Typesetting edit Big O consists of just an uppercase O Unlike Greeknamed BachmannLandau notations it needs no special symbol Yet commonly used calligraphic variants like O displaystyle mathcal O are available in LaTeX and derived typesetting systems 11 Orders of common functions edit Further information Time complexity Table of common time complexities Here is a list of classes of functions that are commonly encountered when analyzing the running time of an algorithm In each case c is a positive constant and n increases without bound The slowergrowing functions are generally listed first Notation Name Example O 1 displaystyle O1 constant Determining if a binary number is even or odd Calculating 1 n displaystyle 1n Using a constantsize lookup table O log log n displaystyle Olog log n double logarithmic Number of comparisons spent finding an item using interpolation search in a sorted array of uniformly distributed values O log n displaystyle Olog n logarithmic Finding an item in a sorted array with a binary search or a balanced search tree as well as all operations in a Binomial heap O log n c displaystyle Olog nc c 1 displaystyle scriptstyle c1 polylogarithmic Matrix chain ordering can be solved in polylogarithmic time on a parallel randomaccess machine O n c displaystyle Onc 0 c 1 displaystyle scriptstyle 0c1 fractional power Searching in a kd tree O n displaystyle On linear Finding an item in an unsorted list or in an unsorted array adding two n bit integers by ripple carry O n log n displaystyle Onlog n n logstar n Performing triangulation of a simple polygon using Seidels algorithm or the unionfind algorithm Note that log n 0 if n 1 1 log log n if n 1 displaystyle log nbegincases0textif nleq 11log log ntextif n1endcases O n log n O log n displaystyle Onlog nOlog n linearithmic loglinear quasilinear or n log n Performing a fast Fourier transform Fastest possible comparison sort heapsort and merge sort O n 2 displaystyle On2 quadratic Multiplying two n digit numbers by a simple algorithm simple sorting algorithms such as bubble sort selection sort and insertion sort worst case bound on some usually faster sorting algorithms such as quicksort Shellsort and tree sort O n c displaystyle Onc polynomial or algebraic Treeadjoining grammar parsing maximum matching for bipartite graphs finding the determinant with LU decomposition L n α c e c o 1 ln n α ln ln n 1 α displaystyle Lnalpha ceco1ln nalpha ln ln n1alpha 0 α 1 displaystyle scriptstyle 0alpha 1 Lnotation or subexponential Factoring a number using the quadratic sieve or number field sieve O c n displaystyle Ocn c 1 displaystyle scriptstyle c1 exponential Finding the exact solution to the travelling salesman problem using dynamic programming determining if two logical statements are equivalent using bruteforce search O n displaystyle On factorial Solving the travelling salesman problem via bruteforce search generating all unrestricted permutations of a poset finding the determinant with Laplace expansion enumerating all partitions of a set The statement f n O n displaystyle fnOn is sometimes weakened to f n O n n displaystyle fnOleftnnright to derive simpler formulas for asymptotic complexityFor any k 0 displaystyle k0 and c 0 displaystyle c0 O n c log n k displaystyle Onclog nk is a subset of O n c ε displaystyle Oncvarepsilon for any ε 0 displaystyle varepsilon 0 so may be considered as a polynomial with some bigger order Related asymptotic notations edit Big O is the most commonly used asymptotic notation for comparing functions citation needed Together with some other related notations it forms the family of BachmannLandau notations Littleo notation edit Little o redirects here For the baseball player see Omar Vizquel Intuitively the assertion f x is o g x read f x is littleo of g x means that g x grows much faster than f x Let as before f be a real or complex valued function and g a real valued function both defined on some unbounded subset of the real positive numbers such that gx is strictly positive for all large enough values of x One writes f x o g x as x displaystyle fxogxtext as xto infty if for every positive constant ε there exists a constant N such that f x ε g x for all x N displaystyle fxleq varepsilon gxqquad text for all xgeq N 12 For example one has 2 x o x 2 displaystyle 2xox2 and 1 x o 1 displaystyle 1xo1 The difference between the earlier definition for the bigO notation and the present definition of littleo is that while the former has to be true for at least one constant M the latter must hold for every positive constant ε however small 13 In this way littleo notation makes a stronger statement than the corresponding bigO notation every function that is littleo of g is also bigO of g but not every function that is bigO of g is also littleo of g For example 2 x 2 O x 2 displaystyle 2x2Ox2 but 2 x 2 o x 2 displaystyle 2x2neq ox2 As g x is nonzero or at least becomes nonzero beyond a certain point the relation f x o g x is equivalent to lim x f x g x 0 displaystyle lim xto infty frac fxgx0 and this is in fact how Landau 12 originally defined the littleo notation Littleo respects a number of arithmetic operations For example if c is a nonzero constant and f o g displaystyle fog then c f o g displaystyle ccdot fog and if f o F displaystyle foF and g o G displaystyle goG then f g o F G displaystyle fcdot goFcdot G It also satisfies a transitivity relation if f o g displaystyle fog and g o h displaystyle goh then f o h displaystyle foh Big Omega notation edit There are two very widespread and incompatible definitions of the statement f x Ω g x x a displaystyle fxOmega gx xrightarrow a where a is some real number or where f and g are real functions defined in a neighbourhood of a and where g is positive in this neighbourhood The first one chronologically is used in analytic number theory and the other one in computational complexity theory When the two subjects meet this situation is bound to generate confusion The HardyLittlewood definition edit In 1914 Godfrey Harold Hardy and John Edensor Littlewood introduced the new symbol Ω displaystyle Omega 14 which is defined as follows f x Ω g x x limsup x f x g x 0 displaystyle fxOmega gx xrightarrow infty Leftrightarrow limsup xto infty leftfrac fxgxright0 Thus f x Ω g x displaystyle fxOmega gx is the negation of f x o g x displaystyle fxogx In 1916 the same authors introduced the two new symbols Ω R displaystyle Omega R and Ω L displaystyle Omega L defined as 15 f x Ω R g x x limsup x f x g x 0 displaystyle fxOmega Rgx xrightarrow infty Leftrightarrow limsup xto infty frac fxgx0 f x Ω L g x x liminf x f x g x 0 displaystyle fxOmega Lgx xrightarrow infty Leftrightarrow liminf xto infty frac fxgx0 These symbols were used by Edmund Landau with the same meanings in 1924 16 After Landau the notations were never used again exactly thus Ω R displaystyle Omega R became Ω displaystyle Omega and Ω L displaystyle Omega L became Ω displaystyle Omega citation needed These three symbols Ω Ω Ω displaystyle Omega Omega Omega as well as f x Ω g x displaystyle fxOmega pm gx meaning that f x Ω g x displaystyle fxOmega gx and f x Ω g x displaystyle fxOmega gx are both satisfied are now currently used in analytic number theory 17 18 Simple examples edit We have sin x Ω 1 x displaystyle sin xOmega 1 xrightarrow infty and more precisely sin x Ω 1 x displaystyle sin xOmega pm 1 xrightarrow infty We have sin x 1 Ω 1 x displaystyle sin x1Omega 1 xrightarrow infty and more precisely sin x 1 Ω 1 x displaystyle sin x1Omega 1 xrightarrow infty however sin x 1 Ω 1 x displaystyle sin x1not Omega 1 xrightarrow infty The Knuth definition edit In 1976 Donald Knuth published a paper to justify his use of the Ω displaystyle Omega symbol to describe a stronger property Knuth wrote For all the applications I have seen so far in computer science a stronger requirement is much more appropriate He defined f x Ω g x g x O f x displaystyle fxOmega gxLeftrightarrow gxOfx with the comment Although I have changed Hardy and Littlewoods definition of Ω displaystyle Omega I feel justified in doing so because their definition is by no means in wide use and because there are other ways to say what they want to say in the comparatively rare cases when their definition applies 19 Family of BachmannLandau notations edit Notation Name 19 Description Formal Definition Limit Definition 20 21 22 19 14 f n o g n displaystyle fnogn Small O Small Oh f is dominated by g asymptotically k 0 n 0 n n 0 f n k g n displaystyle forall k0exists n0forall nn0fnkcdot gn lim n f n g n 0 displaystyle lim nto infty frac fngn0 f n O g n displaystyle fnOgn Big O Big Oh Big Omicron f displaystyle f is bounded above by g up to constant factor asymptotically k 0 n 0 n n 0 f n k g n displaystyle exists k0exists n0forall nn0fnleq kcdot gn limsup n f n g n displaystyle limsup nto infty frac leftfnrightgninfty f n Θ g n displaystyle fnTheta gn Big Theta f is bounded both above and below by g asymptotically k 1 0 k 2 0 n 0 n n 0 displaystyle exists k10exists k20exists n0forall nn0 k 1 g n f n k 2 g n displaystyle k1cdot gnleq fnleq k2cdot gn f n O g n displaystyle fnOgn and f n Ω g n displaystyle fnOmega gn Knuth version f n g n displaystyle fnsim gn On the order of f is equal to g asymptotically ε 0 n 0 n n 0 f n g n 1 ε displaystyle forall varepsilon 0exists n0forall nn0leftfn over gn1rightvarepsilon lim n f n g n 1 displaystyle lim nto infty fn over gn1 f n Ω g n displaystyle fnOmega gn Big Omega in number theory HardyLittlewood f displaystyle f is not dominated by g asymptotically k 0 n 0 n n 0 f n k g n displaystyle exists k0forall n0exists nn0fngeq kcdot gn limsup n f n g n 0 displaystyle limsup nto infty leftfrac fngnright0 f n Ω g n displaystyle fnOmega gn Big Omega in complexity theory Knuth f is bounded below by g asymptotically k 0 n 0 n n 0 f n k g n displaystyle exists k0exists n0forall nn0fngeq kcdot gn liminf n f n g n 0 displaystyle liminf nto infty frac fngn0 f n ω g n displaystyle fnomega gn Small Omega f dominates g asymptotically k 0 n 0 n n 0 f n k g n displaystyle forall k0exists n0forall nn0 fnkcdot gn lim n f n g n displaystyle lim nto infty leftfrac fngnrightinfty The limit definitions assume g n 0 displaystyle gnneq 0 for sufficiently large n The table is partly sorted from smallest to largest in the sense that o O Θ Knuths version of Ω ω on functions correspond to on the real line 22 the HardyLittlewood version of Ω however doesnt correspond to any such description Computer science uses the big O big Theta Θ little o little omega ω and Knuths big Omega Ω notations 23 Analytic number theory often uses the big O small o HardyLittlewoods big Omega Ω with or without the or subscripts and displaystyle sim notations 17 The small omega ω notation is not used as often in analysis 24 Use in computer science edit Further information Analysis of algorithms Informally especially in computer science the big O notation often can be used somewhat differently to describe an asymptotic tight bound where using big Theta Θ notation might be more factually appropriate in a given context citation needed For example when considering a function T n 73 n 3 22 n 2 58 all of the following are generally acceptable but tighter bounds such as numbers 2 and 3 below are usually strongly preferred over looser bounds such as number 1 below T n O n 100 T n O n 3 T n Θ n 3 The equivalent English statements are respectively T n grows asymptotically no faster than n 100 T n grows asymptotically no faster than n 3 T n grows asymptotically as fast as n 3 So while all three statements are true progressively more information is contained in each In some fields however the big O notation number 2 in the lists above would be used more commonly than the big Theta notation bullets number 3 in the lists above For example if T n represents the running time of a newly developed algorithm for input size n the inventors and users of the algorithm might be more inclined to put an upper asymptotic bound on how long it will take to run without making an explicit statement about the lower asymptotic bound Other notation edit In their book Introduction to Algorithms Cormen Leiserson Rivest and Stein consider the set of functions f which satisfy f n O g n n displaystyle fnOgn nrightarrow infty In a correct notation this set can for instance be called O g where O g f displaystyle Ogf there exist positive constants c and n 0 displaystyle n0 such that 0 f n c g n displaystyle 0leq fnleq cgn for all n n 0 displaystyle ngeq n0 25 The authors state that the use of equality operator to denote set membership rather than the set membership operator is an abuse of notation but that doing so has advantages 5 Inside an equation or inequality the use of asymptotic notation stands for an anonymous function in the set O g which eliminates lowerorder terms and helps to reduce inessential clutter in equations for example 26 2 n 2 3 n 1 2 n 2 O n displaystyle 2n23n12n2On Extensions to the BachmannLandau notations edit Another notation sometimes used in computer science is Õ read softO f n Õ g n is shorthandfor f n O g n log k g n for some k Essentially it is big O notation ignoring logarithmic factors because the growthrate effects of some other superlogarithmic function indicate a growthrate explosion for largesized input parameters that is more important to predicting bad runtime performance than the finerpoint effects contributed by the logarithmicgrowth factors This notation is often used to obviate the nitpicking within growthrates that are stated as too tightly bounded for the matters at hand since log k n is always o n ε for any constant k and any ε0 Also the L notation defined as L n α c e c o 1 ln n α ln ln n 1 α displaystyle Lnalpha ceco1ln nalpha ln ln n1alpha is convenient for functions that are between polynomial and exponential in terms of ln n displaystyle ln n Generalizations and related usages edit The generalization to functions taking values in any normed vector space is straightforward replacing absolute values by norms where f and g need not take their values in the same space A generalization to functions g taking values in any topological group is also possible citation needed The limiting process x x o can also be generalized by introducing an arbitrary filter base ie to directed nets f and g The o notation can be used to define derivatives and differentiability in quite general spaces and also asymptotical equivalence of functions f g f g o g displaystyle fsim giff fgin og which is an equivalence relation and a more restrictive notion than the relationship f is Θ g from above It reduces to lim f g 1 if f and g are positive real valued functions For example 2 x is Θ x but 2 x x is not o x History BachmannLandau Hardy and Vinogradov notations edit The symbol O was first introduced by number theorist Paul Bachmann in 1894 in the second volume of his book Analytische Zahlentheorie analytic number theory 1 The number theorist Edmund Landau adopted it and was thus inspired to introduce in 1909 the notation o 2 hence both are now called Landau symbols These notations were used in applied mathematics during the 1950s for asymptotic analysis 27 The symbol Ω displaystyle Omega in the sense is not an o of was introduced in 1914 by Hardy and Littlewood 14 Hardy and Littlewood also introduced in 1918 the symbols Ω R displaystyle Omega R right and Ω L displaystyle Omega L left 15 precursors of the modern symbols Ω displaystyle Omega is not smaller than a small o of and Ω displaystyle Omega is not larger than a small o of Thus the Omega symbols with their original meanings are sometimes also referred to as Landau symbols This notation Ω displaystyle Omega became commonly used in number theory at least since the 1950s 28 In the 1970s the big O was popularized in computer science by Donald Knuth who introduced the related Theta notation and proposed a different definition for the Omega notation 19 Landau never used the big Theta and small omega symbols Hardys symbols were in terms of the modern O notation f g f O g displaystyle fpreccurlyeq giff fin Og and f g f o g displaystyle fprec giff fin og Hardy however never defined or used the notation displaystyle prec prec nor displaystyle ll as it has been sometimes reportedHardy introduced the symbols displaystyle preccurlyeq and displaystyle prec as well as some other symbols in his 1910 tract Orders of Infinity and made use of them only in three papers 19101913 In his nearly 400 remaining papers and books he consistently used the Landau symbols O and o Hardys notation is not used anymore On the other hand in the 1930s 29 the Russian number theorist Ivan Matveyevich Vinogradov introduced his notation displaystyle ll which has been increasingly used in number theory instead of the O displaystyle O notation We have f g f O g displaystyle fll giff fin Og and frequently both notations are used in the same paper The bigO originally stands for order of Ordnung Bachmann 1894 and is thus a Latin letter Neither Bachmann nor Landau ever call it Omicron The symbol was much later on 1976 viewed by Knuth as a capital omicron 19 probably in reference to his definition of the symbol Omega The digit zero should not be used See also edit Asymptotic expansion Approximation of functions generalizing Taylors formula Asymptotically optimal algorithm A phrase frequently used to describe an algorithm that has an upper bound asymptotically within a constant of a lower bound for the problem Big O in probability notation O p o p Limit superior and limit inferior An explanation of some of the limit notation used in this article Nachbins theorem A precise method of bounding complex analytic functions so that the domain of convergence of integral transforms can be stated Orders of approximation Computational complexity of mathematical operations References and notes edit a b Bachmann Paul 1894 Analytische Zahlentheorie Analytic Number Theory in German 2 Leipzig Teubner mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em a b Landau Edmund 1909 Handbuch der Lehre von der Verteilung der Primzahlen Handbook on the theory of the distribution of the primes in German Leipzig B G Teubner p883 Mohr Austin Quantum Computing in Complexity Theory and Theory of Computation PDF p2 Retrieved 7 June 2014 Landau Edmund 1909 Handbuch der Lehre von der Verteilung der Primzahlen Handbook on the theory of the distribution of the primes in German Leipzig B G Teubner p31 a b Thomas H Cormen Charles E Leiserson Ronald L Rivest 2009 Introduction to Algorithms 3rd ed CambridgeMA MIT Press p45 ISBN 9780262533058 Because θ g n is a set we could write f n θ g n to indicate that f n is a member of θ g n Instead we will usually write f n θ g n to express the same notion You might be confused because we abuse equality in this way but we shall see later in this section that doing so has its advantages Cormen Thomas Leiserson Charles Rivest Ronald Stein Clifford 2009 Introduction to Algorithms Third ed MIT p53 Howell Rodney On Asymptotic Notation with Multiple Variables PDF Retrieved 20150423 N G de Bruijn 1958 Asymptotic Methods in Analysis Amsterdam NorthHolland pp57 ISBN 9780486642215 a b Graham Ronald Knuth Donald Patashnik Oren 1994 Concrete Mathematics 2 ed Reading Massachusetts AddisonWesley p446 ISBN 9780201558029 Donald Knuth JuneJuly 1998 Teach Calculus with Big O PDF Notices of the American Mathematical Society 45 6 687 Unabridged version Tom 24 June 2014 Big O and related notations in LaTeX texblog a b Landau Edmund 1909 Handbuch der Lehre von der Verteilung der Primzahlen Handbook on the theory of the distribution of the primes in German Leipzig B G Teubner p61 Thomas H Cormen et al 2001 Introduction to Algorithms Second Edition pageneeded a b c Hardy G H Littlewood J E 1914 Some problems of diophantine approximation Part II The trigonometrical series associated with the elliptic ϑfunctions Acta Mathematica 37 225 doi 101007BF02401834 a b G H Hardy and J E Littlewood Contribution to the theory of the Riemann zetafunction and the theory of the distribution of primes Acta Mathematica vol 41 1916 E Landau Über die Anzahl der Gitterpunkte in gewissen Bereichen IV Nachr Gesell Wiss Gött Mathphys Kl 1924 137150 a b Aleksandar Ivić The Riemann zetafunction chapter 9 John Wiley Sons 1985 Gérald Tenenbaum Introduction to analytic and probabilistic number theory Chapter I5 American Mathematical Society Providence RI 2015 a b c d e Donald Knuth Big Omicron and big Omega and big Theta SIGACT News AprJune 1976 1824 Balcázar José L Gabarró Joaquim Nonuniform complexity classes specified by lower and upper bounds PDF RAIRO Theoretical Informatics and Applications Informatique Théorique et Applications 23 2 180 ISSN 09883754 Retrieved 14 March 2017 Cucker Felipe Bürgisser Peter 2013 A1 Big Oh Little Oh and Other Comparisons Condition The Geometry of Numerical Algorithms Berlin Heidelberg Springer pp467468 doi 1010079783642388965 ISBN 9783642388965 a b Vitányi Paul Meertens Lambert April 1985 Big Omega versus the wild functions PDF ACM SIGACT News 16 4 5659 CiteSeerX 10116943072 doi 101145382242382835 Cormen Thomas H Leiserson Charles E Rivest Ronald L Stein Clifford 2001 1990 Introduction to Algorithms 2nd ed MIT Press and McGrawHill pp4150 ISBN 0262032937 for example it is omitted in Hildebrand AJ Asymptotic Notations PDF Asymptotic Methods in Analysis Math 595 Fall 2009 Retrieved 14 March 2017 Thomas H Cormen Charles E Leiserson Ronald L Rivest 2009 Introduction to Algorithms 3rd ed CambridgeMA MIT Press p47 ISBN 9780262533058 When we have only an asymptotic upper bound we use Onotation For a given function g n we denote by O g n pronounced bigoh of g of n or sometimes just oh of g of n the set of functions O g n f n there exist positive constants c and n 0 such that 0 f n cg n for all n n 0 Thomas H Cormen Charles E Leiserson Ronald L Rivest 2009 Introduction to Algorithms 3rd ed CambridgeMA MIT Press p49 ISBN 9780262533058 When the asymptotic notation stands alone that is not within a larger formula on the righthand side of an equation or inequality as in n On we have already defined the equal sign to mean set membership n On In general however when asymptotic notation appears in a formula we interpret it as standing for some anonymous function that we do not care to name For example the formula 2 n 2 3 n 1 2 n 2 θ n means that 2 n 2 3 n 1 2 n 2 f n where f n is some function in the set θ n In this case we let f n 3 n 1 which is indeed in θ n Using asymptotic notation in this manner can help eliminate inessential detail and clutter in an equation Erdelyi A 1956 Asymptotic Expansions ISBN 9780486603186 E C Titchmarsh The Theory of the Riemann ZetaFunction Oxford Clarendon Press 1951 See for instance A new estimate for G n in Warings problem Russian Doklady Akademii Nauk SSSR 5 No 56 1934 249253 Translated in English in Selected works Ivan Matveevič Vinogradov prepared by the Steklov Mathematical Institute of the Academy of Sciences of the USSR on the occasion of his 90th birthday SpringerVerlag 1985 Further reading edit Hardy G H 1910 Orders of Infinity The Infinitärcalcül of Paul du BoisReymond Cambridge University Press Knuth Donald 1997 1211 Asymptotic Representations Fundamental Algorithms The Art of Computer Programming 1 3rd ed AddisonWesley ISBN 9780201896831 Cormen Thomas H Leiserson Charles E Rivest Ronald L Stein Clifford 2001 31 Asymptotic notation Introduction to Algorithms 2nd ed MIT Press and McGrawHill ISBN 9780262032933 Sipser Michael 1997 Introduction to the Theory of Computation PWS Publishing pp226228 ISBN 9780534947286 Avigad Jeremy Donnelly Kevin 2004 Formalizing O notation in IsabelleHOL PDF International Joint Conference on Automated Reasoning doi 101007978354025984827 Black Paul E 11 March 2005 Black Paul E ed bigO notation Dictionary of Algorithms and Data Structures US National Institute of Standards and Technology Retrieved December 16 2006 Black Paul E 17 December 2004 Black Paul E ed littleo notation Dictionary of Algorithms and Data Structures US National Institute of Standards and Technology Retrieved December 16 2006 Black Paul E 17 December 2004 Black Paul E ed Ω Dictionary of Algorithms and Data Structures US National Institute of Standards and Technology Retrieved December 16 2006 Black Paul E 17 December 2004 Black Paul E ed ω Dictionary of Algorithms and Data Structures US National Institute of Standards and Technology Retrieved December 16 2006 Black Paul E 17 December 2004 Black Paul E ed Θ Dictionary of Algorithms and Data Structures US National Institute of Standards and Technology Retrieved December 16 2006 External links edit The Wikibook Data Structures has a page on the topic of BigO Notation Growth of sequences OEIS Online Encyclopedia of Integer Sequences Wiki Introduction to Asymptotic Notations Landau Symbols BigO Notation What is it good for Big O Notation explained in plain english An example of Big O in accuracy of central divided difference scheme for first derivative A Gentle Introduction to Algorithm Complexity Analysis