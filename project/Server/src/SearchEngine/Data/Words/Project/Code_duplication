Duplicate code Duplicate code is a computer programming term for a sequence of source code that occurs more than once either within a program or across different programs owned or maintained by the same entity Duplicate code is generally considered undesirable for a number of reasons 1 A minimum requirement is usually applied to the quantity of code that must appear in a sequence for it to be considered duplicate rather than coincidentally similar Sequences of duplicate code are sometimes known as code clones or just clones the automated process of finding duplications in source code is called clone detection Two code sequences may be duplicates of each other without being characterforcharacter identical for example by being characterforcharacter identical only when white space characters and comments are ignored or by being tokenfortoken identical or tokenfortoken identical with occasional variation Even code sequences that are only functionally identical may be considered duplicate code Contents 1 Emergence 2 Fixing 3 Costs and benefits 4 Detecting duplicate code 5 Example of functionally duplicate code 6 See also 7 References 8 External links Emergence edit Some of the ways in which duplicate code may be created are copy and paste programming which in academic settings may be done as part of plagiarism scrounging in which a section of code is copied because it works In most cases this operation involves slight modifications in the cloned code such as renaming variables or insertingdeleting code The language nearly always allows one to call one copy of the code from different places so that it can serve multiple purposes but instead the programmer creates another copy perhaps because they do not understand the language properly do not have the time to do it properly or do not care about the increased active software rot It may also happen that functionality is required that is very similar to that in another part of a program and a developer independently writes code that is very similar to what exists elsewhere Studies suggest that such independently rewritten code is typically not syntactically similar 2 Automatically generated code where having duplicate code may be desired to increase speed or ease of development is another reason for duplication Note that the actual generator will not contain duplicates in its source code only the output it produces Fixing edit Duplicate code is most commonly fixed by moving the code into its own unit function or module and calling that unit from all of the places where it was originally used Using a more opensource style of development in which components are in centralized locations may also help with duplication Costs and benefits edit Code which includes duplicate functionality is more difficult to support simply because it is longer and because if it needs updating there is a danger that one copy of the code will be updated without further checking for the presence of other instances of the same code On the other hand if one copy of the code is being used for different purposes and it is not properly documented there is a danger that it will be updated for one purpose but this update will not be required or appropriate to its other purposes These considerations are not relevant for automatically generated code if there is just one copy of the functionality in the source code In the past when memory space was more limited duplicate code had the additional disadvantage of taking up more space but nowadays this is unlikely to be an issue When code with a software vulnerability is copied the vulnerability may continue to exist in the copied code if the developer is not aware of such copies 3 Refactoring duplicate code can improve many software metrics such as lines of code cyclomatic complexity and coupling This may lead to shorter compilation times lower cognitive load less human error and fewer forgotten or overlooked pieces of code However not all code duplication can be refactored 4 Clones may be the most effective solution if the programming language provides inadequate or overly complex abstractions particularly if supported with user interface techniques such as simultaneous editing Furthermore the risks of breaking code when refactoring may outweigh any maintenance benefits 5 A study by Wagner Abdulkhaleq and Kaya concluded that while additional work must be done to keep duplicates in sync if the programmers involved are aware of the duplicate code there werent significantly more faults caused than in unduplicated code 6 disputed discuss Detecting duplicate code edit A number of different algorithms have been proposed to detect duplicate code For example Baker s algorithm 7 RabinKarp string search algorithm Using Abstract Syntax Trees 8 Visual clone detection 9 Count Matrix Clone Detection 10 11 Localitysensitive hashing Antiunification 12 Example of functionally duplicate code edit Consider the following code snippet for calculating the average of an array of integers extern int arraya extern int arrayb int suma 0 for int i 0 i 4 i suma arraya i int averagea suma 4 int sumb 0 for int i 0 i 4 i sumb arrayb i int averageb sumb 4 The two loops can be rewritten as the single function int calcaverageoffour int array int sum 0 for int i 0 i 4 i sum array i return sum 4 or usually preferably by parameterising the number of elements in the array Using the above function will give source code that has no loop duplication extern int array1 extern int array2 int average1 calcaverageoffour array1 int average2 calcaverageoffour array2 Note that in this trivial case the compiler may choose to inline both calls to the function such that the resulting machine code is identical for both the duplicated and nonduplicated examples above If the function is not inlined then the additional overhead of the function calls will probably take longer to run on the order of 10 processor instructions for most highperformance languages Theoretically this additional time to run could matter Example of duplicate code fix via code replaced by the method See also edit Abstraction principle programming Antipattern Data deduplication Dont repeat yourself List of tools for static code analysis Redundant code Rule of three computer programming References edit Spinellis Diomidis The Bad Code Spotters Guide InformITcom Retrieved 20080606 mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em Code similarities beyond copy paste by Elmar Juergens Florian Deissenboeck Benjamin Hummel Li Hongzhe Kwon Hyuckmin Kwon Jonghoon Lee Heejo 25 April 2016 CLORIFI software vulnerability discovery using code clone verification Concurrency and Computation Practice and Experience 28 6 19001917 doi 101002cpe3532 Arcelli Fontana Francesca Zanoni Marco Ranchetti Andrea Ranchetti Davide 2013 Software Clone Detection and Refactoring PDF ISRN Software Engineering 2013 18 doi 1011552013129437 Kapser C Godfrey MW Cloning Considered Harmful Considered Harmful 13th Working Conference on Reverse Engineering WCRE pp 1928 Oct 2006 Wagner Stefan Abdulkhaleq Asim Kaya Kamer Paar Alexander 2016 On the relationship of inconsistent software clones and faults an empirical study Proc 23rd IEEE International Conference on Software Analysis Evolution and Reengineering SANER 2016 Brenda S Baker A Program for Identifying Duplicated Code Computing Science and Statistics244957 1992 Ira D Baxter et al Clone Detection Using Abstract Syntax Trees Visual Detection of Duplicated Code Archived 20060629 at the Wayback Machine by Matthias Rieger Stephane Ducasse Yuan Y and Guo Y CMCD Count Matrix Based Code Clone Detection in 2011 18th AsiaPacific Software Engineering Conference IEEE Dec 2011 pp 250257 Chen X Wang A Y Tempero E D 2014 A Replication and Reproduction of Code Clone Detection Studies In ACSC pp 105114 Bulychev Peter and Marius Minea Duplicate code detection using antiunification Proceedings of the SpringSummer Young Researchers Colloquium on Software Engineering No 2 Федеральное государственное бюджетное учреждение науки Институт системного программирования Российской академии наук 2008 External links edit The University of Alabama at Birmingham Code Clones Literature Finding duplicate code in C VBNet ASPX Ruby Python Java C C ActionScript or XAML