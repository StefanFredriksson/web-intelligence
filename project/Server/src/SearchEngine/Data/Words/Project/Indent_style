Indentation style This article needs additional citations for verification Please help improve this article by adding citations to reliable sources Unsourced material may be challenged and removed Find sources Indentation style news newspapers books scholar JSTOR February 2015 Learn how and when to remove this template message In computer programming an indentation style is a convention governing the indentation of blocks of code to convey program structure This article largely addresses the freeform languages such as C and its descendants but can be and often is applied to most other programming languages especially those in the curly bracket family where whitespace is otherwise insignificant Indentation style is only one aspect of programming style Indentation is not a requirement of most programming languages where it is used as secondary notation Rather indenting helps better convey the structure of a program to human readers Especially it is used to clarify the link between control flow constructs such as conditions or loops and code contained within and outside of them However some languages such as Python and occam use indentation to determine the structure instead of using braces or keywords this is termed the offside rule In such languages indentation is meaningful to the compiler or interpreter it is more than only a clarity or style issue This article uses brackets to refer to what are termed parentheses in American English and braces to refer to what are termed curly brackets in American English Contents 1 Brace placement in compound statements 2 Tabs spaces and size of indentations 3 Tools 4 Styles 41 KR style 411 Variant 1TBS OTBS 412 Variant Linux kernel 413 Variant mandatory braces 414 Variant Java 415 Variant Stroustrup 416 Variant BSD KNF 42 Allman style 421 Variant Allman8 43 Whitesmiths style 44 GNU style 45 Horstmann style 46 Pico style 47 Ratliff style 48 Lisp style 49 Haskell style 5 Other considerations 51 Losing track of blocks 52 Statement insertion 6 See also 7 References 8 External links Brace placement in compound statements edit The main difference between indentation styles lies in the placing of the braces of the compound statement that often follows a control statement if while for The table below shows this placement for the style of statements discussed in this article function declaration style is another case The style for brace placement in statements may differ from the style for brace placement of a function definition For consistency the indentation depth has been kept constant at 4 spaces regardless of the preferred indentation depth of each style Brace placement Styles while x y something somethingelse KR and variants 1TBS Stroustrup Linux kernel BSD KNF while x y something somethingelse Allman while x y something somethingelse GNU while x y something somethingelse Whitesmiths while x y something somethingelse Horstmann while x y something somethingelse Pico while x y something somethingelse Ratliff while x y something somethingelse Lisp while x y something somethingelse Haskell Tabs spaces and size of indentations edit Many early programs used tab characters to indent for simplicity and to save on source file size Unix editors generally view tabs as equaling eight characters while Macintosh and Windows environments would set them to four creating confusion when code was transferred between environments Modern programming editors can now often set arbitrary indentation sizes and will insert the proper mix of tabs and spaces The issue of using hard tabs or spaces is an ongoing debate in the programming community Some programmers such as Jamie Zawinski state that spaces instead of tabs increase crossplatform portability 1 Others such as the writers of the WordPress coding standards state the opposite that hard tabs increase portability 2 A survey of the top 400000 repositories on GitHub found that spaces are more common 3 The size of the indentation is usually independent of the style In an experiment from 1983 performed on PASCAL code a significant influence of indentation size on comprehensibility was found The results indicate that indentation levels in the range from 2 to 4 characters ensure best comprehensibility 4 For Ruby many shell scripting languages and some forms of HTML formatting two spaces per indentation level is generally used citation needed Tools edit There are many computer programs that automatically correct indentation styles according to the preferences of the program author and the length of indents associated with tabs A famous one is indent a program included with many Unixlike operating systems In Emacs various commands are available to automatically fix indentation problems including hitting Tab on a given line in the default configuration Mx indentregion can be used to properly indent large sections of code Depending on the mode Emacs can also replace leading indentation spaces with the proper number of tabs followed by spaces which results in the minimal number of characters for indenting each source line Elastic tabstops is a tabulation style which requires support from the text editor where entire blocks of text are kept automatically aligned when the length of one line in the block changes Styles edit KR style edit The KR style which is also called the one true brace style in hacker jargon 5 6 abbreviated as 1TBS 7 is commonly used in C C and other curly brace programming languages It was the style used in the original Unix kernel Kernighan and Ritchies book The C Programming Language as well as Kernighan and Plauger s book The Elements of Programming Style When following KR each function has its opening brace at the next line on the same indentation level as its header the statements within the braces are indented and the closing brace at the end is on the same indentation level as the header of the function at a line of its own The blocks inside a function however have their opening braces at the same line as their respective control statements closing braces remain in a line of their own unless followed by a keyword else or while Such non aligned braces are nicknamed Egyptian braces or Egyptian brackets for their resemblance to arms in some fanciful poses of ancient Egyptians 8 9 10 int main int argc char argv while x y something somethingelse if someerror docorrect else continueasusual finalthing The C Programming Language does not explicitly specify this style though it is followed consistently throughout the book From the book The position of braces is less important although people hold passionate beliefs We have chosen one of several popular styles Pick a style that suits you then use it consistently In old versions of the C language argument types needed to be declared on the subsequent line ie just after the header of the function Original preISO C style without function prototypes int main argc argv int argc char argv Variant 1TBS OTBS edit Advocates of this style sometimes refer to it as the one true brace style abbreviated as 1TBS or OTBS 11 The main two differences from the KR style are that functions have their opening braces on the same line separated by a space and that the braces are not omitted for a control statement with only a single statement in its scope 12 In this style the constructs that allow insertions of new code lines are on separate lines and constructs that prohibit insertions are on one line This principle is amplified by bracing every if else while etc including singleline conditionals so that insertion of a new line of code anywhere is always safe ie such an insertion will not make the flow of execution disagree with the source code indenting Suggested advantages of this style are that the starting brace needs no extra line alone and the ending brace lines up with the statement it conceptually belongs to One cost of this style is that the ending brace of a block needs a full line alone which can be partly resolved in ifelse blocks and dowhile blocks void checknegative x if x 0 puts Negative else nonnegative x There are many mentions of The One True Brace Style out there but there is some confusion as to its true form Some sources say it is the variation specified above8 while others note it as just another hacker jargon term for KR 1 Variant Linux kernel edit A minor variant of the KR style is the linux kernel style which is known for its extensive use in the source tree of the Linux kernel 13 Linus Torvalds strongly advises all contributors to follow it The style borrows many elements from KR The kernel style uses tab stops with the tab stops set every 8 characters for indentation Opening curly braces of a function go to the start of the line following the function header Any other opening curly braces go on the same line as the corresponding statement separated by a space Labels in a switch statement are aligned with the enclosing block there is only one level of indents A singlestatement body of a compound statement such as if while and dowhile need not be surrounded by curly braces If however one or more of the substatements in an ifelse statement require braces then both substatements should be wrapped inside curly braces Line length is limited to 80 characters The Linuxkernel style specifies that if only one branch of a conditional statement is a single statement use braces in both branches int power int x int y int result if y 0 result 0 else result 1 while y 0 result x return result Variant mandatory braces edit Some advocate mandatory braces for control statements with only a single statement in its scope ie bracing every if else while etc including singleline conditionals so that insertion of a new line of code anywhere is always safe ie such an insertion will not make the flow of execution disagree with the sourcecode indentation The cost of this style is that one extra full line is needed for the last block except for intermediate blocks in ifelse ifelse constructs and dowhile blocks Variant Java edit While Java is sometimes written in other styles a significant body of Java code uses a minor variant of the KR style in which the opening brace is on the same line not only for the blocks inside a function but also for class or method declarationsThis style is widespread largely because Sun Microsystems s original style guides 14 15 16 used this KR variant and as a result most of the standard source code for the Java API is written in this style It is also a popular indentation style for ActionScript and JavaScript along with the Allman style Variant Stroustrup edit Stroustrup style is Bjarne Stroustrup s adaptation of KR style for C as used in his books such as Programming Principles and Practice using C and The C Programming Language 17 Unlike the variants above Stroustrup does not use a cuddled else Thus Stroustrup would write 17 if x 0 puts Negative negative x else puts Nonnegative nonnegative x Stroustrup extends KR style for classes writing them as follows class Vector public Vector int s elem new double s sz s construct a Vector double operator int i return elem i element access subscripting int size return sz private double elem pointer to the elements int sz number of elements Stroustrup does not indent the labels public and private Also in this style while the opening brace of a function starts on a new line the opening brace of a class is on the same line as the class name Stroustrup allows writing short functions all on one line Stroustrup style is a named indentation style available in the editor Emacs Stroustrup encourages a KRderived style layout with C as stated in his modern C Core Guidelines 18 Variant BSD KNF edit Also termed Kernel Normal Form this is the form of most of the code used in the Berkeley Software Distribution BSD operating systems Although mostly intended for kernel code it is also widely used in userland code It is essentially a thoroughlydocumented variant of KR style as used in the Bell Labs Version 6 7 Unix source code 19 The SunOS kernel and userland uses a similar indentation style 19 Like KNF this also was based on ATT style documents and that is sometimes termed Bill Joy Normal Form 20 The SunOS guideline was published in 1996 ANSI C is discussed briefly The correctness of the indentation of a list of source files can be verified by the cstyle program written by Bill Shannon 19 20 21 In this style the hard tabulator ts in vi is kept at eight columns while a soft tabulator is often defined as a helper also sw in vi and set at four The hard tabulators are used to indent code blocks while a soft tabulator four spaces of additional indentation is used for all continuing lines that must be split over multiple lines Moreover function calls do not use a space before the parenthesis although C language native statements such as if while do switch and return do in the case where return is used with parens Functions that declare no local variables in their toplevel block should also leave an empty line after their opening block brace Here follow a few samples while x y something somethingelse finalthing if data NULL res 0 if JSDefineProperty cx o data STRINGTOJSVAL JSNewStringCopyN cx data res NULL NULL JSPROPENUMERATE 0 QUEUEEXCEPTION Internal error goto err PQfreemem data else if JSDefineProperty cx o data OBJECTTOJSVAL NULL NULL NULL JSPROPENUMERATE 0 QUEUEEXCEPTION Internal error goto err static JSBool pgresultconstructor JSContext cx JSObject obj uintN argc jsval argv jsval rval QUEUEEXCEPTION PGresult class not userinstantiable return JSFALSE Allman style edit The Allman style is named after Eric Allman It is also sometimes termed BSD style since Allman wrote many of the utilities for BSD Unix although this should not be confused with the different BSD KNF style see above This style puts the brace associated with a control statement on the next line indented to the same level as the control statement Statements within the braces are indented to the next level while x y something somethingelse finalthing This style is similar to the standard indentation used by the Pascal languages and TransactSQL where the braces are equivalent to the keywords begin and end Example Allman code indentation style in Pascal procedure dosomething x y Integer begin while x y do begin something somethingelse end end Consequences of this style are that the indented code is clearly set apart from the containing statement by lines that are almost all whitespace and the closing brace lines up in the same column as the opening brace Some people feel this makes it easy to find matching braces The blocking style also delineates the block of code from the associated control statement Commenting out or removing a control statement or block of code or code refactoring are all less likely to introduce syntax errors via dangling or missing braces Also it is consistent with brace placement for the outerfunction block For example the following is still correct syntactically while x y something somethingelse As is this for int i0 i x i while x y if x y something somethingelse Even like this with conditional compilation int c ifdef HASGETCH while c getch EOF else while c getchar EOF endif dosomething c Variant Allman8 edit A popular variant for use in education citation needed Allman8 uses the 8space indentation tabs and 80column limit of the Linux Kernel variant of KR The style purportedly helps improve readability on projectors Also the indentation size and column restriction help create a visual cue for identifying excessive nesting of code blocks These advantages combine to help provide newer developers and learners implicit guidance to manage code complexity citation needed Whitesmiths style edit The Whitesmiths style also sometimes termed Wishart style was originally used in the documentation for the first commercial C compiler the Whitesmiths Compiler It was also popular in the early days of Windows since it was used in three influential Windows programming books Programmers Guide to Windows by Durant Carlson Yao Programming Windows by Petzold and Windows 30 Power Programming Techniques by Norton Yao Whitesmiths along with Allman have been the most common bracing styles with equal popularity according to the Jargon File 5 This style puts the brace associated with a control statement on the next line indented Statements within the braces are indented to the same level as the braces while x y something somethingelse finalthing The advantages of this style are similar to those of the Allman style Blocks are clearly set apart from control statements The alignment of the braces with the block emphasizes that the full block is conceptually and programmatically one compound statement Indenting the braces emphasizes that they are subordinate to the control statement The ending brace no longer lines up with the statement but instead with the opening brace An example if data NULL res 0 if JSDefineProperty cx o data STRINGTOJSVAL JSNewStringCopyN cx data res NULL NULL JSPROPENUMERATE QUEUEEXCEPTION Internal error goto err PQfreemem data else if JSDefineProperty cx o data OBJECTTOJSVAL NULL NULL NULL JSPROPENUMERATE QUEUEEXCEPTION Internal error goto err else if are treated as statement much like the elif preprocessor statement GNU style edit Main article GNU coding standards Like the Allman and Whitesmiths styles GNU style puts braces on a line by themselves indented by two spaces except when opening a function definition where they are not indented 22 In either case the contained code is indented by two spaces from the braces Popularised by Richard Stallman the layout may be influenced by his background of writing Lisp code 23 In Lisp the equivalent to a block a progn is a firstclass data entity and giving it its own indentation level helps to emphasize that whereas in C a block is only syntax This style can also be found in some ALGOL and XPL programming language textbooks from the 1960s and 1970s 24 25 discuss Although not directly related to indentation GNU coding style also includes a space before the bracketed list of arguments to a function static char concat char s1 char s2 while x y something somethingelse finalthing 22 This style combines the advantages of Allman and Whitesmiths thereby removing the possible Whitesmiths disadvantage of braces not standing out from the block One disadvantage is that the ending brace no longer lines up with the statement it conceptually belongs to Another possible disadvantage is that it might waste space by using two visual levels of indents for one conceptual level but in reality this is unlikely because in systems with singlelevel indentation each level is usually at least 4 spaces same as 2 2 spaces in GNU style The GNU Coding Standards recommend this style and nearly all maintainers of GNU project software use it citation needed The GNU Emacs text editor and the GNU systems indent command will reformat code according to this style by default 26 Those who do not use GNU Emacs or similarly extensiblecustomisable editors may find that the automatic indentation settings of their editor are unhelpful for this style However many editors defaulting to KNF style cope well with the GNU style when the tab width is set to two spaces likewise GNU Emacs adapts well to KNF style by simply setting the tab width to eight spaces In both cases automatic reformatting destroys the original spacing but automatic line indenting will work properly Steve McConnell in his book Code Complete advises against using this style he marks a code sample which uses it with a Coding Horror icon symbolizing especially dangerous code and states that it impedes readability 27 The Linux kernel coding style documentation also strongly recommends against this style urging readers to burn a copy of the GNU coding standards as a great symbolic gesture 28 Horstmann style edit The 1997 edition of Computing Concepts with C Essentials by Cay S Horstmann adapts Allman by placing the first statement of a block on the same line as the opening brace This style is also used in examples in Jensen and Wirths Pascal User Manual and Report 29 while x y something somethingelse if x 0 printf Negative negative x else printf Nonnegative nonnegative x finalthing This style combines the advantages of Allman by keeping the vertical alignment of the braces for readability and identifying blocks easily with the saving of a line of the KR style However the 2003 edition now uses Allman style throughout 30 Pico style edit This is the style used most commonly in the language Pico by its designers Pico lacks return statements and uses semicolons as statement separators instead of terminators It yields this syntax 31 stuffn x 3 n y doStuffx y x The advantages and disadvantages are similar to those of saving screen real estate with KR style An added advantage is that the starting and closing braces are consistent in application both share space with a line of code relative to KR style where one brace shares space with a line of code and one brace has a line alone Ratliff style edit In the book Programmers at Work 32 C Wayne Ratliff discussed using the style below The style begins much like 1TBS but then the closing brace lines up with the indentation of the nested block Ratliff was the original programmer behind the popular dBase II and III fourthgeneration programming languages He indicated that it was originally documented in material from Digital Research Inc This style has sometimes been termed banner style 33 possibly for the resemblance to a banner hanging from a pole In this style which is to Whitesmiths as KR is to Allman the closing control is indented as the last item in the list and thus properly loses salience The style can make visual scanning easier for some since the headers of any block are the only thing exdented at that level the theory being that the closing control of the prior block interferes with the visual flow of the next block header in the KR and Allman styles Kernighan and Plauger use this style in the Ratfor code in Software Tools 34 In C for i 0 i 10 i if i 2 0 doSomething i else doSomethingElse i or in a markup language table tr td lots of stuff more stuff td td alternative for short lines td td etc td tr table table tr etc table Lisp style edit A programmer may even go as far as to insert closing braces in the last line of a block This style makes indentation the only way to distinguish blocks of code but has the advantage of containing no uninformative lines This could easily be called the Lisp style because this style is very common in Lisp code or the Python style Python has no braces but the layout is very similar as shown in the code blocks below In Python layout is a part of the language called the offside rule In C for i 0 i 10 i if i 2 0 doSomething i else doSomethingElse i doThirdThing i In Python for i in range 10 if i 2 0 dosomething i else dosomethingelse i dothirdthing i In Lisp dotimes i 10 if rem i 2 0 dosomething i progn dosomethingelse i dothirdthing i Haskell style edit Haskell layout can make the placement of braces optional although braces and semicolons are allowed in the language 35 The two segments below are equally acceptable to the compiler braceless do text getContents let firstWord head words text bigWord map toUpper firstWord putStrLn bigWord braceful do text getContents let firstWord head words text bigWord map toUpper firstWord putStrLn bigWord In Haskell layout can replace bracesUsually the braces and semicolons are omitted for procedural do sections and the program text in general but the style is commonly used for lists records and other syntactic elements made up of some pair of parentheses or braces which are separated with commas or semicolons 36 If code following the keywords where let or of omits braces and semicolons then indentation is significant 37 Other considerations edit Losing track of blocks edit In some situations there is a risk of losing track of block boundaries This is often seen in large sections of code containing many compound statements nested to many levels of indentations By the time the programmer scrolls to the bottom of a huge set of nested statements they may have lost track of which control statements go where However overlylong code could have other causes such as being too complex and a programmer facing this problem might instead consider whether code refactoring would help in the longer term Programmers who rely on counting the opening braces may have difficulty with indentation styles such as KR where the starting brace is not visually separated from its control statement Programmers who rely more on indentations will gain more from styles that are vertically compact such as KR because the blocks are shorter To avoid losing track of control statements such as for a large indentation can be used such as an 8unitwide hard tab along with breaking up large functions into smaller and more readable functions Linux is done this way while using the KR style In text editors of the vi family one means to track block boundaries is to position the text cursor over one of the braces and press the key The cursor then jumps to the opposing brace Since the text cursors next key viz the n key retained directional positioning information whether the up or down key was formerly pressed the dot macro the key could then be used to place the text cursor on the next brace 38 given a suitable coding style Instead inspecting the block boundaries using the key can be used to enforce a coding standard Another way is to use inline comments added after the closing brace for int i 0 i total i foo bar for i if x 0 bar foo if x 0 The major disadvantage of this method is maintaining duplicate code in multiple locations Another solution is implemented in a folding editor which can hide or reveal blocks of code via their indentation level or compoundstatement structure Many editors will also highlight matching brackets or braces when the cursor is positioned next to one Statement insertion edit KR style prevents another common error suffered when using the standard Unix line editor ed A statement mistakenly inserted between the control statement and the opening brace of the loop block turns the body of the loop into a single trip for int i 0 i 10 i whoops bar repeated 10 times with i from 0 to 9 onlyonce Programmer intended this to be done 10 times for i This comment is no longer valid and is very misleading KR style avoids this problem by keeping the control statement and the opening brace on the same line See also edit Secondary notation Syntax highlighting Indentation in programming References edit Zawinski Jamie 2000 Tabs versus Spaces An Eternal Holy War Retrieved 6 June 2016 mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em WordPress Coding Standards Retrieved 6 June 2016 Hoffa Felipe 26 July 2017 400000 GitHub repositories 1 billion files 14 terabytes of code Spaces or Tabs Medium Retrieved 9 July 2019 Miara Richard J Musselman Joyce A Navarro Juan A Shneiderman Ben November 1983 Program Indentation and Comprehensibility PDF Communications of the ACM 26 11 861867 doi 101145182358437 Retrieved 3 August 2017 a b The Jargon File 447 29 December 2003 Retrieved 18 August 2014 Darwin Ian F 1988 Checking C programs with Lint California OReilly and Assosciates p51 ISBN 9780937175309 httpcatborgjargonhtml0oneTBShtml Java Style Guide Supposed ancient Egyptian pose Egyptian brackets Foldoc A humourous term for KR indent style referring to the one hand up in front one down behind pose Google JavaScript Style Guide Braces follow the Kernighan and Ritchie style Egyptian brackets for nonempty blocks and blocklike constructs httpcatborgjargonhtml0oneTBShtml Java Style Guide Supposed ancient Egyptian pose A detailed description of the style is given at kernelorg Reddy Achut 30 March 2000 Java Coding Style Guide PDF Sun Microsystems Archived from the original PDF on 28 February 2006 Retrieved 30 May 2008 Java Code Conventions PDF Sun Microsystems 12 September 1997 Archived from the original PDF on 13 May 2008 Retrieved 30 May 2008 Code Conventions for the Java Programming Language Sun Microsystems 20 March 1997 Retrieved 30 May 2008 a b Stroustrup Bjarne September 2010 PPP Style Guide PDF Stroustrup Bjarne C Core Guidelines GitHub Retrieved 3 November 2018 a b c Shannon Bill 19 August 1996 C Style and Coding Standards for SunOS PDF 18 Sun Microsystems Inc Retrieved 15 June 2019 a b Gregg Brendan DTraceToolkit Style Guide Retrieved 6 February 2015 Shannon Bill 9 September 1998 cstylepl illumosgate 158 Sun Microsystems Inc Retrieved 6 February 2015 a b Formatting Your Source Code GNU Coding Standards Retrieved 6 June 2016 Stallman Richard 28 October 2002 My Lisp Experiences and the Development of GNU Emacs Transcript of speech at the International Lisp Conference Retrieved 6 June 2016 R Baumann M Feliciano F L Bauer and K Samuelson Introduction to Algol 1964 httpsarchiveorgdetailsintroductiontoal00baum W M McKeeman J J Horning and D B Wortman A Compiler Generator 1970 httpsarchiveorgdetailscompilergenerato00mcke Tested on the sample source code above on Ubuntu 1804 with GNU indent 2211 and GNU Emacs 2522 started with emacs noinitfile McConnell Steve 2004 Code Complete A practical handbook of software construction Redmond WA Microsoft Press pp 746747 ISBN 9780735619678 Linux kernel coding style Retrieved 1 January 2017 Jensen Kathleen Wirth Niklaus 1974 PASCAL User Manual and Report SpringerVerlag Horstmann Style Guide Ohno Asako 2013 A methodology to teach exemplary coding style considering students coding style feature contains fluctuations 2013 IEEE Frontiers in Education Conference FIE pp19081910 doi 101109fie20136685167 ISBN 9781467352611 Lammers Susan 1986 Programmers at Work Microsoft Press ISBN 9780914845713 Pattee Jim Artistic Style 205 Documentation Artistic Style Retrieved 24 April 2015 Kernighan Brian W Plauger P J 1976 Software Tools AddisonWesley The Haskell 98 Report haskellorg Retrieved 3 March 2016 Lipovača Miran Making Our Own Types and Typeclasses learnyouahaskellcom Retrieved 3 February 2016 Haskell Report 12 1992 p131 B4 Layout Lamb Linda Learning the vi editor OReilly External links edit C Style Standards and Guidelines Defining Programming Standards for Professional C Programmers Prentice Hall ISBN 0131168983 ISBN 9780131168985 full text is also online Straker David 1992 Contextual Indent GNU Coding Standards Source Code Formatters at Curlie