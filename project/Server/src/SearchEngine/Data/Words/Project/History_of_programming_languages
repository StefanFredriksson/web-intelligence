History of programming languages For a detailed timeline of events see Timeline of programming languages This articles lead section does not adequately summarize key points of its contents Please consider expanding the lead to provide an accessible overview of all important aspects of the article Please discuss this issue on the articles talk page February 2018 History of computing Hardware Hardware before 1960 Hardware 1960s to present Software Software Unix Free software and opensource software Computer science Artificial intelligence Compiler construction Computer science Operating systems Programming languages Prominent pioneers Software engineering Modern concepts Generalpurpose CPUs Graphical user interface Internet Laptops Personal computers Video games World Wide Web By country Bulgaria Poland Romania Soviet Bloc Soviet Union Yugoslavia Timeline of computing before 1950 19501979 19801989 19901999 20002009 20102019 more timelines Glossary of computer science Category v t e The history of programming languages spans from documentation of early mechanical computers to modern tools for software development Early programming languages were highly specialized relying on mathematical notation and similarly obscure syntax 1 Throughout the 20th century research in compiler theory lead to the creation of highlevel programming languages which use a more accessible syntax to communicate instructions The first highlevel programming language was Plankalkül created by Konrad Zuse between 1942 and 1945 2 The first highlevel language to have an associated compiler was created by Corrado Böhm in 1951 for his PhD thesis The first commercially available language was FORTRAN FORmula TRANslation developed in 1956 first manual appeared in 1956 but first developed in 1954 by a team led by John Backus at IBM Contents 1 Early history 2 First programming languages 3 Establishing fundamental paradigms 4 1980s consolidation modules performance 5 1990s the Internet age 6 Current trends 7 Prominent people 8 See also 9 References 10 Further reading 11 External links Early history edit During 18421849 Ada Lovelace translated the memoir of Italian mathematician Luigi Menabrea about Charles Babbage s newest proposed machine the Analytical Engine she supplemented the memoir with notes that specified in detail a method for calculating Bernoulli numbers with the engine recognized by some historians as the worlds first published computer program 3 The first computer codes were specialized for their applications eg Alonzo Church was able to express the lambda calculus in a formulaic way and the Turing machine was an abstraction of the operation of a tapemarking machine To some people some degree of expressive power and humanreadability is required before the status of programming language is granted Jacquard Looms and Charles Babbages Difference Engine both had simple extremely limited languages for describing the actions that these machines should perform First programming languages edit In the 1940s the first recognizably modern electrically powered computers were created The limited speed and memory capacity forced programmers to write hand tuned assembly language programs It was eventually realized that programming in assembly language required a great deal of intellectual effort An early proposal for a highlevel programming language was Plankalkül developed by Konrad Zuse for his Z1 computer between 1943 and 1945 but not implemented at the time 4 The first functioning programming languages designed to communicate instructions to a computer were written in the early 1950s John Mauchly s Short Code proposed in 1949 was one of the first highlevel languages ever developed for an electronic computer 5 Unlike machine code Short Code statements represented mathematical expressions in understandable form However the program had to be translated into machine code every time it ran making the process much slower than running the equivalent machine code In the early 1950s Alick Glennie developed Autocode possibly the first compiled programming language at the University of Manchester In 1954 a second iteration of the language known as the Mark 1 Autocode was developed for the Mark 1 by R A Brooker Brooker also developed an autocode for the Ferranti Mercury in the 1950s in conjunction with the University of Manchester The version for the EDSAC 2 was devised by Douglas Hartree of University of Cambridge Mathematical Laboratory in 1961 Known as EDSAC 2 Autocode it was a straight development from Mercury Autocode adapted for local circumstances and was noted for its object code optimization and sourcelanguage diagnostics which were advanced for the time A contemporary but separate thread of development Atlas Autocode was developed for the University of Manchester Atlas 1 machine In 1954 language FORTRAN was invented at IBM by a team led by John Backus it was the first widely used high level general purpose programming language to have a functional implementation as opposed to just a design on paper 6 7 When FORTRAN was first introduced it was viewed with skepticism due to bugs delays in development and the comparative efficiency of handcoded programs written in assembly 8 However in a hardware market that was rapidly evolving the language eventually became known for its efficiency It is still a popular language for highperformance computing 9 and is used for programs that benchmark and rank the worlds fastest supercomputers 10 Another early programming language was devised by Grace Hopper in the US called FLOWMATIC It was developed for the UNIVAC I at Remington Rand during the period from 1955 until 1959 Hopper found that business data processing customers were uncomfortable with mathematical notation and in early 1955 she and her team wrote a specification for an English programming language and implemented a prototype 11 The FLOWMATIC compiler became publicly available in early 1958 and was substantially complete in 1959 12 FlowMatic was a major influence in the design of COBOL since only it and its direct descendant AIMACO were in actual use at the time 13 Other languages still in use today include LISP 1958 invented by John McCarthy and COBOL 1959 created by the Short Range Committee Another milestone in the late 1950s was the publication by a committee of American and European computer scientists of a new language for algorithms the ALGOL 60 Report the ALGO rithmic L anguage This report consolidated many ideas circulating at the time and featured three key language innovations nested block structure code sequences and associated declarations could be grouped into blocks without having to be turned into separate explicitly named procedures lexical scoping a block could have its own private variables procedures and functions invisible to code outside that block that is information hiding Another innovation related to this was in how the language was described a mathematically exact notation BackusNaur form BNF was used to describe the languages syntax Nearly all subsequent programming languages have used a variant of BNF to describe the contextfree portion of their syntax Algol 60 was particularly influential in the design of later languages some of which soon became more popular The Burroughs large systems were designed to be programmed in an extended subset of Algol Algols key ideas were continued producing ALGOL 68 syntax and semantics became even more orthogonal with anonymous routines a recursive typing system with higherorder functions etc not only the contextfree part but the full language syntax and semantics were defined formally in terms of Van Wijngaarden grammar a formalism designed specifically for this purpose Algol 68s many littleused language features for example concurrent and parallel blocks and its complex system of syntactic shortcuts and automatic type coercions made it unpopular with implementers and gained it a reputation of being difficult Niklaus Wirth actually walked out of the design committee to create the simpler Pascal language Fortran Some notable languages that were developed in this period include 1951 Regional Assembly Language 1952 Autocode 1954 IPL forerunner to LISP 1955 FLOWMATIC led to COBOL 1957 FORTRAN first compiler 1957 COMTRAN precursor to COBOL 1958 LISP 1958 ALGOL 58 1959 FACT forerunner to COBOL 1959 COBOL 1959 RPG 1962 APL 1962 Simula 1962 SNOBOL 1963 CPL forerunner to C 1964 Speakeasy 1964 BASIC 1964 PLI 1966 JOSS 1966 MUMPS 1967 BCPL forerunner to C Establishing fundamental paradigms edit Scheme The period from the late 1960s to the late 1970s brought a major flowering of programming languages Most of the major language paradigms now in use were invented in this period original research Speakeasy developed in 1964 at Argonne National Laboratory ANL by Stanley Cohen is an OOPS objectoriented programming system much like the later MATLAB IDL and Mathematica numerical package Speakeasy has a clear Fortran foundation syntax It first addressed efficient physics computation internally at ANL was modified for research use as Modeleasy for the Federal Reserve Board in the early 1970s and then was made available commercially Speakeasy and Modeleasy are still in use currently Simula invented in the late 1960s by Nygaard and Dahl as a superset of Algol 60 was the first language designed to support objectoriented programming C an early systems programming language was developed by Dennis Ritchie and Ken Thompson at Bell Labs between 1969 and 1973 Smalltalk mid1970s provided a complete groundup design of an objectoriented language Prolog designed in 1972 by Colmerauer Roussel and Kowalski was the first logic programming language ML built a polymorphic type system invented by Robin Milner in 1973 on top of Lisp 14 pioneering statically typed functional programming languages Each of these languages spawned an entire family of descendants and most modern languages count at least one of them in their ancestry The 1960s and 1970s also saw considerable debate over the merits of structured programming which essentially meant programming without the use of goto A significant fraction of programmers believed that even in languages that provide goto it is bad programming style to use it except in rare circumstances This debate was closely related to language design some languages did not include a goto at all which forced structured programming on the programmer To provide even faster compile times some languages were structured for onepass compilers which expect subordinate routines to be defined first as with Pascal where the main routine or driver function is the final section of the program listing Some notable languages that were developed in this period include 1967 BCPL forerunner to B 1968 Logo 1969 B forerunner to C 1970 Pascal 1970 Forth 1972 C 1972 Smalltalk 1972 Prolog 1973 ML 1975 Scheme 1978 SQL a query language later extended 1980s consolidation modules performance edit MATLAB Erlang Tcl The 1980s were years of relative consolidation in imperative languages Rather than inventing new paradigms all of these movements elaborated upon the ideas invented in the previous decade C combined objectoriented and systems programming The United States government standardized Ada a systems programming language intended for use by defense contractors In Japan and elsewhere vast sums were spent investigating socalled fifthgeneration programming languages that incorporated logic programming constructs The functional languages community moved to standardize ML and Lisp Research in Miranda a functional language with lazy evaluation began to take hold in this decade One important new trend in language design was an increased focus on programming for largescale systems through the use of modules or largescale organizational units of code Modula Ada and ML all developed notable module systems in the 1980s Module systems were often wedded to generic programming constructsgenerics being in essence parametrized modules citation needed see also polymorphism in objectoriented programming Although major new paradigms for imperative programming languages did not appear many researchers expanded on the ideas of prior languages and adapted them to new contexts For example the languages of the Argus and Emerald systems adapted objectoriented programming to distributed systems The 1980s also brought advances in programming language implementation The RISC movement in computer architecture postulated that hardware should be designed for compilers rather than for human assembly programmers Aided by processor speed improvements that enabled increasingly aggressive compilation techniques the RISC movement sparked greater interest in compilation technology for highlevel languages Language technology continued along these lines well into the 1990s Some notable languages that were developed in this period include 1980 C as C with classes renamed in1983 1983 Ada 1984 Common Lisp 1984 MATLAB 1984 dBase III dBase III Plus Clipper and FoxPro as FoxBASE later developing into Visual FoxPro 1985 Eiffel 1986 ObjectiveC 1986 LabVIEW Visual Programming Language 1986 Erlang 1987 Perl 1988 Tcl 1988 Wolfram Language as part of Mathematica only got a separate name in June 2013 1989 FL Backus 1990s the Internet age edit Haskell Lua PHP Rebol The rapid growth of the Internet in the mid1990s was the next major historic event in programming languages By opening up a radically new platform for computer systems the Internet created an opportunity for new languages to be adopted In particular the JavaScript programming language rose to popularity because of its early integration with the Netscape Navigator web browser Various other scripting languages achieved widespread use in developing customized applications for web servers such as PHP The 1990s saw no fundamental novelty in imperative languages but much recombination and maturation of old ideas This era began the spread of functional languages A big driving philosophy was programmer productivity Many rapid application development RAD languages emerged which usually came with an IDE garbage collection and were descendants of older languages All such languages were objectoriented These included Object Pascal Visual Basic and Java Java in particular received much attention More radical and innovative than the RAD languages were the new scripting languages These did not directly descend from other languages and featured new syntaxes and more liberal incorporation of features Many consider these scripting languages to be more productive than even the RAD languages but often because of choices that make small programs simpler but large programs more difficult to write and maintain citation needed Nevertheless scripting languages came to be the most prominent ones used in connection with the Web Some notable languages that were developed in this period include 1990 Haskell 1991 Python 1991 Visual Basic 1993 Lua 1993 R 1994 CLOS part of ANSI Common Lisp 1995 Ruby 1995 Ada 95 1995 Java 1995 Delphi Object Pascal 1995 JavaScript 1995 PHP 1997 Rebol Current trends edit Programming language evolution continues in both industry and research Some of the recent trends have included D Programming Language Groovy Rust Scratch Swift Increasing support for functional programming in mainstream languages used commercially including pure functional programming for making code easier to reason about and easier to parallelise at both micro and macro levels Constructs to support concurrent and distributed programming Mechanisms for adding security and reliability verification to the language extended static checking dependent typing information flow control static thread safety Alternative mechanisms for composability and modularity mixins traits typeclasses delegates aspects Componentoriented software development Metaprogramming reflection or access to the abstract syntax tree AOP or Aspect Oriented Programming allowing developers to insert code in another module or class at join points Domain specific languages and code generation XML for graphical interface XUL XAML Increased interest in distribution and mobility Integration with databases including XML and relational databases Open source as a developmental philosophy for languages including the GNU Compiler Collection and languages such as Python Ruby and Scala Massively parallel languages for coding 2000 processor GPU graphics processing units and supercomputer arrays including OpenCL Early research into asyetunimplementable quantum computing programming languages More interest in visual programming languages like Scratch Some notable languages developed during this period include 15 16 2000 ActionScript 2001 C 2001 D 2002 Scratch 2003 Groovy 2003 Scala 2005 F 2006 PowerShell 2007 Clojure 2009 Go 2010 Rust 2011 Dart 2011 Kotlin 2011 Elixir 2012 Julia 2012 TypeScript 2014 Swift Other new programming languages include Red Crystal Hack Reason and Ballerina Prominent people edit Anders Hejlsberg Yukihiro Matsumoto Grace M Hopper Bjarne Stroustrup Niklaus Wirth Some key people who helped develop programming languages Alan Cooper developer of Visual Basic Alan Kay pioneering work on objectoriented programming and originator of Smalltalk Anders Hejlsberg developer of Turbo Pascal Delphi C and TypeScript Bertrand Meyer inventor of Eiffel Bjarne Stroustrup developer of C Brian Kernighan coauthor of the first book on the C programming language with Dennis Ritchie coauthor of the AWK and AMPL programming languages Chris Lattner creator of Swift and LLVM Cleve Moler creator of MATLAB Dennis Ritchie inventor of C Unix Operating System Plan 9 Operating System Grace Hopper first to use the term compiler and developer of FLOWMATIC influenced development of COBOL Popularized machineindependent programming languages and the term debugging Guido van Rossum creator of Python James Gosling lead developer of Java and its precursor Oak Jean Ichbiah chief designer of Ada Ada 83 JeanYves Girard coinventor of the polymorphic lambda calculus System F Jeff Bezanson main designer and one of the core developers of Julia Joe Armstrong creator of Erlang John Backus inventor of Fortran and cooperated in the design of ALGOL 58 and ALGOL 60 John C Reynolds coinventor of the polymorphic lambda calculus System F John McCarthy inventor of LISP John von Neumann originator of the operating system concept Graydon Hoare inventor of Rust Ken Thompson inventor of B Go Inferno operating system and Unix Operating System coauthor Kenneth E Iverson developer of APL and codeveloper of J along with Roger Hui Konrad Zuse designed the first highlevel programming language Plankalkül which influenced ALGOL 58 17 Kristen Nygaard pioneered objectoriented programming coinvented Simula Larry Wall creator of the Perl programming language see Perl and Raku Martin Odersky creator of Scala and previously a contributor to the design of Java Martin Richards developed the BCPL programming language forerunner of the B and C languages Nathaniel Rochester inventor of first assembler IBM 701 Niklaus Wirth inventor of Pascal Modula and Oberon OleJohan Dahl pioneered objectoriented programming coinvented Simula Rasmus Lerdorf creator of PHP Rich Hickey creator of Clojure Robert Gentleman cocreator of R Robert Griesemer cocreator of Go Robin Milner inventor of ML and sharing credit for HindleyMilner polymorphic type inference Rob Pike cocreator of Go Inferno operating system and Plan 9 operating system Operating System coauthor Ross Ihaka cocreator of R Stanley Cohen inventor of Speakeasy which was created with an OOPS objectoriented programming system the first instance in 1964 Stephen Wolfram creator of Mathematica Tom Love and Brad Cox creator of ObjectiveC Walter Bright creator of D Yukihiro Matsumoto creator of Ruby See also edit ACM SIGPLAN History of Programming Languages Conference History of compiler writing History of computing hardware Programming language Timeline of computing Timeline of programming languages List of programming languages List of programmers References edit Hopper 1978 p16 Knuth Donald E Pardo Luis Trabb Early development of programming languages Encyclopedia of Computer Science and Technology Marcel Dekker 7 419493 mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em J Fuegi and J Francis OctoberDecember 2003 Lovelace Babbage and the creation of the 1843 notes Annals of the History of Computing 25 4 1626 doi 101109MAHC20031253887 In 1998 and 2000 compilers were created for the language as a historical exercise Rojas Raúl et al 2000 Plankalkül The First HighLevel Programming Language and its Implementation Institut frame Informatik Freie Universität Berlin Technical Report B32000 full text Sebesta WS 2006 Concepts of Programming Languages p44 ISBN 9780321330253 Fortran creator John Backus dies Tech and gadgets NBC News NBC News 20070320 Retrieved 20100425 CSC302 99S Class 02 A Brief History of Programming Languages Mathgrinedu Retrieved 20100425 Padua David Feb 2000 The FORTRAN I Compiler PDF Computing in Science and Engineering 2 1 7075 Retrieved 7 November 2019 Eugene Loh 18 June 2010 The Ideal HPC Programming Language Queue Association of Computing Machines 8 6 HPL A Portable Implementation of the HighPerformance Linpack Benchmark for DistributedMemory Computers Retrieved 20150221 Hopper 1978 p16 Sammet 1969 p316 Sammet 1978 p204 Gordon Michael J C 1996 From LCF to HOL a short history PDF p3 Retrieved 20150504 Edinburgh LCF including the ML interpreter was implemented in Lisp TIOBE 25 May 2018 TIOBE Index Top 100 programming languages according to TIOBE Index wwwtiobecom TIOBEindex GitHubs Octoverse 2018 Archived from the original on 20190322 Rojas Raúl Hashagen Ulf 2002 The First Computers History and Architectures MIT Press p292 ISBN 9780262681377 Retrieved October 25 2013 Further reading edit Rosen Saul editor Programming Systems and Languages McGrawHill 1967 Sammet Jean E Programming Languages History and Fundamentals PrenticeHall 1969 Sammet Jean E July 1972 Programming Languages History and Future Communications of the ACM 15 7 601610 doi 101145361454361485 Richard L Wexelblat ed History of Programming Languages Academic Press 1981 Thomas J Bergin and Richard G Gibson eds History of Programming Languages Addison Wesley 1996 External links edit History and evolution of programming languages Graph of programming language history v t e Programming languages Comparison Timeline History APL Assembly BASIC C C C COBOL Elixir Fortran Go Groovy Haskell Java JavaScript JS Julia Kotlin Lisp Lua MATLAB ObjectiveC OCaml Pascal Perl PHP Python R Ruby Rust Scala Shell Smalltalk Swift TypeScript Visual Basic NET VBNET more Category Lists Alphabetical Categorical Generational NonEnglishbased