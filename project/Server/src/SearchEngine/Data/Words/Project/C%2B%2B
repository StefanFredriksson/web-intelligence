C CXX redirects here For the Roman numerals see 120 number Generalpurpose programming language C The C logo endorsed by Standard C Paradigms Multiparadigm procedural functional objectoriented generic Designedby Bjarne Stroustrup Developer ISOIEC JTC1 Joint Technical Committee 1 SC22 Subcommittee 22 WG21 Working Group 21 Firstappeared 1985 35years ago 1985 Stable release C17 ISOIEC 148822017 1December 2017 2 years ago 20171201 Preview release C20 Typing discipline Static nominative partially inferred Filename extensions C cc cpp cxx c h hh hpp hxx h Website isocpp org Major implementations LLVM Clang GCC Microsoft Visual C Embarcadero CBuilder Intel C Compiler IBM XL C EDG Influenced by Ada ALGOL 68 C CLU ML Simula Influenced Ada 95 C 1 C99 Chapel 2 Clojure 3 D Java 4 Lua Nim citation needed Perl PHP Python 5 Rust Seed7 C Programming at Wikibooks C ˌ s iː ˌ p l ʌ s ˈ p l ʌ s is a generalpurpose programming language created by Bjarne Stroustrup as an extension of the C programming language or C with Classes The language has expanded significantly over time and modern C has objectoriented generic and functional features in addition to facilities for lowlevel memory manipulation It is almost always implemented as a compiled language and many vendors provide C compilers including the Free Software Foundation LLVM Microsoft Intel Oracle and IBM so it is available on many platforms 6 C was designed with a bias toward system programming and embedded resourceconstrained software and large systems with performance efficiency and flexibility of use as its design highlights 7 C has also been found useful in many other contexts with key strengths being software infrastructure and resourceconstrained applications 7 including desktop applications servers eg ecommerce Web search or SQL servers and performancecritical applications eg telephone switches or space probes 8 C is standardized by the International Organization for Standardization ISO with the latest standard version ratified and published by ISO in December 2017 as ISOIEC 148822017 informally known as C17 9 The C programming language was initially standardized in 1998 as ISOIEC 148821998 which was then amended by the C03 C11 and C14 standards The current C17 standard supersedes these with new features and an enlarged standard library Before the initial standardization in 1998 C was developed by Danish computer scientist Bjarne Stroustrup at Bell Labs since 1979 as an extension of the C language he wanted an efficient and flexible language similar to C that also provided highlevel features for program organization 10 C20 is the next planned standard keeping with the current trend of a new version every three years 11 Contents 1 History 11 Etymology 12 Philosophy 13 Standardization 2 Language 21 Object storage 211 Static storage duration objects 212 Thread storage duration objects 213 Automatic storage duration objects 214 Dynamic storage duration objects 22 Templates 23 Objects 231 Encapsulation 232 Inheritance 24 Operators and operator overloading 25 Polymorphism 251 Static polymorphism 252 Dynamic polymorphism 2521 Inheritance 2522 Virtual member functions 26 Lambda expressions 27 Exception handling 3 Standard library 4 Compatibility 41 With C 5 Criticism 6 See also 7 References 8 Further reading 9 External links History edit Bjarne Stroustrup the creator of C In 1979 Bjarne Stroustrup a Danish computer scientist began work on C with Classes the predecessor to C 12 The motivation for creating a new language originated from Stroustrups experience in programming for his PhD thesis Stroustrup found that Simula had features that were very helpful for large software development but the language was too slow for practical use while BCPL was fast but too lowlevel to be suitable for large software development When Stroustrup started working in ATT Bell Labs he had the problem of analyzing the UNIX kernel with respect to distributed computing Remembering his PhD experience Stroustrup set out to enhance the C language with Simula like features 13 C was chosen because it was generalpurpose fast portable and widely used As well as C and Simulas influences other languages also influenced this new language including ALGOL 68 Ada CLU and ML Initially Stroustrups C with Classes added features to the C compiler Cpre including classes derived classes strong typing inlining and default arguments 14 In 1982 Stroustrup started to develop a successor to C with Classes which he named C being the increment operator in C after going through several other names New features were added including virtual functions function name and operator overloading references constants typesafe freestore memory allocation newdelete improved type checking and BCPL style singleline comments with two forward slashes Furthermore Stroustrup developed a new standalone compiler for C Cfront In 1985 the first edition of The C Programming Language was released which became the definitive reference for the language as there was not yet an official standard 15 The first commercial implementation of C was released in October of the same year 12 In 1989 C 20 was released followed by the updated second edition of The C Programming Language in 1991 16 New features in 20 included multiple inheritance abstract classes static member functions const member functions and protected members In 1990 The Annotated C Reference Manual was published This work became the basis for the future standard Later feature additions included templates exceptions namespaces new casts and a boolean type In 1998 C98 was released standardizing the language and a minor update C03 was released in 2003 After C98 C evolved relatively slowly until in 2011 the C11 standard was released adding numerous new features enlarging the standard library further and providing more facilities to C programmers After a minor C14 update released in December 2014 various new additions were introduced in C17 and further changes planned for 2020 17 As of 2019 C is now the fourth most popular programming language behind Java C and Python 18 19 On January 3 2018 Stroustrup was announced as the 2018 winner of the Charles Stark Draper Prize for Engineering for conceptualizing and developing the C programming language 20 Etymology edit According to Stroustrup the name signifies the evolutionary nature of the changes from C 21 This name is credited to Rick Mascitti mid1983 14 and was first used in December 1983 When Mascitti was questioned informally in 1992 about the naming he indicated that it was given in a tongueincheek spirit The name comes from Cs operator which increments the value of a variable and a common naming convention of using to indicate an enhanced computer program During Cs development period the language had been referred to as new C and C with Classes 14 22 before acquiring its final name Philosophy edit Throughout Cs life its development and evolution has been guided by a set of principles 13 It must be driven by actual problems and its features should be immediately useful in real world programs Every feature should be implementable with a reasonably obvious way to do so Programmers should be free to pick their own programming style and that style should be fully supported by C Allowing a useful feature is more important than preventing every possible misuse of C It should provide facilities for organising programs into separate welldefined parts and provide facilities for combining separately developed parts No implicit violations of the type system but allow explicit violations that is those explicitly requested by the programmer Usercreated types need to have the same support and performance as builtin types Unused features should not negatively impact created executables eg in lower performance There should be no language beneath C except assembly language C should work alongside other existing programming languages rather than fostering its own separate and incompatible programming environment If the programmers intent is unknown allow the programmer to specify it by providing manual control Standardization edit Year C Standard Informal name 1998 ISOIEC 148821998 23 C98 2003 ISOIEC 148822003 24 C03 2011 ISOIEC 148822011 25 C11 C0x 2014 ISOIEC 148822014 26 C14 C1y 2017 ISOIEC 148822017 9 C17 C1z 2020 to be determined C20 17 C2a C is standardized by an ISO working group known as JTC1SC22WG21 So far it has published five revisions of the C standard and is currently working on the next revision C20 In 1998 the ISO working group standardized C for the first time as ISOIEC 148821998 which is informally known as C98 In 2003 it published a new version of the C standard called ISOIEC 148822003 which fixed problems identified in C98 The next major revision of the standard was informally referred to as C0x but it was not released until 2011 27 C11 148822011 included many additions to both the core language and the standard library 25 In 2014 C14 also known as C1y was released as a small extension to C11 featuring mainly bug fixes and small improvements 28 The Draft International Standard ballot procedures completed in midAugust 2014 29 After C14 a major revision C17 informally known as C1z was completed by the ISO C Committee in mid July 2017 and was approved and published in December 2017 30 As part of the standardization process ISO also publishes technical reports and specifications ISOIEC TR 180152006 31 on the use of C in embedded systems and on performance implications of C language and library features ISOIEC TR 197682007 32 also known as the C Technical Report 1 on library extensions mostly integrated into C11 ISOIEC TR 291242010 33 on special mathematical functions ISOIEC TR 247332011 34 on decimal floating point arithmetic ISOIEC TS 188222015 35 on the standard filesystem library ISOIEC TS 195702015 36 on parallel versions of the standard library algorithms ISOIEC TS 198412015 37 on software transactional memory ISOIEC TS 195682015 38 on a new set of library extensions some of which are already integrated into C17 ISOIEC TS 192172015 39 on the C concepts integrated into C20 ISOIEC TS 195712016 40 on the library extensions for concurrency ISOIEC TS 195682017 41 on a new set of generalpurpose library extensions ISOIEC TS 214252017 42 on the library extensions for ranges integrated into C20 ISOIEC TS 222772017 43 on coroutines ISOIEC TS 192162018 44 on the networking library ISOIEC TS 215442018 45 on modules ISOIEC TS 195702018 46 on a new set of library extensions for parallelism More technical specifications are in development and pending approval including static reflection 47 Language edit The C language has two main components a direct mapping of hardware features provided primarily by the C subset and zerooverhead abstractions based on those mappings Stroustrup describes C as a lightweight abstraction programming language designed for building and using efficient and elegant abstractions 7 and offering both hardware access and abstraction is the basis of C Doing it efficiently is what distinguishes it from other languages 48 C inherits most of Cs syntax The following is Bjarne Stroustrups version of the Hello world program that uses the C Standard Library stream facility to write a message to standard output 49 50 1 include iostream 2 3 int main 4 5 std cout Hello world n 6 Object storage edit As in C C supports four types of memory management static storage duration objects thread storage duration objects automatic storage duration objects and dynamic storage duration objects 51 Static storage duration objects edit Static storage duration objects are created before main is entered see exceptions below and destroyed in reverse order of creation after main exits The exact order of creation is not specified by the standard though there are some rules defined below to allow implementations some freedom in how to organize their implementation More formally objects of this type have a lifespan that shall last for the duration of the program 52 Static storage duration objects are initialized in two phases First static initialization is performed and only after all static initialization is performed dynamic initialization is performed In static initialization all objects are first initialized with zeros after that all objects that have a constant initialization phase are initialized with the constant expression ie variables initialized with a literal or constexpr Though it is not specified in the standard the static initialization phase can be completed at compile time and saved in the data partition of the executable Dynamic initialization involves all object initialization done via a constructor or function call unless the function is marked with constexpr in C11 The dynamic initialization order is defined as the order of declaration within the compilation unit ie the same file No guarantees are provided about the order of initialization between compilation units Thread storage duration objects edit Variables of this type are very similar to static storage duration objects The main difference is the creation time is just prior to thread creation and destruction is done after the thread has been joined 53 Automatic storage duration objects edit The most common variable types in C are local variables inside a function or block and temporary variables 54 The common feature about automatic variables is that they have a lifetime that is limited to the scope of the variable They are created and potentially initialized at the point of declaration see below for details and destroyed in the reverse order of creation when the scope is left This is implemented by allocation on the stack Local variables are created as the point of execution passes the declaration point If the variable has a constructor or initializer this is used to define the initial state of the object Local variables are destroyed when the local block or function that they are declared in is closed C destructors for local variables are called at the end of the object lifetime allowing a discipline for automatic resource management termed RAII which is widely used in C Member variables are created when the parent object is created Array members are initialized from 0 to the last member of the array in order Member variables are destroyed when the parent object is destroyed in the reverse order of creation ie If the parent is an automatic object then it will be destroyed when it goes out of scope which triggers the destruction of all its members Temporary variables are created as the result of expression evaluation and are destroyed when the statement containing the expression has been fully evaluated usually at the at the end of a statement Dynamic storage duration objects edit Main article new and delete C These objects have a dynamic lifespan and are created with a call to new and destroyed explicitly with a call to delete 55 C also supports malloc and free from C but these are not compatible with new and delete Templates edit See also Template metaprogramming and Generic programming C templates enable generic programming C supports function class alias and variable templates Templates may be parameterized by types compiletime constants and other templates Templates are implemented by instantiation at compiletime To instantiate a template compilers substitute specific arguments for a templates parameters to generate a concrete function or class instance Some substitutions are not possible these are eliminated by an overload resolution policy described by the phrase Substitution failure is not an error SFINAE Templates are a powerful tool that can be used for generic programming template metaprogramming and code optimization but this power implies a cost Template use may increase code size because each template instantiation produces a copy of the template code one for each set of template arguments however this is the same or smaller amount of code that would be generated if the code was written by hand 56 This is in contrast to runtime generics seen in other languages eg Java where at compiletime the type is erased and a single template body is preserved Templates are different from macros while both of these compiletime language features enable conditional compilation templates are not restricted to lexical substitution Templates are aware of the semantics and type system of their companion language as well as all compiletime type definitions and can perform highlevel operations including programmatic flow control based on evaluation of strictly typechecked parameters Macros are capable of conditional control over compilation based on predetermined criteria but cannot instantiate new types recurse or perform type evaluation and in effect are limited to precompilation textsubstitution and textinclusionexclusion In other words macros can control compilation flow based on predefined symbols but cannot unlike templates independently instantiate new symbols Templates are a tool for static polymorphism see below and generic programming In addition templates are a compile time mechanism in C that is Turingcomplete meaning that any computation expressible by a computer program can be computed in some form by a template metaprogram prior to runtime In summary a template is a compiletime parameterized function or class written without knowledge of the specific arguments used to instantiate it After instantiation the resulting code is equivalent to code written specifically for the passed arguments In this manner templates provide a way to decouple generic broadly applicable aspects of functions and classes encoded in templates from specific aspects encoded in template parameters without sacrificing performance due to abstraction Objects edit Main article C classes C introduces objectoriented programming OOP features to C It offers classes which provide the four features commonly present in OOP and some nonOOP languages abstraction encapsulation inheritance and polymorphism One distinguishing feature of C classes compared to classes in other programming languages is support for deterministic destructors which in turn provide support for the Resource Acquisition is Initialization RAII concept Encapsulation edit Encapsulation is the hiding of information to ensure that data structures and operators are used as intended and to make the usage model more obvious to the developer C provides the ability to define classes and functions as its primary encapsulation mechanisms Within a class members can be declared as either public protected or private to explicitly enforce encapsulation A public member of the class is accessible to any function A private member is accessible only to functions that are members of that class and to functions and classes explicitly granted access permission by the class friends A protected member is accessible to members of classes that inherit from the class in addition to the class itself and any friends The objectoriented principle ensures the encapsulation of all and only the functions that access the internal representation of a type C supports this principle via member functions and friend functions but it does not enforce it Programmers can declare parts or all of the representation of a type to be public and they are allowed to make public entities not part of the representation of a type Therefore C supports not just objectoriented programming but other decomposition paradigms such as modular programming It is generally considered good practice to make all data private or protected and to make public only those functions that are part of a minimal interface for users of the class This can hide the details of data implementation allowing the designer to later fundamentally change the implementation without changing the interface in any way 57 58 Inheritance edit Inheritance allows one data type to acquire properties of other data types Inheritance from a base class may be declared as public protected or private This access specifier determines whether unrelated and derived classes can access the inherited public and protected members of the base class Only public inheritance corresponds to what is usually meant by inheritance The other two forms are much less frequently used If the access specifier is omitted a class inherits privately while a struct inherits publicly Base classes may be declared as virtual this is called virtual inheritance Virtual inheritance ensures that only one instance of a base class exists in the inheritance graph avoiding some of the ambiguity problems of multiple inheritance Multiple inheritance is a C feature not found in most other languages allowing a class to be derived from more than one base class this allows for more elaborate inheritance relationships For example a Flying Cat class can inherit from both Cat and Flying Mammal Some other languages such as C or Java accomplish something similar although more limited by allowing inheritance of multiple interfaces while restricting the number of base classes to one interfaces unlike classes provide only declarations of member functions no implementation or member data An interface as in C and Java can be defined in C as a class containing only pure virtual functions often known as an abstract base class or ABC The member functions of such an abstract base class are normally explicitly defined in the derived class not inherited implicitly C virtual inheritance exhibits an ambiguity resolution feature called dominance Operators and operator overloading edit Operators that cannot be overloaded Operator Symbol Scope resolution operator Conditional operator dot operator Member selection operator sizeof operator sizeof typeid operator typeid Main article Operators in C and C C provides more than 35 operators covering basic arithmetic bit manipulation indirection comparisons logical operations and others Almost all operators can be overloaded for userdefined types with a few notable exceptions such as member access and as well as the conditional operator The rich set of overloadable operators is central to making userdefined types in C seem like builtin types Overloadable operators are also an essential part of many advanced C programming techniques such as smart pointers Overloading an operator does not change the precedence of calculations involving the operator nor does it change the number of operands that the operator uses any operand may however be ignored by the operator though it will be evaluated prior to execution Overloaded and operators lose their shortcircuit evaluation property Polymorphism edit See also Polymorphism computer science Polymorphism enables one common interface for many implementations and for objects to act differently under different circumstances C supports several kinds of static resolved at compiletime and dynamic resolved at runtime polymorphisms supported by the language features described above Compiletime polymorphism does not allow for certain runtime decisions while runtime polymorphism typically incurs a performance penalty Static polymorphism edit See also Parametric polymorphism and ad hoc polymorphism Function overloading allows programs to declare multiple functions having the same name but with different arguments ie ad hoc polymorphism The functions are distinguished by the number or types of their formal parameters Thus the same function name can refer to different functions depending on the context in which it is used The type returned by the function is not used to distinguish overloaded functions and would result in a compiletime error message When declaring a function a programmer can specify for one or more parameters a default value Doing so allows the parameters with defaults to optionally be omitted when the function is called in which case the default arguments will be used When a function is called with fewer arguments than there are declared parameters explicit arguments are matched to parameters in lefttoright order with any unmatched parameters at the end of the parameter list being assigned their default arguments In many cases specifying default arguments in a single function declaration is preferable to providing overloaded function definitions with different numbers of parameters Templates in C provide a sophisticated mechanism for writing generic polymorphic code ie parametric polymorphism In particular through the curiously recurring template pattern its possible to implement a form of static polymorphism that closely mimics the syntax for overriding virtual functions Because C templates are typeaware and Turingcomplete they can also be used to let the compiler resolve recursive conditionals and generate substantial programs through template metaprogramming Contrary to some opinion template code will not generate a bulk code after compilation with the proper compiler settings 56 Dynamic polymorphism edit Inheritance edit See also Subtyping Variable pointers and references to a base class type in C can also refer to objects of any derived classes of that type This allows arrays and other kinds of containers to hold pointers to objects of differing types references cannot be directly held in containers This enables dynamic runtime polymorphism where the referred objects can behave differently depending on their actual derived types C also provides the dynamiccast operator which allows code to safely attempt conversion of an object via a base referencepointer to a more derived type downcasting The attempt is necessary as often one does not know which derived type is referenced Upcasting conversion to a more general type can always be checkedperformed at compiletime via staticcast as ancestral classes are specified in the derived classs interface visible to all callers dynamiccast relies on runtime type information RTTI metadata in the program that enables differentiating types and their relationships If a dynamiccast to a pointer fails the result is the nullptr constant whereas if the destination is a reference which cannot be null the cast throws an exception Objects known to be of a certain derived type can be cast to that with staticcast bypassing RTTI and the safe runtime typechecking of dynamiccast so this should be used only if the programmer is very confident the cast is and will always be valid Virtual member functions edit Ordinarily when a function in a derived class overrides a function in a base class the function to call is determined by the type of the object A given function is overridden when there exists no difference in the number or type of parameters between two or more definitions of that function Hence at compile time it may not be possible to determine the type of the object and therefore the correct function to call given only a base class pointer the decision is therefore put off until runtime This is called dynamic dispatch Virtual member functions or methods 59 allow the most specific implementation of the function to be called according to the actual runtime type of the object In C implementations this is commonly done using virtual function tables If the object type is known this may be bypassed by prepending a fully qualified class name before the function call but in general calls to virtual functions are resolved at run time In addition to standard member functions operator overloads and destructors can be virtual As a rule of thumb if any function in the class is virtual the destructor should be as well As the type of an object at its creation is known at compile time constructors and by extension copy constructors cannot be virtual Nonetheless a situation may arise where a copy of an object needs to be created when a pointer to a derived object is passed as a pointer to a base object In such a case a common solution is to create a clone or similar virtual function that creates and returns a copy of the derived class when called A member function can also be made pure virtual by appending it with 0 after the closing parenthesis and before the semicolon A class containing a pure virtual function is called an abstract class Objects cannot be created from an abstract class they can only be derived from Any derived class inherits the virtual function as pure and must provide a nonpure definition of it and all other pure virtual functions before objects of the derived class can be created A program that attempts to create an object of a class with a pure virtual member function or inherited pure virtual member function is illformed Lambda expressions edit C provides support for anonymous functions also known as lambda expressions with the following form capture parameters returntype functionbody The capture list supports the definition of closures Such lambda expressions are defined in the standard as syntactic sugar for an unnamed function object An example lambda function may be defined as follows int x int y int return x y Exception handling edit Exception handling is used to communicate the existence of a runtime problem or error from where it was detected to where the issue can be handled 60 It permits this to be done in a uniform manner and separately from the main code while detecting all errors 61 Should an error occur an exception is thrown raised which is then caught by the nearest suitable exception handler The exception causes the current scope to be exited and also each outer scope propagation until a suitable handler is found calling in turn the destructors of any objects in these exited scopes 62 At the same time an exception is presented as an object carrying the data about the detected problem 63 Note that many C style guides such as Googles 64 LLVMs 65 Qts 66 Apples citation needed and Microsofts citation needed forbid the usage of exceptions The exceptioncausing code is placed inside a try block The exceptions are handled in separate catch blocks the handlers each try block can have multiple exception handlers as it is visible in the example below 67 1 include iostream 2 include vector 3 include stdexcept 4 5 int main 6 try 7 std vector int vec 3 4 3 1 8 int i vec at 4 Throws an exception stdoutofrange indexing for vec is from 03 not 14 9 10 An exception handler catches stdoutofrange which is thrown by vecat4 11 catch std outofrange e 12 std cerr Accessing a nonexistent element e what n 13 14 To catch any other standard library exceptions they derive from stdexception 15 catch std exception e 16 std cerr Exception thrown e what n 17 18 Catch any unrecognised exceptions ie those which dont derive from stdexception 19 catch 20 std cerr Some fatal error n 21 22 It is also possible to raise exceptions purposefully using the throw keyword these exceptions are handled in the usual way In some cases exceptions cannot be used due to technical reasons One such example is a critical component of an embedded system where every operation must be guaranteed to complete within a specified amount of time This cannot be determined with exceptions as no tools exist to determine the maximum time required for an exception to be handled 68 Unlike signal handling in which the handling function is called from the point of failure exception handling exits the current scope before the catch block is entered which may be located in the current function or any of the previous function calls currently on the stack Standard library edit Main article C Standard Library The C standard consists of two parts the core language and the standard library C programmers expect the latter on every major implementation of C it includes aggregate types vectors lists maps sets queues stacks arrays tuples algorithms find foreach binarysearch randomshuffle etc inputoutput facilities iostream for reading from and writing to the console and files filesystem library localisation support smart pointers for automatic memory management regular expression support multithreading library atomics support allowing a variable to be read or written to by at most one thread at a time without any external synchronisation time utilities measurement getting current time etc a system for converting error reporting that doesnt use C exceptions into C exceptions a random number generator and a slightly modified version of the C standard library to make it comply with the C type system A large part of the C library is based on the Standard Template Library STL Useful tools provided by the STL include containers as the collections of objects such as vectors and lists iterators that provide arraylike access to containers and algorithms that perform operations such as searching and sorting Furthermore multimaps associative arrays and multisets are provided all of which export compatible interfaces Therefore using templates it is possible to write generic algorithms that work with any container or on any sequence defined by iterators As in C the features of the library are accessed by using the include directive to include a standard header The C Standard Library provides 105 standard headers of which 27 are deprecated The standard incorporates the STL that was originally designed by Alexander Stepanov who experimented with generic algorithms and containers for many years When he started with C he finally found a language where it was possible to create generic algorithms eg STL sort that perform even better than for example the C standard library qsort thanks to C features like using inlining and compiletime binding instead of function pointers The standard does not refer to it as STL as it is merely a part of the standard library but the term is still widely used to distinguish it from the rest of the standard library inputoutput streams internationalization diagnostics the C library subset etc 69 Most C compilers and all major ones provide a standardsconforming implementation of the C standard library Compatibility edit To give compiler vendors greater freedom the C standards committee decided not to dictate the implementation of name mangling exception handling and other implementationspecific features The downside of this decision is that object code produced by different compilers is expected to be incompatible There were however attempts to standardize compilers for particular machines or operating systems for example C ABI 70 though they seem to be largely abandoned now With C edit Further information Compatibility of C and C C is often considered to be a superset of C but this is not strictly true 71 Most C code can easily be made to compile correctly in C but there are a few differences that cause some valid C code to be invalid or behave differently in C For example C allows implicit conversion from void to other pointer types but C does not for type safety reasons Also C defines many new keywords such as new and class which may be used as identifiers for example variable names in a C program Some incompatibilities have been removed by the 1999 revision of the C standard C99 which now supports C features such as line comments and declarations mixed with code On the other hand C99 introduced a number of new features that C did not support that were incompatible or redundant in C such as variablelength arrays native complexnumber types however the std complex class in the C standard library provides similar functionality although not codecompatible designated initializers compound literals and the restrict keyword 72 Some of the C99introduced features were included in the subsequent version of the C standard C11 out of those which were not redundant 73 74 75 However the C11 standard introduces new incompatibilities such as disallowing assignment of a string literal to a character pointer which remains valid C To intermix C and C code any function declaration or definition that is to be called fromused both in C and C must be declared with C linkage by placing it within an extern C block Such a function may not rely on features depending on name mangling ie function overloading Criticism edit Main article Criticism of C Despite its widespread adoption some notable programmers have criticized the C language including Linus Torvalds 76 Richard Stallman 77 Joshua Bloch Ken Thompson 78 79 80 and Donald Knuth 81 82 One of the most often criticised points of C is its perceived complexity as a language with the criticism that a large number of nonorthogonal features in practice necessitates restricting code to subset of C thus eschewing the readability benefits of common style and idioms As expressed by Joshua Bloch I think C was pushed well beyond its complexity threshold and yet there are a lot of people programming it But what you do is you force people to subset it So almost every shop that I know of that uses C says Yes were using C but were not doing multipleimplementation inheritance and were not using operator overloading There are just a bunch of features that youre not going to use because the complexity of the resulting code is too high And I dont think its good when you have to start doing that You lose this programmer portability where everyone can read everyone elses code which I think is such a good thing Donald Knuth 1993 commenting on prestandardized C who said of Edsger Dijkstra that to think of programming in C would make him physically ill 81 82 The problem that I have with them today is that C is too complicated At the moment its impossible for me to write portable code that I believe would work on lots of different systems unless I avoid all exotic features Whenever the C language designers had two competing ideas as to how they should solve some problem they said OK well do them both So the language is too baroque for my taste Ken Thompson who was a colleague of Stroustrup at Bell Labs gives his assessment 79 80 It certainly has its good points But by and large I think its a bad language It does a lot of things half well and its just a garbage heap of ideas that are mutually exclusive Everybody I know whether its personal or corporate selects a subset and these subsets are different So its not a good language to transport an algorithmto say I wrote it here take it Its way too big way too complex And its obviously built by a committee Stroustrup campaigned for years and years and years way beyond any sort of technical contributions he made to the language to get it adopted and used And he sort of ran all the standards committees with a whip and a chair And he said no to no one He put every feature in that language that ever existed It wasnt cleanly designedit was just the union of everything that came along And I think it suffered drastically from that However Brian Kernighan also a colleague at Bell Labs disputes this assessment 83 C has been enormously influential Lots of people say C is too big and too complicated etc etc but in fact it is a very powerful language and pretty much everything that is in there is there for a really sound reason it is not somebody doing random invention it is actually people trying to solve real world problems Now a lot of the programs that we take for granted today that we just use are C programs Stroustrup himself comments that C semantics are much cleaner than its syntax within C there is a much smaller and cleaner language struggling to get out 84 Other complaints may include a lack of reflection or garbage collection long compilation times perceived feature creep 85 and verbose error messages particularly from template metaprogramming 86 See also edit Computer programming portal Comparison of programming languages List of C compilers Outline of C C Libraries category References edit Naugler David May 2007 C 20 for C and Java programmer conference workshop Journal of Computing Sciences in Colleges 22 5 Although C has been strongly influenced by Java it has also been strongly influenced by C and is best viewed as a descendant of both C and Java mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em Chapel spec Acknowledgements PDF Cray Inc 1 October 2015 Retrieved 14 January 2016 Rich Hickey QA by Michael Fogus Archived from the original on 11 January 2017 Retrieved 11 January 2017 Harry H Chaudhary 28 July 2014 Cracking The Java Programming Interview 2000 Java Interview QueAns Retrieved 29 May 2016 9 Classes Python 364 documentation docspythonorg Retrieved 9 January 2018 Stroustrup Bjarne 1997 1 The C Programming Language Third ed ISBN 0201889544 OCLC 59193992 a b c Stroustrup B 6 May 2014 LectureThe essence of C University of Edinburgh Retrieved 12 June 2015 Stroustrup Bjarne 17 February 2014 C Applications stroustrupcom Retrieved 5 May 2014 a b ISOIEC 148822017 International Organization for Standardization Bjarne Stroustrups Homepage wwwstroustrupcom C Where its heading a b Stroustrup Bjarne 7 March 2010 Bjarne Stroustrups FAQ When was C invented stroustrupcom Retrieved 16 September 2010 a b Stroustrup Bjarne Evolving a language in and for the real world C 19912006 PDF a b c Stroustrup Bjarne A History of C 1979 1991 PDF Stroustrup Bjarne The C Programming Language First ed Retrieved 16 September 2010 Stroustrup Bjarne The C Programming Language Second ed Retrieved 16 September 2010 a b httpsherbsuttercom20160630tripreportsummerisocstandardsmeetingoulu the next standard after C17 will be C20 Latest news TIOBE Index TIOBE The Software Quality Company Np nd Web 5 June 2017 Krill Paul Java C C face growing competition in popularity InfoWorld InfoWorld 10 February 2017 Web 5 June 2017 httpswwwnaeedu177355aspx Computer Science Pioneer Bjarne Stroustrup to Receive the 2018 Charles Stark Draper Prize for Engineering Bjarne Stroustrups FAQ Where did the name C come from Retrieved 16 January 2008 C For C Programmers Northeastern University Archived from the original on 17 November 2010 Retrieved 7 September 2015 ISOIEC 148821998 International Organization for Standardization ISOIEC 148822003 International Organization for Standardization a b ISOIEC 148822011 International Organization for Standardization ISOIEC 148822014 International Organization for Standardization We have an international standard C0x is unanimously approved Sutters Mill The Future of C We have C14 Standard C Trip report Summer ISO C standards meeting Toronto ISOIEC TR 180152006 International Organization for Standardization ISOIEC TR 197682007 International Organization for Standardization ISOIEC TR 291242010 International Organization for Standardization ISOIEC TR 247332011 International Organization for Standardization ISOIEC TS 188222015 International Organization for Standardization ISOIEC TS 195702015 International Organization for Standardization ISOIEC TS 198412015 International Organization for Standardization ISOIEC TS 195682015 International Organization for Standardization ISOIEC TS 192172015 International Organization for Standardization ISOIEC TS 195712016 International Organization for Standardization ISOIEC TS 195682017 International Organization for Standardization ISOIEC TS 214252017 International Organization for Standardization ISOIEC TS 222772017 International Organization for Standardization ISOIEC TS 192162018 International Organization for Standardization ISOIEC TS 215442018 International Organization for Standardization ISOIEC TS 195702018 International Organization for Standardization See a list at httpsencppreferencecomwcppexperimental visited 15 February 2019 B Stroustrup interviewed by Sergio De Simone 30 April 2015 Stroustrup Thoughts on C17 An Interview Retrieved 8 July 2015 Stroustrup Bjarne 2000 The C Programming Language Special ed AddisonWesley p46 ISBN 0201700735 Stroustrup Bjarne Open issues for The C Programming Language 3rd Edition This code is copied directly from Bjarne Stroustrups errata page p 633 He addresses the use of n rather than stdendl Also see Can I write void main for an explanation of the implicit return 0 in the main function This implicit return is not available in other functions ISO IEC Programming Languages C11 Draft n3797 Archived 2 October 2018 at the Wayback Machine 37 Storage duration basicstc ISO IEC Programming Languages C11 Draft n3797 Archived 2 October 2018 at the Wayback Machine 371 Static Storage duration basicstcstatic ISO IEC Programming Languages C11 Draft n3797 Archived 2 October 2018 at the Wayback Machine 372 Thread Storage duration basicstcthread ISO IEC Programming Languages C11 Draft n3797 Archived 2 October 2018 at the Wayback Machine 373 Automatic Storage duration basicstcauto ISO IEC Programming Languages C11 Draft n3797 Archived 2 October 2018 at the Wayback Machine 374 Dynamic Storage duration basicstcdynamic a b Nobody Understands C Part 5 Template Code Bloat articlesemptycratecom EmptyCrate Software Travel Stuff 6 May 2008 Retrieved 8 March 2010 On occasion you will read or hear someone talking about C templates causing code bloat I was thinking about it the other day and thought to myself self if the code does exactly the same thing then the compiled code cannot really be any bigger can it And what about compiled code size Each were compiled with the command g filenamecpp O3 Nontemplate version 8140 bytes template version 8028 bytes Sutter Herb Alexandrescu Andrei 2004 C Coding Standards 101 Rules Guidelines and Best Practices AddisonWesley Henricson Mats Nyquist Erik 1997 Industrial Strength C Prentice Hall ISBN 0131209655 Stroustrup Bjarne 2000 The C Programming Language Special ed AddisonWesley p310 ISBN 0201700735 A virtual member function is sometimes called a method Mycroft Alan 2013 C and C Exceptions Templates PDF Cambridge Computer Laboratory Course Materials 201314 Retrieved 30 August 2016 Stroustrup Bjarne 2013 The C Programming Language Addison Wesley p345 ISBN 9780321563842 Stroustrup Bjarne 2013 The C Programming Language Addison Wesley pp363365 ISBN 9780321563842 Stroustrup Bjarne 2013 The C Programming Language Addison Wesley pp345 363 ISBN 9780321563842 Google C Style Guide Retrieved 25 June 2019 LLVM Coding Standards LLVM 9 documentation Retrieved 25 June 2019 Coding Conventions Qt Wiki Retrieved 26 June 2019 Stroustrup Bjarne 2013 The C Programming Language Addison Wesley pp344 370 ISBN 9780321563842 Stroustrup Bjarne 2013 The C Programming Language Addison Wesley p349 ISBN 9780321563842 Graziano Lo Russo 2008 An Interview with A Stepanov stlportorg Retrieved 8 October 2015 C ABI Summary 20 March 2001 Retrieved 30 May 2006 Bjarne Stroustrups FAQ Is C a subset of C Retrieved 5 May 2014 C9X The New C Standard Retrieved 27 December 2008 C0x Support in GCC Retrieved 12 October 2010 C0x Core Language Features In VC10 The Table Retrieved 12 October 2010 Clang C98 C11 and C14 Status Clangllvmorg 12 May 2013 Retrieved 10 June 2013 Re RFC Convert builinmailinfoc to use The Better String Library Mailing list 6 September 2007 Retrieved 31 March 2015 Re Efforts to attract more users Mailing list 12 July 2010 Retrieved 31 March 2015 Andrew Binstock 18 May 2011 Dr Dobbs Interview with Ken Thompson Retrieved 7 February 2014 a b Peter Seibel 16 September 2009 Coders at Work Reflections on the Craft of Programming Apress pp475476 ISBN 9781430219484 a b httpsgigamonkeyswordpresscom20091016coderscplusplus a b httpswwwdrdobbscomarchitectureanddesignaninterviewwithdonaldknuth228700500 a b httptexloriafrlitteknuthinterview Brian Kernighan 18 July 2018 Brian Kernighan QA Computerphile httpwwwstroustrupcombsfaqhtmlreallysaythat Pike Rob 2012 Less is exponentially more Kreinin Yossi 13 October 2009 Defective C Retrieved 3 February 2016 Further reading edit mwparseroutput refbeginfontsize90marginbottom05emmwparseroutput refbeginhangingindentsgtulliststyletypenonemarginleft0mwparseroutput refbeginhangingindentsgtulgtlimwparseroutput refbeginhangingindentsgtdlgtddmarginleft0paddingleft32emtextindent32emliststylenonemwparseroutput refbegin100fontsize100 Abrahams David Gurtovoy Aleksey C Template Metaprogramming Concepts Tools and Techniques from Boost and Beyond AddisonWesley ISBN 0321227255 Alexandrescu Andrei 2001 Modern C Design Generic Programming and Design Patterns Applied AddisonWesley ISBN 0201704315 Alexandrescu Andrei Sutter Herb 2004 C Design and Coding Standards Rules and Guidelines for Writing Programs AddisonWesley ISBN 0321113586 Becker Pete 2006 The C Standard Library Extensions A Tutorial and Reference AddisonWesley ISBN 0321412990 Brokken Frank 2010 C Annotations University of Groningen ISBN 9036704707 Coplien James O 1994 reprinted with corrections original year of publication 1992 Advanced C Programming Styles and Idioms ISBN 0201548550 Dewhurst Stephen C 2005 C Common Knowledge Essential Intermediate Programming AddisonWesley ISBN 0321321928 Information Technology Industry Council 15 October 2003 Programming languages C Second ed Geneva ISOIEC 148822003E Josuttis Nicolai M 2012 The C Standard Library A Tutorial and Reference Second ed AddisonWesley ISBN 0321623215 Koenig Andrew Moo Barbara E 2000 Accelerated C Practical Programming by Example AddisonWesley ISBN 020170353X Lippman Stanley B Lajoie Josée Moo Barbara E 2011 C Primer Fifth ed AddisonWesley ISBN 0321714113 Lippman Stanley B 1996 Inside the C Object Model AddisonWesley ISBN 0201834545 Meyers Scott 2005 Effective C Third ed AddisonWesley ISBN 0321334876 Stroustrup Bjarne 2013 The C Programming Language Fourth ed AddisonWesley ISBN 9780321563842 Stroustrup Bjarne 1994 The Design and Evolution of C AddisonWesley ISBN 0201543303 Stroustrup Bjarne 2014 Programming Principles and Practice Using C Second ed AddisonWesley ISBN 9780321992789 Sutter Herb 2001 More Exceptional C 40 New Engineering Puzzles Programming Problems and Solutions AddisonWesley ISBN 020170434X Sutter Herb 2004 Exceptional C Style AddisonWesley ISBN 0201760428 Vandevoorde David Josuttis Nicolai M 2003 C Templates The complete Guide AddisonWesley ISBN 0201734842 External links edit C at Wikipedias sister projects Definitions from Wiktionary Media from Wikimedia Commons Quotations from Wikiquote Textbooks from Wikibooks Resources from Wikiversity JTC1SC22WG21 the ISOIEC C Standard Working Group Standard C Foundation a nonprofit organization that promotes the use and understanding of standard C Bjarne Stroustrup is a director of the organization v t e ISO standards mwparseroutput noboldfontweightnormal by standard number List of ISO standards ISO romanizations IEC standards 19999 1 2 3 4 5 6 7 9 16 17 31 0 1 2 3 4 5 6 7 8 9 10 11 12 13 128 216 217 226 228 233 259 269 302 306 361 428 500 518 519 639 1 2 3 5 6 646 657 668 690 704 732 764 838 843 860 898 965 999 1000 1004 1007 10731 1155 1413 1538 1629 1745 1989 2014 2015 2022 2033 2047 2108 2145 2146 2240 2281 2533 2709 2711 2720 2788 2848 2852 3029 3103 3166 1 2 3 3297 3307 3601 3602 3864 3901 3950 3977 4031 4157 4165 4217 4909 5218 5426 5427 5428 5725 5775 5776 5800 5807 5964 6166 6344 6346 6385 6425 6429 6438 6523 6709 6943 7001 7002 7010 7027 7064 7098 7185 7200 7498 1 7637 7736 7810 7811 7812 7813 7816 7942 8000 8093 8178 8217 8373 85011 8571 8583 8601 8613 8632 8651 8652 8691 88058806 8807 88205 8859 1 2 3 4 5 6 7 8 8I 9 10 11 12 13 14 15 16 8879 90009001 9036 9075 9126 9141 9227 9241 9293 9314 9362 9407 9506 9529 9564 95929593 9594 9660 97971 9897 9899 9945 9984 9985 9995 1000019999 10005 10006 10007 10116 101183 10160 10161 10165 10179 10206 10218 10303 11 21 22 28 238 10383 10487 10585 10589 10646 10664 10746 10861 10957 10962 10967 11073 11170 11179 11404 11544 11783 11784 11785 11801 11898 11940 2 11941 11941 TR 11992 12006 12182 12207 122342 13211 1 2 13216 13250 13399 134062 13450 13485 13490 13567 13568 13584 13616 14000 14031 14224 14289 14396 14443 14496 2 3 6 10 11 12 14 17 20 14644 14649 14651 14698 14750 14764 14882 14971 15022 15189 15288 15291 15292 15398 15408 15444 3 15445 15438 15504 15511 15686 15693 15706 2 15707 15897 15919 15924 15926 15926 WIP 15930 16023 16262 163551 166122 16750 16949 TS 17024 17025 17100 17203 17369 17442 17799 18000 18004 18014 18245 18629 18916 19005 19011 19092 1 2 19114 19115 19125 19136 19407 19439 19500 19501 19502 19503 19505 19506 19507 19508 19509 19510 19600 19752 19757 19770 197751 197945 19831 20000 20000 20022 20121 20400 21000 21047 21500 218272002 22000 23270 23271 23360 24517 24613 24617 24707 25178 25964 26000 26262 26300 26324 27000 series 27000 27001 27002 27006 27729 28000 29110 29148 291992 29500 30170 31000 32000 37001 38500 40500 42010 45001 50001 55000 80000 1 2 3 Category v t e Programming languages Comparison Timeline History APL Assembly BASIC C C C COBOL Elixir Fortran Go Groovy Haskell Java JavaScript JS Julia Kotlin Lisp Lua MATLAB ObjectiveC OCaml Pascal Perl PHP Python R Ruby Rust Scala Shell Smalltalk Swift TypeScript Visual Basic NET VBNET more Category Lists Alphabetical Categorical Generational NonEnglishbased v t e C C C98 C03 C11 C14 C17 C20 Features Classes Exception handling Function overloading new and delete Operator overloading Operators Templates Standard Library IO Streams Smart pointers STL Strings Compilers Comparison of C compilers Borland C Borland Turbo C CBuilder Clang GCC Intel C Compiler Oracle Solaris Studio Visual C Watcom CC IDEs Comparison of C IDEs Anjuta CLion CodeBlocks CodeLite Eclipse Geany Microsoft Visual Studio NetBeans KDevelop Qt Creator Superset languages ObjectiveC CCLI CCX Ch SYCL Dialects Embedded C Relative to other languages Compatibility of C and C Comparison of Java and C Comparison of ALGOL 68 and C Comparison of programming languages Category v t e List of International Electrotechnical Commission standards IEC standards IEC 60027 IEC 60034 IEC 60038 IEC 60062 IEC 60063 IEC 60068 IEC 60112 IEC 60228 IEC 60269 IEC 60297 IEC 60309 IEC 60320 IEC 60364 IEC 60446 IEC 60559 IEC 60601 IEC 60870 IEC 608705 IEC 608706 IEC 609061 IEC 60908 IEC 60929 IEC 60958 AES3 SPDIF IEC 61030 IEC 61131 IEC 611313 IEC 61158 IEC 61162 IEC 61334 IEC 61346 IEC 61355 IEC 61360 IEC 61400 IEC 61499 IEC 61508 IEC 61511 IEC 61850 IEC 61851 IEC 61883 IEC 61960 IEC 61968 IEC 61970 IEC 620144 IEC 62056 IEC 62061 IEC 62196 IEC 62262 IEC 62264 IEC 62304 IEC 62325 IEC 62351 IEC 62365 IEC 62366 IEC 62379 IEC 62386 IEC 62455 IEC 62680 IEC 62682 IEC 62700 ISOIEC standards ISOIEC 646 ISOIEC 2022 ISOIEC 4909 ISOIEC 5218 ISOIEC 6429 ISOIEC 6523 ISOIEC 7810 ISOIEC 7811 ISOIEC 7812 ISOIEC 7813 ISOIEC 7816 ISOIEC 7942 ISOIEC 8613 ISOIEC 8632 ISOIEC 8652 ISOIEC 8859 ISOIEC 9126 ISOIEC 9293 ISOIEC 9592 ISOIEC 9593 ISOIEC 9899 ISOIEC 9945 ISOIEC 9995 ISOIEC 10021 ISOIEC 10116 ISOIEC 10165 ISOIEC 10179 ISOIEC 10646 ISOIEC 10967 ISOIEC 11172 ISOIEC 11179 ISOIEC 11404 ISOIEC 11544 ISOIEC 11801 ISOIEC 12207 ISOIEC 13250 ISOIEC 13346 ISOIEC 135225 ISOIEC 13568 ISOIEC 13818 ISOIEC 14443 ISOIEC 14496 ISOIEC 14882 ISOIEC 15288 ISOIEC 15291 ISOIEC 15408 ISOIEC 15444 ISOIEC 15445 ISOIEC 15504 ISOIEC 15511 ISOIEC 15693 ISOIEC 15897 ISOIEC 15938 ISOIEC 16262 ISOIEC 17024 ISOIEC 17025 ISOIEC 18000 ISOIEC 18004 ISOIEC 18014 ISOIEC 19752 ISOIEC 19757 ISOIEC 19770 ISOIEC 19788 ISOIEC 20000 ISOIEC 21000 ISOIEC 21827 ISOIEC 23000 ISOIEC 23003 ISOIEC 23008 ISOIEC 23270 ISOIEC 23360 ISOIEC 24707 ISOIEC 24727 ISOIEC 24744 ISOIEC 24752 ISOIEC 26300 ISOIEC 27000 ISOIEC 27000series ISOIEC 27002 ISOIEC 27040 ISOIEC 29119 ISOIEC 33001 ISOIEC 38500 ISOIEC 42010 ISOIEC 80000 Related International Electrotechnical Commission Authority control BNE XX540250 BNF cb12139768z data GND 41939098 LCCN sh87007505 SUDOC 029859778