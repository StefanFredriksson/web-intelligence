Turing completeness The ability of a theoretical computing system to simulate a Turing machine For the usage of this term in the theory of relative computability by oracle machines see Turing reduction In computability theory a system of datamanipulation rules such as a computers instruction set a programming language or a cellular automaton is said to be Turing complete or computationally universal if it can be used to simulate any Turing machine This means that this system is able to recognize or decide other datamanipulation rule sets Turing completeness is used as a way to express the power of such a datamanipulation rule set Virtually all programming languages today are Turing complete The concept is named after English mathematician and computer scientist Alan Turing A related concept is that of Turing equivalence two computers P and Q are called equivalent if P can simulate Q and Q can simulate P The ChurchTuring thesis conjectures that any function whose values can be computed by an algorithm can be computed by a Turing machine and therefore that if any realworld computer can simulate a Turing machine it is Turing equivalent to a Turing machine A universal Turing machine can be used to simulate any Turing machine and by extension the computational aspects of any possible realworld computer NB 1 To show that something is Turing complete it is enough to show that it can be used to simulate some Turing complete system For example an imperative language is Turing complete if it has conditional branching eg if and goto statements or a branch if zero instruction see one instruction set computer and the ability to change an arbitrary amount of memory eg the ability to maintain an arbitrary number of data items Of course no physical system can have infinite memory but if the limitation of finite memory is ignored most programming languages are otherwise Turing complete Contents 1 Nonmathematical usage 2 Formal definitions 3 History 4 Computability theory 5 Turing oracles 6 Digital physics 7 Examples 71 Unintentional Turing completeness 8 NonTuringcomplete languages 81 Data languages 9 See also 10 Notes 11 References 12 Further reading 13 External links Nonmathematical usage edit In colloquial usage the terms Turing complete or Turing equivalent are used to mean that any realworld generalpurpose computer or computer language can approximately simulate the computational aspects of any other realworld generalpurpose computer or computer language Real computers constructed so far can be functionally analyzed like a singletape Turing machine the tape corresponding to their memory thus the associated mathematics can apply by abstracting their operation far enough However real computers have limited physical resources so they are only linear bounded automaton complete In contrast a universal computer is defined as a device with a Turing complete instruction set infinite memory and infinite available time Formal definitions edit In computability theory several closely related terms are used to describe the computational power of a computational system such as an abstract machine or programming language Turing completeness A computational system that can compute every Turing computable function is called Turingcomplete or Turingpowerful Alternatively such a system is one that can simulate a universal Turing machine Turing equivalence A Turingcomplete system is called Turing equivalent if every function it can compute is also Turing computable ie it computes precisely the same class of functions as do Turing machines Alternatively a Turingequivalent system is one that can simulate and be simulated by a universal Turing machine All known Turingcomplete systems are Turing equivalent which adds support to the ChurchTuring thesis Computational universality A system is called universal with respect to a class of systems if it can compute every function computable by systems in that class or can simulate each of those systems Typically the term universality is tacitly used with respect to a Turingcomplete class of systems The term weakly universal is sometimes used to distinguish a system eg a cellular automaton whose universality is achieved only by modifying the standard definition of Turing machine so as to include input streams with infinitely many 1s History edit Turing completeness is significant in that every realworld design for a computing device can be simulated by a universal Turing machine The ChurchTuring thesis states that this is a law of mathematics that a universal Turing machine can in principle perform any calculation that any other programmable computer can This says nothing about the effort needed to write the program or the time it may take for the machine to perform the calculation or any abilities the machine may possess that have nothing to do with computation Charles Babbage s analytical engine 1830s would have been the first Turingcomplete machine if it had been built at the time it was designed Babbage appreciated that the machine was capable of great feats of calculation including primitive logical reasoning but he did not appreciate that no other machine could do better From the 1830s until the 1940s mechanical calculating machines such as adders and multipliers were built and improved but they could not perform a conditional branch and therefore were not Turing complete In the late 19th century Leopold Kronecker formulated notions of computability defining primitive recursive functions These functions can be calculated by rote computation but they are not enough to make a universal computer because the instructions which compute them do not allow for an infinite loop In the early 20th century David Hilbert led a program to axiomatize all of mathematics with precise axioms and precise logical rules of deduction which could be performed by a machine Soon it became clear that a small set of deduction rules are enough to produce the consequences of any set of axioms These rules were proved by Kurt Gödel in 1930 to be enough to produce every theorem The actual notion of computation was isolated soon after starting with Gödels incompleteness theorem This theorem showed that axiom systems were limited when reasoning about the computation which deduces their theorems Church and Turing independently demonstrated that Hilberts Entscheidungsproblem decision problem was unsolvable 1 thus identifying the computational core of the incompleteness theorem This work along with Gödels work on general recursive functions established that there are sets of simple instructions which when put together are able to produce any computation The work of Gödel showed that the notion of computation is essentially unique In 1941 Konrad Zuse completed the Z3 computer the first working Turingcomplete machine this was the first digital computer in the modern sense 2 Computability theory edit Computability theory characterizes problems as having or not having computational solutionsThe first result of computability theory is that there exist problems for which it is impossible to predict what a Turingcomplete system will do over an arbitrarily long time The classic example is the halting problem create an algorithm which takes as input a a program in some Turingcomplete language and b some data to be fed to that program and which determines whether the program operating on the input will eventually stop or will continue forever It is trivial to create an algorithm that can do this for some inputs but impossible to do this in general For any characteristic of the programs eventual output it is impossible to determine whether this characteristic will hold This impossibility poses problems when analyzing realworld computer programs For example one cannot write a tool that entirely protects programmers from writing infinite loops or protects users from supplying input that would cause infinite loops One can instead limit a program to executing only for a fixed period of time timeout or limit the power of flow control instructions for example providing only loops that iterate over the items of an existing array However another theorem shows that there are problems solvable by Turingcomplete languages that cannot be solved by any language with only finite looping abilities ie any language that guarantees every program will eventually finish to a halt So any such language is not Turing complete For example a language in which programs are guaranteed to complete and halt cannot compute the computable function which is produced by Cantors diagonal argument on all computable functions in that language Turing oracles edit Main article Oracle machine A computer with access to an infinite tape of data may be more powerful than a Turing machine for instance the tape might contain the solution to the halting problem or some other Turingundecidable problem Such an infinite tape of data is called a Turing oracle Even a Turing oracle with random data is not computable with probability 1 since there are only countably many computations but uncountably many oracles So a computer with a random Turing oracle can compute things that a Turing machine cannot Digital physics edit See also ChurchTuring thesis Philosophical implications This section does not cite any sources Please help improve this section by adding citations to reliable sources Unsourced material may be challenged and removed Find sources Turing completeness news newspapers books scholar JSTOR November 2017 Learn how and when to remove this template message All known laws of physics have consequences that are computable by a series of approximations on a digital computer A hypothesis called digital physics states that this is no accident because the universe itself is computable on a universal Turing machine This would imply that no computer more powerful than a universal Turing machine can be built physically Examples edit The computational systems algebras calculi that are discussed as Turing complete systems are those intended for studying theoretical computer science They are intended to be as simple as possible so that it would be easier to understand the limits of computation Here are a few Automata theory Formal grammar language generators Formal language language recognizers Lambda calculus PostTuring machines Process calculus Most programming languages conventional and unconventional are Turingcomplete This includes All generalpurpose languages in wide use Procedural programming languages such as C Pascal Objectoriented languages such as Java Smalltalk or C Multiparadigm languages such as Ada C Common Lisp Object Pascal Python R Most languages using less common paradigms Functional languages such as Lisp and Haskell Logic programming languages such as Prolog generalpurpose macro processor such as m4 Declarative languages such as XSLT 3 VHDL and other hardware description languages Esoteric programming languages a form of mathematical recreation in which programmers work out how to achieve basic programming constructs in an extremely difficult but mathematically Turingequivalent language Some rewrite systems are Turingcomplete Turing completeness is an abstract statement of ability rather than a prescription of specific language features used to implement that ability The features used to achieve Turing completeness can be quite different Fortran systems would use loop constructs or possibly even goto statements to achieve repetition Haskell and Prolog lacking looping almost entirely would use recursion Most programming languages are describing computations on von Neumann architectures which have memory RAM and register and a control unit These two elements make this architecture Turingcomplete Even pure functional languages are Turingcomplete 4 NB 2 Turing completeness in declarative SQL is implemented through recursive common table expressions 5 Unsurprisingly procedural extensions to SQL PLSQL etc are also Turing complete This illustrates one reason why relatively powerful nonTuringcomplete languages are rare the more powerful the language is initially the more complex are the tasks to which it is applied and the sooner its lack of completeness becomes perceived as a drawback encouraging its extension until it is Turing complete The untyped lambda calculus is Turingcomplete but many typed lambda calculi including System F are not The value of typed systems is based in their ability to represent most typical computer programs while detecting more errors Rule 110 and Conways Game of Life both cellular automata are Turing complete Unintentional Turing completeness edit Some games and other software are Turingcomplete by accident Video games Dwarf Fortress 6 Minecraft 7 selfpublished source Minesweeper 8 selfpublished source LittleBigPlanet 7 Baba is You citation needed Factorio 9 Cities Skylines 10 Opus Magnum 11 Card games Magic The Gathering 7 12 Zeroperson games simulations Conways Game of Life 13 selfpublished source 14 Computational languages HTML5 CSS3 15 16 C Templates 17 18 Computer hardware x86 MOV instruction 19 NonTuringcomplete languages edit Many computational languages exist that are not Turing complete One such example is the set of regular languages which are generated by regular expressions and which are recognized by finite automata A more powerful but still not Turingcomplete extension of finite automata is the category of pushdown automata and contextfree grammars which are commonly used to generate parse trees in an initial stage of program compiling Further examples include some of the early versions of the pixel shader languages embedded in Direct3D and OpenGL extensions citation needed In total functional programming languages such as Charity and Epigram all functions are total and must terminate Charity uses a type system and control constructs based on category theory whereas Epigram uses dependent types The LOOP language is designed so that it computes only the functions that are primitive recursive All of these compute proper subsets of the total computable functions since the full set of total computable functions is not computably enumerable Also since all functions in these languages are total algorithms for recursively enumerable sets cannot be written in these languages in contrast with Turing machines Although untyped lambda calculus is Turingcomplete simply typed lambda calculus is not Data languages edit The notion of Turingcompleteness does not apply to languages such as XML HTML JSON YAML and Sexpressions because they are typically used to represent structured data not describe computation These are sometimes referred to as markup languages or more properly as container languages or data description languages citation needed See also edit Algorithmic information theory Chomsky hierarchy ChurchTuring thesis Computability theory Inner loop Loop computing Machine that always halts Rices Theorem s mn theorem Stephen Wolfram s A New Kind of Science Principle of Computational Equivalence Structured program theorem Turing tarpit Notes edit A UTM cannot simulate noncomputational aspects such as IO The following book provides an introduction for computation models Rauber Thomas Rünger Gudula 2013 Parallel programming for multicore and cluster systems 2nd ed Springer ISBN 9783642378010 mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput idlockfree amwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput idlocklimited amwparseroutput idlockregistration amwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput idlocksubscription amwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em References edit Hodges Andrew 1992 1983 Alan Turing The Enigma London Burnett Books p111 ISBN 0045100608 Rojas Raul 1998 How to make Zuses Z3 a universal computer Annals of the History of Computing 20 3 5154 doi 10110985707574 Lyons Bob 30 March 2001 Universal Turing Machine in XSLT B2B Integration Solutions from Unidex Archived from the original on 17 July 2011 Retrieved 5 July 2010 Boyer Robert S Moore J Strother May 1983 A Mechanical Proof of the Turing Completeness of Pure Lisp PDF Technical report Institute for Computing Science University of Texas at Austin 37 Archived PDF from the original on 22 September 2017 Dfetter Breinbaas 8 August 2011 Cyclic Tag System PostgreSQL wiki Retrieved 10 September 2014 Cedotal Andrew 16 April 2010 Man Uses Worlds Most Difficult Computer Game to Create A Working Turing Machine The Mary Sue Archived from the original on 27 June 2015 Retrieved 2 June 2015 a b c Zwinkau Andreas 20 October 2013 Accidentally TuringComplete Andreas Zwinkau Archived from the original on 5 June 2015 Retrieved 2 June 2015 Kaye Richard 31 May 2007 Infinite versions of minesweeper are Turing complete PDF Richard Kayes Minesweeper Pages Archived PDF from the original on 2 February 2017 Retrieved 14 March 2017 Talbot Carrie 16 July 2019 A Cities Skylines player has built ingame logic gates to create a computer powered by poop PCGamesN Retrieved 16 July 2019 Plunkett Luke 16 July 2019 Cities Skylines Map Becomes A PoopPowered Computer Kotaku Retrieved 16 July 2019 Caldwell Brendan 20 November 2017 Opus Magnum player makes an alchemical computer Rock Paper Shotgun Retrieved 23 September 2019 Alex Churchill Stella Biderman Austin Herrick 2019 Magic The Gathering is Turing Complete arXiv 190409828 csAI Rendell Paul 12 January 2005 A Turing Machine in Conways Game of Life RendellAttic Archived from the original on 8 July 2009 Retrieved 22 June 2009 Calcyman Johnston Nathaniel 16 June 2009 Spartan universal computerconstructor LifeWiki Retrieved 22 June 2009 FoxEpstein Eli 26 August 2019 Experimentations with Abstract Machines retrieved 26 August 2019 CSS3 proven to be turing complete Accodeing to you 2015 Retrieved 26 August 2019 Meyers Scott Scott Douglas 2005 Effective C 55 specific ways to improve your programs and designs 3rd ed Upper Saddle River NJ AddisonWesley ISBN 0321334876 OCLC 60425273 See History of TMP on Wikibooks Dolan Stephen mov is Turingcomplete PDF stedolannet Retrieved 9 May 2019 Further reading edit mwparseroutput refbeginfontsize90marginbottom05emmwparseroutput refbeginhangingindentsgtulliststyletypenonemarginleft0mwparseroutput refbeginhangingindentsgtulgtlimwparseroutput refbeginhangingindentsgtdlgtddmarginleft0paddingleft32emtextindent32emliststylenonemwparseroutput refbegin100fontsize100 Brainerd WS Landweber LH 1974 Theory of Computation Wiley ISBN 0471095850 Giles Jim 24 October 2007 Simplest universal computer wins student 25000 New Scientist Herken Rolf ed 1995 The Universal Turing Machine A HalfCentury Survey Springer Verlag ISBN 3211826378 Turing A M 1936 On Computable Numbers with an Application to the Entscheidungsproblem PDF Proceedings of the London Mathematical Society 2 42 23065 doi 101112plmss2421230 Turing AM 1938 On Computable Numbers with an Application to the Entscheidungsproblem A correction Proceedings of the London Mathematical Society 2 43 5446 doi 101112plmss2436544 External links edit Turing Complete wikic2com 