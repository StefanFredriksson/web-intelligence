Software engineering See also Computer engineering Application of systematic approaches to developing software Software development Core activities Processes Requirements Design Engineering Construction Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DevOps DAD DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TSP OpenUP UP XP Supporting disciplines Configuration management Documentation Software quality assurance SQA Project management User experience Practices ATDD BDD CCO CI CD DDD PP SBE Standup TDD Tools Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing Standards and Bodies of Knowledge BABOK CMMI IEEE standards ISO 9001 ISOIEC standards PMBOK SWEBOK ITIL Glossaries Artificial intelligence Computer science Electrical and electronics engineering v t e Software engineering is the systematic application of engineering approaches to the development of software 1 2 3 1 2 3 Software engineering is a direct subfield of engineering and has an overlap with computer science and management science 4 It is also considered a part of overall systems engineering Contents 1 History 2 Definitions 3 Fields 31 Software requirements 32 Software design 33 Software development 34 Software testing 35 Software maintenance 4 Education 5 Profession 51 Employment 52 Certification 53 Impact of globalization 6 Controversy 61 Criticism 7 See also 8 References 81 Citations 82 Sources 9 Further reading 10 External links History edit Main article History of software engineering When the first digital computers appeared in the early 1940s 5 the instructions to make them operate were wired into the machine Practitioners quickly realized that this design was not flexible and came up with the stored program architecture or von Neumann architecture Thus the division between hardware and software began with abstraction being used to deal with the complexity of computing Programming languages started to appear in the early 1950s 6 and this was also another major step in abstraction Major languages such as Fortran ALGOL and COBOL were released in the late 1950s to deal with scientific algorithmic and business problems respectively David Parnas introduced the key concept of modularity and information hiding in 1972 7 to help programmers deal with the everincreasing complexity of software systems The origins of the term software engineering have been attributed to various sources The term software engineering appeared in a list of services offered by companies in the June 1965 issue of COMPUTERS and AUTOMATION and was used more formally in the August 1966 issue of Communications of the ACM Volume 9 number 8 letter to the ACM membership by the ACM President Anthony A Oettinger 8 it is also associated with the title of a NATO conference in 1968 by Professor Friedrich L Bauer the first conference on software engineering 9 Independently Margaret Hamilton named the discipline software engineering during the Apollo missions to give what they were doing legitimacy 10 At the time there was perceived to be a software crisis 11 12 13 The 40th International Conference on Software Engineering ICSE 2018 celebrates 50 years of Software Engineering with the Plenary Sessions keynotes of Frederick Brooks 14 and Margaret Hamilton 15 In 1984 the Software Engineering Institute SEI was established as a federally funded research and development center headquartered on the campus of Carnegie Mellon University in Pittsburgh Pennsylvania United States Watts Humphrey founded the SEI Software Process Program aimed at understanding and managing the software engineering process The Process Maturity Levels introduced would become the Capability Maturity Model Integration for DevelopmentCMMIDEV which has defined how the US Government evaluates the abilities of a software development team Modern generally accepted bestpractices for software engineering have been collected by the ISOIEC JTC 1SC 7 subcommittee and published as the Software Engineering Body of Knowledge SWEBOK 16 Definitions edit Notable definitions of software engineering include the systematic application of scientific and technological knowledge methods and experience to the design implementation testing and documentation of softwareThe Bureau of Labor Statistics IEEE Systems and software engineering Vocabulary 17 The application of a systematic disciplined quantifiable approach to the development operation and maintenance of software IEEE Standard Glossary of Software Engineering Terminology 18 an engineering discipline that is concerned with all aspects of software production Ian Sommerville 19 the establishment and use of sound engineering principles in order to economically obtain software that is reliable and works efficiently on real machines Fritz Bauer 20 a branch of computer science that deals with the design implementation and maintenance of complex computer programs MerriamWebster 21 The term has also been used less formally as the informal contemporary term for the broad range of activities that were formerly called computer programming and systems analysis 22 as the broad term for all aspects of the practice of computer programming as opposed to the theory of computer programming which is formally studied as a subdiscipline of computer science 23 as the term embodying the advocacy of a specific approach to computer programming one that urges that it be treated as an engineering discipline rather than an art or a craft and advocates the codification of recommended practices 24 Fields edit Main article Outline of software engineering Software requirements edit Main article Software requirements Requirements engineering is about the elicitation analysis specification and validation of requirements for software Software design edit Main article Software design Software design is about the process of defining the architecture components interfaces and other characteristics of a system or component This is also called Software architecture Software development edit Main article Software development Software development the main activity of software construction 1 25 is the combination of programming aka coding verification software testing and debugging A Software development process 1 25 is the definition implementation assessment measurement management change and improvement of the software life cycle process itself It heavily uses Software configuration management 1 25 which is about systematically controlling changes to the configuration and maintaining the integrity and traceability of the configuration and code throughout the system life cycle Modern processes use software versioning Software testing edit Main article Software testing Software testing 1 25 is an empirical technical investigation conducted to provide stakeholders with information about the quality of the product or service under test with different approaches such as unit testing and integration testing It is one aspect of software quality Software maintenance edit Main article Software maintenance Software maintenance 1 25 refers to the activities required to provide costeffective support after shipping the software product Education edit Knowledge of computer programming is a prerequisite for becoming a software engineer In 2004 the IEEE Computer Society produced the SWEBOK which has been published as ISOIEC Technical Report 19792004 describing the body of knowledge that they recommend to be mastered by a graduate software engineer with four years of experience 26 Many software engineers enter the profession by obtaining a university degree or training at a vocational school One standard international curriculum for undergraduate software engineering degrees was defined by the Joint Task Force on Computing Curricula of the IEEE Computer Society and the Association for Computing Machinery and updated in 2014 27 A number of universities have Software Engineering degree programs as of 2010 update there were 244 Campus Bachelor of Software Engineering programs 70 Online programs 230 Masterslevel programs 41 Doctoratelevel programs and 69 Certificatelevel programs in the United States In addition to university education many companies sponsor internships for students wishing to pursue careers in information technology These internships can introduce the student to interesting realworld tasks that typical software engineers encounter every day Similar experience can be gained through military service in software engineering Profession edit Main articles Software engineer and Software engineering professionalism Legal requirements for the licensing or certification of professional software engineers vary around the world In the UK there is no licensing or legal requirement to assume or use the job title Software Engineer In some areas of Canada such as Alberta British Columbia Ontario 28 and Quebec software engineers can hold the Professional Engineer PEng designation andor the Information Systems Professional ISP designation In Europe Software Engineers can obtain the European Engineer EUR ING professional title The United States since 2013 has offered an NCEES Professional Engineer exam for Software Engineering thereby allowing Software Engineers to be licensed and recognized 29 NCEES will end the exam after April 2019 due to lack of participation 30 Mandatory licensing is currently still largely debated and perceived as controversial In some parts of the US such as Texas the use of the term Engineer is regulated by law and reserved only for use by individuals who have a Professional Engineer license The IEEE Computer Society and the ACM the two main USbased professional organizations of software engineering publish guides to the profession of software engineering The IEEEs Guide to the Software Engineering Body of Knowledge 2004 Version or SWEBOK defines the field and describes the knowledge the IEEE expects a practicing software engineer to have The most current SWEBOK v3 is an updated version and was released in 2014 31 The IEEE also promulgates a Software Engineering Code of Ethics 32 Employment edit The U S Bureau of Labor Statistics counted 1365500 software developers holding jobs in the US in 2018 33 Employment of computer and information technology occupations is projected to grow 13 percent from 2016 to 2026 faster than the average for all occupations These occupations are projected to add about 557100 new jobs Demand for these workers will stem from greater emphasis on cloud computing the collection and storage of big data and information security 34 Yet the BLS also says some employment in these occupations are slowing and computer programmers is projected to decline 7 percent from 2016 to 2026 since computer programming can be done from anywhere in the world so companies sometimes hire programmers in countries where wages are lower 35 Due to its relative newness as a field of study formal education in software engineering is often taught as part of a computer science curriculum and many software engineers hold computer science degrees 36 Many software engineers work as employees or contractors Software engineers work with businesses government agencies civilian or military and nonprofit organizations Some software engineers work for themselves as freelancers Some organizations have specialists to perform each of the tasks in the software development process Other organizations require software engineers to do many or all of them In large projects people may specialize in only one role In small projects people may fill several or all roles at the same time Specializations include in industry analysts architects developers testers technical support middleware analysts managers and in academia educators researchers Most software engineers and programmers work 40 hours a week but about 15 percent of software engineers and 11 percent of programmers worked more than 50 hours a week in 2008 Potential injuries in these occupations are possible because like other workers who spend long periods sitting in front of a computer terminal typing at a keyboard engineers and programmers are susceptible to eyestrain back discomfort and hand and wrist problems such as carpal tunnel syndrome 37 Certification edit The Software Engineering Institute offers certifications on specific topics like security process improvement and software architecture 38 IBM Microsoft and other companies also sponsor their own certification examinations Many IT certification programs are oriented toward specific technologies and managed by the vendors of these technologies 39 These certification programs are tailored to the institutions that would employ people who use these technologies Broader certification of general software engineering skills is available through various professional societies As of 2006 update the IEEE had certified over 575 software professionals as a Certified Software Development Professional CSDP 40 In 2008 they added an entrylevel certification known as the Certified Software Development Associate CSDA 41 The ACM had a professional certification program in the early 1980s citation needed which was discontinued due to lack of interest The ACM examined the possibility of professional certification of software engineers in the late 1990s but eventually decided that such certification was inappropriate for the professional industrial practice of software engineering 42 In the UK the British Computer Society has developed a legally recognized professional certification called Chartered IT Professional CITP available to fully qualified members MBCS Software engineers may be eligible for membership of the Institution of Engineering and Technology and so qualify for Chartered Engineer status In Canada the Canadian Information Processing Society has developed a legally recognized professional certification called Information Systems Professional ISP 43 In Ontario Canada Software Engineers who graduate from a Canadian Engineering Accreditation Board CEAB accredited program successfully complete PEOs Professional Engineers Ontario Professional Practice Examination PPE and have at least 48 months of acceptable engineering experience are eligible to be licensed through the Professional Engineers Ontario and can become Professional Engineers PEng 44 The PEO does not recognize any online or distance education however and does not consider Computer Science programs to be equivalent to software engineering programs despite the tremendous overlap between the two This has sparked controversy and a certification war It has also held the number of PEng holders for the profession exceptionally low The vast majority of working professionals in the field hold a degree in CS not SE Given the difficult certification path for holders of nonSE degrees most never bother to pursue the license Impact of globalization edit The initial impact of outsourcing and the relatively lower cost of international human resources in developing third world countries led to a massive migration of software development activities from corporations in North America and Europe to India and later China Russia and other developing countries This approach had some flaws mainly the distance timezone difference that prevented human interaction between clients and developers and the massive job transfer This had a negative impact on many aspects of the software engineering profession For example some students in the developed world avoid education related to software engineering because of the fear of offshore outsourcing importing software products or services from other countries and of being displaced by foreign visa workers 45 Although statistics do not currently show a threat to software engineering itself a related career computer programming does appear to have been affected 46 47 Nevertheless the ability to smartly leverage offshore and nearshore resources via the followthesun workflow has improved the overall operational capability of many organizations 48 When North Americans are leaving work Asians are just arriving to work When Asians are leaving work Europeans are arriving to work This provides a continuous ability to have human oversight on businesscritical processes 24 hours per day without paying overtime compensation or disrupting a key human resource sleep patterns While global outsourcing has several advantages global and generally distributed development can run into serious difficulties resulting from the distance between developers This is due to the key elements of this type of distance that have been identified as geographical temporal cultural and communication that includes the use of different languages and dialects of English in different locations 49 Research has been carried out in the area of global software development over the last 15 years and an extensive body of relevant work published that highlights the benefits and problems associated with the complex activity As with other aspects of software engineering research is ongoing in this and related areas Controversy edit Criticism edit Software engineering sees its practitioners as individuals who follow welldefined engineering approaches to problemsolving These approaches are specified in various software engineering books and research papers always with the connotations of predictability precision mitigated risk and professionalism This perspective has led to calls by whom for licensing certification and codified bodies of knowledge as mechanisms for spreading the engineering knowledge and maturing the field Software craftsmanship has been proposed by a body of software developers as an alternative that emphasizes the coding skills and accountability of the software developers themselves without professionalism or any prescribed curriculum leading to adhoc problemsolving craftmanship without engineering lack of predictability precision missing risk mitigation methods are informal and poorly defined The Software Craftsmanship Manifesto extends the Agile Software Manifesto 50 and draws a metaphor between modern software development and the apprenticeship model of medieval Europe Software engineering extends engineering and draws on the engineering model ie engineering process engineering project management engineering requirements engineering design engineering construction and engineering validation The concept is so new that it is rarely understood and it is widely misinterpreted including in software engineering textbooks papers and among the communities of programmers and crafters One of the core issues in software engineering is that its approaches are not empirical enough because a realworld validation of approaches is usually absent or very limited and hence software engineering is often misinterpreted as feasible only in a theoretical environment Edsger Dijkstra the founder of many of the concepts used within software development today rejected the idea of software engineering up until his death in 2002 arguing that those terms were poor analogies for whathe called the radical novelty of computer science mwparseroutput templatequoteoverflowhiddenmargin1em 0padding0 40pxmwparseroutput templatequote templatequotecitelineheight15emtextalignleftpaddingleft16emmargintop0 A number of these phenomena have been bundled under the name Software Engineering As economics is known as The Miserable Science software engineering should be known as The Doomed Discipline doomed because it cannot even approach its goal since its goal is selfcontradictory Software engineering of course presents itself as another worthy cause but that is eyewash if you carefully read its literature and analyse what its devotees actually do you will discover that software engineering has accepted as its charter How to program if you cannot 51 See also edit Computer science Bachelor of Science in Information Technology Bachelor of Software Engineering List of software engineering conferences List of computer science journals incl software engineering journals List of software engineering publications Software craftsmanship Software development Software Engineering Institute References edit Citations edit a b c d e f g Abran et al 2004 pp11 a b ACM 2007 Computing Degrees Careers ACM Retrieved 20101123 mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput idlockfree amwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput idlocklimited amwparseroutput idlockregistration amwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput idlocksubscription amwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em a b Laplante Phillip 2007 What Every Engineer Should Know about Software Engineering Boca Raton CRC ISBN 9780849372285 Retrieved 20110121 httpswwwdagstuhldeReports969635pdf Leondes Cornelius T 2002 Intelligent Systems Technology and Applications CRC Press pI6 ISBN 9780849311215 14 Computers and a First Glimpse at Al 1940s CampbellKelly Martin April 1982 The Development of Computer Programming in Britain 1945 to 1955 IEEE Annals of the History of Computing 4 2 121139 doi 101109MAHC198210016 Parnas David December 1972 On the Criteria To Be Used in Decomposing Systems into Modules Communications of the ACM 15 12 10531058 doi 101145361598361623 Retrieved 20081226 The origin of software engineering Retrieved 17 Nov 2017 Randall Brian The 196869 NATO Software Engineering Reports Retrieved 17 Nov 2017 Software Magazine What to Know About the Scientist who Invented the Term Software Engineering Archived from the original on November 24 2018 Retrieved February 12 2019 Sommerville 2008 p26 Peter Naur Randell Brian 711 October 1968 Software Engineering Report of a conference sponsored by the NATO Science Committee PDF Garmisch Germany Scientific Affairs Division NATO Retrieved 20081226 Randell Brian 10 August 2001 The 196869 NATO Software Engineering Reports Brian Randells University Homepage The School of the Computer Sciences Newcastle University Retrieved 20081011 The idea for the first NATO Software Engineering Conference and in particular that of adopting the then practically unknown term software engineering as its deliberately provocative title I believe came originally from Professor Fritz Bauer 2018 International Conference on Software Engineering celebrating its 40th anniversary and 50 years of Software engineering ICSE 2018 Plenary Sessions Fred Brooks Retrieved 9 Aug 2018 2018 International Conference on Software Engineering celebrating its 40th anniversary and 50 years of Software engineering ICSE 2018 Plenary Sessions Margaret Hamilton Retrieved 9 Aug 2018 ISOIEC TR 197592005 Retrieved 20120401 Systems and software engineering Vocabulary ISO IEC IEEE std 247652010E 2010 IEEE Standard Glossary of Software Engineering Terminology IEEE std 610121990 1990 Sommerville Ian 2007 1982 112 What is software engineering Software Engineering 8th ed Harlow England Pearson Education p7 ISBN 9780321313799 Software engineering is an engineering discipline that is concerned with all aspects of software production from the early stages of system specification to maintaining the system after it has gone into use In this definition there are two key phrases 1 Engineering discipline Engineers make things work They apply theories methods and tools where these are appropriate Engineers also recognize that they must work to organizational and financial constraints 2 All aspects of software production Software engineering is not just concerned with the technical processes of software development but also with activities such as software project management and with the development of tools methods and theories to support software production Software Engineering Information Processing 71 530538 Definition of SOFTWARE ENGINEERING wwwmerriamwebstercom Retrieved 20191125 Akram I Salah 20020405 Engineering an Academic Program in Software Engineering PDF 35th Annual Midwest Instruction and Computing Symposium Retrieved 20060913 For some software engineering is just a glorified name for programming If you are a programmer you might put software engineer on your business cardnever programmer though Mills Harlan D J R Newman and C B Engle Jr An Undergraduate Curriculum in Software Engineering in Deimel Lionel E 1990 Software Engineering Education SEI Conference 1990 Pittsburgh Pennsylvania USA April 23 Springer ISBN 9780387972749 p 26 As a practical matter we regard software engineering as the necessary preparation for the practicing software development and maintenance professional The Computer Scientist is preparing for further theoretical studies David Budgen Pearl Brereton Barbara Kitchenham Stephen Linkman 20041214 Realizing Evidencebased Software Engineering Archived from the original on 20061217 Retrieved 20061018 We believe that software engineering can only advance as an engineering discipline by moving away from its current dependence upon advocacy and analysis a b c d e Software Engineering Body of Knowledge SWEBOK Version 3 2014 pdf wwwswebokorg IEEE Computer Society Retrieved 24 May 2016 Abran Alain ed 2005 2004 Chapter 1 Introduction to the Guide Guide to the Software Engineering Body of Knowledge Los Alamitos IEEE Computer Society ISBN 9780769523309 Retrieved 20100913 The total volume of cited literature is intended to be suitable for mastery through the completion of an undergraduate education plus four years of experience SE2014 Software Engineering Curriculum PDF Williams NSW 1921 February 2001 Professional Engineers Ontarios approach to licensing software engineering practitioners Software Engineering Education and Training 2001 Proceedings 14th Conference on Charlotte NC IEEE pp7778 NCEES Software Engineering Exam Specifications PDF Archived from the original PDF on 20130827 Retrieved 20120401 NCEES discontinuing PE Software Engineering exam National Council of Examiners for Engineering and Surveying 13 March 2018 Retrieved 6 August 2018 SWEBOK Guide Version 3 Retrieved 20150309 Software Engineering Code of Ethics PDF Retrieved 20120325 Software Developers Occupational Outlook Handboook U S Bureau of labor Statistics 4 September 2019 Retrieved 11 December 2019 httpswwwblsgovoohcomputerandinformationtechnologyhomehtm httpswwwblsgovoohcomputerandinformationtechnologycomputerprogrammershtm Computing Disciplines and Majors PDF ACM Retrieved 6 September 2019 Computer Software Engineers and Computer Programmers Retrieved 20091217 SEI certification page Seicmuedu Retrieved 20120325 Wyrostek Warren March 14 2008 The Top 10 Problems with IT Certification in 2008 InformIT Retrieved 20090303 IEEE Computer Society 2006 IEEE computer society report to the IFIP General Assembly PDF Retrieved 20070410 IEEE CSDA Retrieved 20100420 ACM July 17 2000 A Summary of the ACM Position on Software Engineering as a Licensed Engineering Profession PDF Association for Computing Machinery ACM Archived from the original PDF on May 17 2008 Retrieved 20090303 At its meeting in May 2000 the Council further concluded that the framework of a licensed professional engineer originally developed for civil engineers does not match the professional industrial practice of software engineering Such licensing practices would give false assurances of competence even if the body of knowledge were mature and would preclude many of the most qualified software engineers from becoming licensed Canadian Information Processing Society ISP Designation Retrieved 20070315 Professional Engineers Ontario Welcome to PEOs website Peoonca Retrieved 20120325 Thibodaux Patrick 20060505 As outsourcing gathers steam computer science interest wanes Computerworldcom Retrieved 20161206 Computer Programmers Blsgov Retrieved 20120325 Mullins Robert 20070313 Software developer growth slows in North America InfoWorld Archived from the original on 20090404 Retrieved 20120325 Gartner Magic Quadrant PDF Cognizantcom Retrieved 20120325 Casey Valentine 20100820 Virtual software team project management Journal of the Brazilian Computer Society 16 2 8396 doi 101007s1317301000133 Beck Kent et al 2001 Manifesto for Agile Software Development Agile Alliance Retrieved 14 June 2010 Dijkstra E W 1988 On the cruelty of really teaching computing science Retrieved 20140110 Sources edit mwparseroutput refbeginfontsize90marginbottom05emmwparseroutput refbeginhangingindentsgtulliststyletypenonemarginleft0mwparseroutput refbeginhangingindentsgtulgtlimwparseroutput refbeginhangingindentsgtdlgtddmarginleft0paddingleft32emtextindent32emliststylenonemwparseroutput refbegin100fontsize100 Abran Alain Moore James W Bourque Pierre Dupuis Robert Tripp Leonard L 2004 Guide to the Software Engineering Body of Knowledge IEEE ISBN 9780769523309 Sommerville Ian 2008 Software Engineering 7th ed Pearson Education ISBN 9788177585308 Retrieved 10 January 2013 Further reading edit Pressman Roger S 2009 Software Engineering A Practitioners Approach 7th ed Boston Mass McGrawHill ISBN 9780073375977 Sommerville Ian 2010 2010 Software Engineering 9th ed Harlow England Pearson Education ISBN 9780137035151 Jalote Pankaj 2005 1991 An Integrated Approach to Software Engineering 3rd ed Springer ISBN 9780387208817 Bruegge Bernd Dutoit Allen 2009 Objectoriented software engineering using UML patterns and Java 3rd ed Prentice Hall ISBN 9780136061250 Oshana Robert 20190621 Software engineering for embedded systems methods practical techniques and applications Second ed Kidlington Oxford United Kingdom ISBN 9780128094334 External links edit Wikimedia Commons has media related to Software engineering Wikiversity has learning resources about Software engineering Guide to the Software Engineering Body of Knowledge The Open Systems Engineering and Software Development Life Cycle Framework OpenSDLCorg the integrated Creative Commons SDLC Software Engineering Institute Carnegie Mellon v t e Software engineering Fields Computer programming Requirements engineering Software deployment Software design Software maintenance Software testing Systems analysis Formal methods Concepts Data modeling Enterprise architecture Functional specification Modeling language Orthogonality Programming paradigm Software Software archaeology Software architecture Software configuration management Software development methodology Software development process Software quality Software quality assurance Software verification and validation Structured analysis Orientations Agile Aspectoriented Object orientation Ontology Service orientation SDLC Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD UP Scrum Spiral model VModel Waterfall model XP Other SPICE CMMI Data model ER model Function model Information model Metamodeling Object model Systems model View model Languages IDEF UML USL SysML Software engineers Victor Basili Kent Beck Grady Booch Fred Brooks Barry Boehm Peter Chen Danese Cooper Ward Cunningham Tom DeMarco Edsger W Dijkstra Delores M Etter Martin Fowler Adele Goldstine Margaret Hamilton C A R Hoare Lois Haibt Mary Jean Harrold Grace Hopper Watts Humphrey Michael A Jackson Ivar Jacobson Alan Kay Nancy Leveson Stephen J Mellor Bertrand Meyer David Parnas Trygve Reenskaug Winston W Royce James Rumbaugh Mary Shaw Peri Tarr Elaine Weyuker Niklaus Wirth Edward Yourdon Related fields Computer science Computer engineering Project management Risk management Systems engineering Category Commons v t e Systems engineering Subfields Aerospace engineering Biological systems engineering Configuration management Earth systems engineering and management Electrical engineering Enterprise systems engineering Performance engineering Reliability engineering Safety engineering Processes Requirements engineering Functional specification System integration Verification and validation Design review Concepts Business process System System lifecycle VModel Systems development life cycle Tools Decisionmaking Function modelling IDEF Optimization Quality function deployment System dynamics Systems Modeling Language Systems analysis Systems modeling Work breakdown structure People James S Albus Ruzena Bajcsy Benjamin S Blanchard Wernher von Braun Kathleen Carley Harold Chestnut Wolt Fabrycky Barbara Grosz Arthur David Hall III Derek Hitchins Robert E Machol Radhika Nagpal Simon Ramo Joseph Francis Shea Katia Sycara Manuela M Veloso John N Warfield Related fields Control engineering Computer engineering Industrial engineering Operations research Project management Quality management Risk management Software engineering Category v t e Engineering Civil Architectural Construction Environmental Earthquake Geotechnical Hydraulic Mining Structural Transportation Mechanical Acoustical Aerospace Automotive Marine Railway Thermal Electrical Computer Control Electromechanics Electronics Microwaves Power Radio Frequency Telecommunications Chemical Biochemical Biological Molecular Petroleum Process Reaction Interdisciplinary Agricultural Audio Biomedical Engineering mathematics Engineering mechanics Engineering physics Engineering science Fire Industrial Information Materials science Ceramics Metallurgy Polymer Mechatronics Military Nanotechnology Nuclear Optical Photonics Privacy Robotics Sanitary Security Software Systems Glossaries Engineering Aerospace engineering Civil engineering Electrical and electronics engineering Mechanical engineering Structural engineering List of engineering branches CategoryEngineering Engineering portal v t e Computer science Note This template roughly follows the 2012 ACM Computing Classification System Hardware Printed circuit board Peripheral Integrated circuit Very Large Scale Integration Systems on Chip SoCs Energy consumption Green computing Electronic design automation Hardware acceleration Computer systems organization Computer architecture Embedded system Realtime computing Dependability Networks Network architecture Network protocol Network components Network scheduler Network performance evaluation Network service Software organization Interpreter Middleware Virtual machine Operating system Software quality Software notations and tools Programming paradigm Programming language Compiler Domainspecific language Modeling language Software framework Integrated development environment Software configuration management Software library Software repository Software development Software development process Requirements analysis Software design Software construction Software deployment Software maintenance Programming team Opensource model Theory of computation Model of computation Formal language Automata theory Computability theory Computational complexity theory Logic Semantics Algorithms Algorithm design Analysis of algorithms Algorithmic efficiency Randomized algorithm Computational geometry Mathematics of computing Discrete mathematics Probability Statistics Mathematical software Information theory Mathematical analysis Numerical analysis Information systems Database management system Information storage systems Enterprise information system Social information systems Geographic information system Decision support system Process control system Multimedia information system Data mining Digital library Computing platform Digital marketing World Wide Web Information retrieval Security Cryptography Formal methods Security services Intrusion detection system Hardware security Network security Information security Application security Humancomputer interaction Interaction design Social computing Ubiquitous computing Visualization Accessibility Concurrency Concurrent computing Parallel computing Distributed computing Multithreading Multiprocessing Artificial intelligence Natural language processing Knowledge representation and reasoning Computer vision Automated planning and scheduling Search methodology Control method Philosophy of artificial intelligence Distributed artificial intelligence Machine learning Supervised learning Unsupervised learning Reinforcement learning Multitask learning Crossvalidation Graphics Animation Rendering Image manipulation Graphics processing unit Mixed reality Virtual reality Image compression Solid modeling Applied computing Ecommerce Enterprise software Computational mathematics Computational physics Computational chemistry Computational biology Computational social science Computational engineering Computational healthcare Digital art Electronic publishing Cyberwarfare Electronic voting Video games Word processing Operations research Educational technology Document management Book Category Outline WikiProject Commons Authority control BNE XX541523 BNF cb11966616k data GND 41165214 LCCN sh87007398 NDL 01014113 