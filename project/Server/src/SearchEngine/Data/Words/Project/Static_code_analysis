Static program analysis Software development Core activities Processes Requirements Design Engineering Construction Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DevOps DAD DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TSP OpenUP UP XP Supporting disciplines Configuration management Documentation Software quality assurance SQA Project management User experience Practices ATDD BDD CCO CI CD DDD PP SBE Standup TDD Tools Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing Standards and Bodies of Knowledge BABOK CMMI IEEE standards ISO 9001 ISOIEC standards PMBOK SWEBOK ITIL Glossaries Artificial intelligence Computer science Electrical and electronics engineering v t e Static program analysis is the analysis of computer software that is performed without actually executing programs in contrast with dynamic analysis which is analysis performed on programs while they are executing 1 In most cases the analysis is performed on some version of the source code and in the other cases some form of the object code The term is usually applied to the analysis performed by an automated tool with human analysis being called program understanding program comprehension or code review Software inspections and software walkthroughs are also used in the latter case Contents 1 Rationale 2 Tool types 3 Formal methods 4 Datadriven static analysis 5 See also 6 References 7 Further reading 8 External links Rationale edit The sophistication of the analysis performed by tools varies from those that only consider the behaviour of individual statements and declarations to those that include the complete source code of a program in their analysis The uses of the information obtained from the analysis vary from highlighting possible coding errors eg the lint tool to formal methods that mathematically prove properties about a given program eg its behaviour matches that of its specification Software metrics and reverse engineering can be described as forms of static analysis Deriving software metrics and static analysis are increasingly deployed together especially in creation of embedded systems by defining socalled software quality objectives 2 A growing commercial use of static analysis is in the verification of properties of software used in safetycritical computer systems andlocating potentially vulnerable code 3 For example the following industries have identified the use of static code analysis as a means of improving the quality of increasingly sophisticated and complex software Medical software The US Food and Drug Administration FDA has identified the use of static analysis for medical devices 4 Nuclear software In the UK the Office for Nuclear Regulation ONR recommends the use of static analysis on reactor protection systems 5 Aviation software in combination with dynamic analysis 6 A study in 2012 by VDC Research reports that 287 of the embedded software engineers surveyed currently use static analysis tools and 397 expect to use them within 2 years 7 A study from 2010 found that 60 of the interviewed developers in European research projects made at least use of their basic IDE builtin static analyzers However only about 10 employed an additional other and perhaps more advanced analysis tool 8 In the application security industry the name Static Application Security Testing SAST is also used SAST is an important part of Security Development Lifecycles SDLs such as the SDL defined by Microsoft 9 and a common practice in software companies 10 Tool types edit The OMG Object Management Group published a study regarding the types of software analysis required for software quality measurement and assessment This document on How to Deliver Resilient Secure Efficient and Easily Changed IT Systems in Line with CISQ Recommendations describes three levels of software analysis 11 Unit Level Analysis that takes place within a specific program or subroutine without connecting to the context of that program Technology Level Analysis that takes into account interactions between unit programs to get a more holistic and semantic view of the overall program in order to find issues and avoid obvious false positives For instance it is possible to statically analyze the Android technology stack to find permission errors 12 System Level Analysis that takes into account the interactions between unit programs but without being limited to one specific technology or programming language A further level of software analysis can be defined MissionBusiness Level Analysis that takes into account the businessmission layer terms rules and processes that are implemented within the software system for its operation as part of enterprise or programmission layer activities These elements are implemented without being limited to one specific technology or programming language and in many cases are distributed across multiple languages but are statically extracted and analyzed for system understanding for mission assurance Formal methods edit Main article Formal methods Formal methods is the term applied to the analysis of software and computer hardware whose results are obtained purely through the use of rigorous mathematical methods The mathematical techniques used include denotational semantics axiomatic semantics operational semantics and abstract interpretation By a straightforward reduction to the halting problem it is possible to prove that for any Turing complete language finding all possible runtime errors in an arbitrary program or more generally any kind of violation of a specification on the final result of a program is undecidable there is no mechanical method that can always answer truthfully whether an arbitrary program may or may not exhibit runtime errors This result dates from the works of Church GÃ¶del and Turing in the 1930s see Halting problem and Rices theorem As with many undecidable questions one can still attempt to give useful approximate solutions Some of the implementation techniques of formal static analysis include 13 Abstract interpretation to model the effect that every statement has on the state of an abstract machine ie it executes the software based on the mathematical properties of each statement and declaration This abstract machine overapproximates the behaviours of the system the abstract system is thus made simpler to analyze at the expense of incompleteness not every property true of the original system is true of the abstract system If properly done though abstract interpretation is sound every property true of the abstract system can be mapped to a true property of the original system 14 The FramaC value analysis plugin and Polyspace heavily rely on abstract interpretation Dataflow analysis a latticebased technique for gathering information about the possible set of values Hoare logic a formal system with a set of logical rules for reasoning rigorously about the correctness of computer programs There is tool support for some programming languages eg the SPARK programming language a subset of Ada and the Java Modeling Language JMLusing ESCJava and ESCJava2 FramaC WP weakest precondition plugin for the C language extended with ACSL ANSIISO C Specification Language Model checking considers systems that have finite state or may be reduced to finite state by abstraction Symbolic execution as used to derive mathematical expressions representing the value of mutated variables at particular points in the code Datadriven static analysis edit Datadriven static analysis uses large amounts of code to infer coding rules 15 For instance one can use all Java opensource packages on GitHub to learn a good analysis strategy The rule inference can use machine learning techniques 16 For instance it has been shown that when one deviates too much in the way one uses an objectoriented API it is likely to be a bug 17 It is also possible to learn from a large amount of past fixes and warnings 15 See also edit Code audit Documentation generator Formal semantics of programming languages Formal verification List of tools for static code analysis Shape analysis software References edit Wichmann B A Canning A A Clutterbuck D L Winsbarrow L A Ward N J Marsh D W R Mar 1995 Industrial Perspective on Static Analysis PDF Software Engineering Journal 6975 Archived from the original PDF on 20110927 mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em Software Quality Objectives for Source Code Archived 20150604 at the Wayback Machine PDF Proceedings Embedded Real Time Software and Systems 2010 Conference ERTS2010org Toulouse France Patrick Briand Martin Brochet Thierry Cambois Emmanuel Coutenceau Olivier Guetta Daniel Mainberte Frederic Mondot Patrick Munier Loic Noury Philippe Spozio Frederic Retailleau Improving Software Security with Precise Static and Runtime Analysis Archived 20110605 at the Wayback Machine PDF Benjamin Livshits section 73 Static Techniques for Security Stanford doctoral thesis 2006 FDA 20100908 Infusion Pump Software Safety Research at FDA Food and Drug Administration Archived from the original on 20100901 Retrieved 20100909 Computer based safety systems technical guidance for assessing software aspects of digital computer based protection systems Computer based safety systems PDF Archived from the original PDF on January 4 2013 Retrieved May 15 2013 Position Paper CAST9 Considerations for Evaluating Safety Engineering Approaches to Software Assurance Archived 20131006 at the Wayback Machine FAA Certification Authorities Software Team CAST January 2002 Verification A combination of both static and dynamic analyses should be specified by the applicantdeveloper and applied to the software VDC Research 20120201 Automated Defect Prevention for Embedded Software Quality VDC Research Archived from the original on 20120411 Retrieved 20120410 Prause Christian R RenÃ© Reiners and Silviya Dencheva Empirical study of tool support in highly distributed research projects Global Software Engineering ICGSE 2010 5th IEEE International Conference on IEEE 2010 httpieeexploreieeeorgielx55581168558149305581551pdf M Howard and S Lipner The Security Development Lifecycle SDL A Process for Developing Demonstrably More Secure Software Microsoft Press 2006 ISBN 9780735622142 Achim D Brucker and Uwe Sodan Deploying Static Application Security Testing on a Large Scale Archived 20141021 at the Wayback Machine In GI Sicherheit 2014 Lecture Notes in Informatics 228 pages 91101 GI 2014 Archived copy PDF Archived PDF from the original on 20141021 Retrieved 20150520 CS1 maint archived copy as title link Archived copy PDF Archived PDF from the original on 20131228 Retrieved 20131018 CS1 maint archived copy as title link Bartel Alexandre Klein Jacques Monperrus Martin Le Traon Yves 1 June 2014 Static Analysis for Extracting Permission Checks of a Large Scale Framework The Challenges and Solutions for Analyzing Android IEEE Transactions on Software Engineering 40 6 617632 arXiv 14083976 doi 101109tse20142322867 Vijay DSilva et al 2008 A Survey of Automated Techniques for Formal Software Verification PDF Transactions On CAD Archived PDF from the original on 20160304 Retrieved 20150511 Jones Paul 20100209 A Formal Methodsbased verification approach to medical device software analysis Embedded Systems Design Archived from the original on July 10 2011 Retrieved 20100909 a b Learning from others mistakes Datadriven code analysis wwwslidesharenet Oh Hakjoo Yang Hongseok Yi Kwangkeun 2015 Learning a strategy for adapting a program analysis via bayesian optimisation Proceedings of the 2015 ACM SIGPLAN International Conference on ObjectOriented Programming Systems Languages and Applications OOPSLA 2015 pp572588 doi 10114528142702814309 ISBN 9781450336895 Monperrus Martin Mezini Mira 2013 Detecting missing method calls as violations of the majority rule ACM Transactions on Software Engineering and Methodology 22 1 125 arXiv 13060762 doi 10114524305362430541 Further reading edit Ayewah Nathaniel Hovemeyer David Morgenthaler J David Penix John Pugh William 2008 Using Static Analysis to Find Bugs IEEE Software 25 5 2229 CiteSeerX 10111878985 doi 101109MS2008130 Brian Chess Jacob West Fortify Software 2007 Secure Programming with Static Analysis AddisonWesley ISBN 9780321424778 Flemming Nielson Hanne R Nielson Chris Hankin 20041210 Principles of Program Analysis 1999 corrected 2004 ed Springer ISBN 9783540654100 Abstract interpretation and static analysis International Winter School on Semantics and Applications 2003 by David A Schmidt External links edit Code Quality Improvement Coding standards conformance checking DDJ Competition on Software Verification SVCOMP Episode 59 Static Code Analysis Interview Podcast at Software Engineering Radio Implementing Automated Governance for Coding Standards Explains why and how to integrate static code analysis into the build process Integrate static analysis into a software development process The SAMATE Project a resource for Automated Static Analysis tools