Supervised learning See also Unsupervised learning Machine learning and data mining Problems Classification Clustering Regression Anomaly detection AutoML Association rules Reinforcement learning Structured prediction Feature engineering Feature learning Online learning Semisupervised learning Unsupervised learning Learning to rank Grammar induction Supervised learning mwparseroutput noboldfontweightnormal classification regression Decision trees Ensembles Bagging Boosting Random forest k NN Linear regression Naive Bayes Artificial neural networks Logistic regression Perceptron Relevance vector machine RVM Support vector machine SVM Clustering BIRCH CURE Hierarchical k means Expectationmaximization EM DBSCAN OPTICS Meanshift Dimensionality reduction Factor analysis CCA ICA LDA NMF PCA tSNE Structured prediction Graphical models Bayes net Conditional random field Hidden Markov Anomaly detection k NN Local outlier factor Artificial neural network Autoencoder Deep learning DeepDream Multilayer perceptron RNN LSTM GRU Restricted Boltzmann machine GAN SOM Convolutional neural network UNet Reinforcement learning Qlearning SARSA Temporal difference TD Theory Biasvariance dilemma Computational learning theory Empirical risk minimization Occam learning PAC learning Statistical learning VC theory Machinelearning venues NeurIPS ICML ML JMLR ArXivcsLG Glossary of artificial intelligence Glossary of artificial intelligence Related articles List of datasets for machinelearning research Outline of machine learning v t e Supervised learning is the machine learning task of learning a function that maps an input to an output based on example inputoutput pairs 1 It infers a function from labeled training data consisting of a set of training examples 2 In supervised learning each example is a pair consisting of an input object typically a vector and a desired output value also called the supervisory signal A supervised learning algorithm analyzes the training data and produces an inferred function which can be used for mapping new examples An optimal scenario will allow for the algorithm to correctly determine the class labels for unseen instances This requires the learning algorithm to generalize from the training data to unseen situations in a reasonable way see inductive bias The parallel task in human and animal psychology is often referred to as concept learning Contents 1 Steps 2 Algorithm choice 21 Biasvariance tradeoff 22 Function complexity and amount of training data 23 Dimensionality of the input space 24 Noise in the output values 25 Other factors to consider important 26 Algorithms 3 How supervised learning algorithms work 31 Empirical risk minimization 32 Structural risk minimization 4 Generative training 5 Generalizations 6 Approaches and algorithms 7 Applications 8 General issues 9 See also 10 References 11 External links Steps edit In order to solve a given problem of supervised learning one has to perform the following steps Determine the type of training examples Before doing anything else the user should decide what kind of data is to be used as a training set In the case of handwriting analysis for example this might be a single handwritten character an entire handwritten word or an entire line of handwriting Gather a training set The training set needs to be representative of the realworld use of the function Thus a set of input objects is gathered and corresponding outputs are also gathered either from human experts or from measurements Determine the input feature representation of the learned function The accuracy of the learned function depends strongly on how the input object is represented Typically the input object is transformed into a feature vector which contains a number of features that are descriptive of the object The number of features should not be too large because of the curse of dimensionality but should contain enough information to accurately predict the output Determine the structure of the learned function and corresponding learning algorithm For example the engineer may choose to use support vector machines or decision trees Complete the design Run the learning algorithm on the gathered training set Some supervised learning algorithms require the user to determine certain control parameters These parameters may be adjusted by optimizing performance on a subset called a validation set of the training set or via crossvalidation Evaluate the accuracy of the learned function After parameter adjustment and learning the performance of the resulting function should be measured on a test set that is separate from the training set Algorithm choice edit A wide range of supervised learning algorithms are available each with its strengths and weaknesses There is no single learning algorithm that works best on all supervised learning problems see the No free lunch theorem There are four major issues to consider in supervised learning Biasvariance tradeoff edit Main article Biasvariance dilemma A first issue is the tradeoff between bias and variance 3 Imagine that we have available several different but equally good training data sets A learning algorithm is biased for a particular input x displaystyle x if when trained on each of these data sets it is systematically incorrect when predicting the correct output for x displaystyle x A learning algorithm has high variance for a particular input x displaystyle x if it predicts different output values when trained on different training sets The prediction error of a learned classifier is related to the sum of the bias and the variance of the learning algorithm 4 Generally there is a tradeoff between bias and variance A learning algorithm with low bias must be flexible so that it can fit the data well But if the learning algorithm is too flexible it will fit each training data set differently and hence have high variance A key aspect of many supervised learning methods is that they are able to adjust this tradeoff between bias and variance either automatically or by providing a biasvariance parameter that the user can adjust Function complexity and amount of training data edit The second issue is the amount of training data available relative to the complexity of the true function classifier or regression function If the true function is simple then an inflexible learning algorithm with high bias and low variance will be able to learn it from a small amount of data But if the true function is highly complex eg because it involves complex interactions among many different input features and behaves differently in different parts of the input space then the function will only be able to learn from a very large amount of training data and using a flexible learning algorithm with low bias and high variance Dimensionality of the input space edit A third issue is the dimensionality of the input space If the input feature vectors have very high dimension the learning problem can be difficult even if the true function only depends on a small number of those features This is because the many extra dimensions can confuse the learning algorithm and cause it to have high variance Hence high input dimensional typically requires tuning the classifier to have low variance and high bias In practice if the engineer can manually remove irrelevant features from the input data this is likely to improve the accuracy of the learned function In addition there are many algorithms for feature selection that seek to identify the relevant features and discard the irrelevant ones This is an instance of the more general strategy of dimensionality reduction which seeks to map the input data into a lowerdimensional space prior to running the supervised learning algorithm Noise in the output values edit A fourth issue is the degree of noise in the desired output values the supervisory target variables If the desired output values are often incorrect because of human error or sensor errors then the learning algorithm should not attempt to find a function that exactly matches the training examples Attempting to fit the data too carefully leads to overfitting You can overfit even when there are no measurement errors stochastic noise if the function you are trying to learn is too complex for your learning model In such a situation the part of the target function that cannot be modeled corrupts your training data this phenomenon has been called deterministic noise When either type of noise is present it is better to go with a higher bias lower variance estimator In practice there are several approaches to alleviate noise in the output values such as early stopping to prevent overfitting as well as detecting and removing the noisy training examples prior to training the supervised learning algorithm There are several algorithms that identify noisy training examples and removing the suspected noisy training examples prior to training has decreased generalization error with statistical significance 5 6 Other factors to consider important edit Other factors to consider when choosing and applying a learning algorithm include the following Heterogeneity of the data If the feature vectors include features of many different kinds discrete discrete ordered counts continuous values some algorithms are easier to apply than others Many algorithms including Support Vector Machines linear regression logistic regression neural networks and nearest neighbor methods require that the input features be numerical and scaled to similar ranges eg to the 11 interval Methods that employ a distance function such as nearest neighbor methods and support vector machines with Gaussian kernels are particularly sensitive to this An advantage of decision trees is that they easily handle heterogeneous data Redundancy in the data If the input features contain redundant information eg highly correlated features some learning algorithms eg linear regression logistic regression and distance based methods will perform poorly because of numerical instabilities These problems can often be solved by imposing some form of regularization Presence of interactions and nonlinearities If each of the features makes an independent contribution to the output then algorithms based on linear functions eg linear regression logistic regression Support Vector Machines naive Bayes and distance functions eg nearest neighbor methods support vector machines with Gaussian kernels generally perform well However if there are complex interactions among features then algorithms such as decision trees and neural networks work better because they are specifically designed to discover these interactions Linear methods can also be applied but the engineer must manually specify the interactions when using them When considering a new application the engineer can compare multiple learning algorithms and experimentally determine which one works best on the problem at hand see cross validation Tuning the performance of a learning algorithm can be very timeconsuming Given fixed resources it is often better to spend more time collecting additional training data and more informative features than it is to spend extra time tuning the learning algorithms Algorithms edit The most widely used learning algorithms are Support Vector Machines linear regression logistic regression naive Bayes linear discriminant analysis decision trees knearest neighbor algorithm Neural Networks Multilayer perceptron Similarity learning How supervised learning algorithms work edit Given a set of N displaystyle N training examples of the form x 1 y 1 x N y N displaystyle x1y1xNyN such that x i displaystyle xi is the feature vector of the ith example and y i displaystyle yi is its label ie class a learning algorithm seeks a function g X Y displaystyle gXto Y where X displaystyle X is the input space and Y displaystyle Y is the output space The function g displaystyle g is an element of some space of possible functions G displaystyle G usually called the hypothesis space It is sometimes convenient torepresent g displaystyle g using a scoring function f X Y R displaystyle fXtimes Yto mathbb R such that g displaystyle g is defined as returning the y displaystyle y value that gives the highest score g x arg max y f x y displaystyle gxunderset yarg max fxy Let F displaystyle F denote the space of scoring functions Although G displaystyle G and F displaystyle F can be any space of functions many learning algorithms are probabilistic models where g displaystyle g takes the form of a conditional probability model g x P y x displaystyle gxPyx or f displaystyle f takes the form of a joint probability model f x y P x y displaystyle fxyPxy For example naive Bayes and linear discriminant analysis are joint probability models whereas logistic regression is a conditional probability model There are two basic approaches to choosing f displaystyle f or g displaystyle g empirical risk minimization and structural risk minimization 7 Empirical risk minimization seeks the function that best fits the training data Structural risk minimization includes a penalty function that controls the biasvariance tradeoff In both cases it is assumed that the training set consists of a sample of independent and identically distributed pairs x i y i displaystyle xiyi In order to measure how well a function fits the training data a loss function L Y Y R 0 displaystyle LYtimes Yto mathbb R geq 0 is defined For training example x i y i displaystyle xiyi the loss of predicting the value y displaystyle hat y is L y i y displaystyle Lyihat y The risk R g displaystyle Rg of function g displaystyle g is defined as the expected loss of g displaystyle g This can be estimated from the training data as R e m p g 1 N i L y i g x i displaystyle Rempgfrac 1Nsum iLyigxi Empirical risk minimization edit Main article Empirical risk minimization In empirical risk minimization the supervised learning algorithm seeks the function g displaystyle g that minimizes R g displaystyle Rg Hence a supervised learning algorithm can be constructed by applying an optimization algorithm to find g displaystyle g When g displaystyle g is a conditional probability distribution P y x displaystyle Pyx and the loss function is the negative log likelihood L y y log P y x displaystyle Lyhat ylog Pyx then empirical risk minimization is equivalent to maximum likelihood estimation When G displaystyle G contains many candidate functions or the training set is not sufficiently large empirical risk minimization leads to high variance and poor generalization The learning algorithm is ableto memorize the training examples without generalizing well This is called overfitting Structural risk minimization edit Structural risk minimization seeks to prevent overfitting by incorporating a regularization penalty into the optimization The regularization penalty can be viewed as implementing a form of Occams razor that prefers simpler functions over more complex ones A wide variety of penalties have been employed that correspond to different definitions of complexity For example consider the case where the function g displaystyle g is a linear function of the form g x j 1 d β j x j displaystyle gxsum j1dbeta jxj A popular regularization penalty is j β j 2 displaystyle sum jbeta j2 which is the squared Euclidean norm of the weights also known as the L 2 displaystyle L2 norm Other norms include the L 1 displaystyle L1 norm j β j displaystyle sum jbeta j and the L 0 displaystyle L0 norm which is the number of nonzero β j displaystyle beta j s The penalty will be denoted by C g displaystyle Cg The supervised learning optimization problem is to find the function g displaystyle g that minimizes J g R e m p g λ C g displaystyle JgRempglambda Cg The parameter λ displaystyle lambda controls the biasvariance tradeoff When λ 0 displaystyle lambda 0 this gives empirical risk minimization with low bias and high variance When λ displaystyle lambda is large the learning algorithm will have high bias and low variance The value of λ displaystyle lambda can be chosen empirically via cross validation The complexity penalty has a Bayesian interpretation as the negative log prior probability of g displaystyle g log P g displaystyle log Pg in which case J g displaystyle Jg is the posterior probabability of g displaystyle g Generative training edit The training methods described above are discriminative training methods because they seek to find a function g displaystyle g that discriminates well between the different output values see discriminative model For the special case where f x y P x y displaystyle fxyPxy is a joint probability distribution and the loss function is the negative log likelihood i log P x i y i displaystyle sum ilog Pxiyi a risk minimization algorithm is said to perform generative training because f displaystyle f can be regarded as a generative model that explains how the data were generated Generative training algorithms are often simpler and more computationally efficient than discriminative training algorithms In some cases the solution can be computed in closed form as in naive Bayes and linear discriminant analysis Generalizations edit There are several ways in which the standard supervised learning problem can be generalized Semisupervised learning In this setting the desired output values are provided only for a subset of the training data The remaining data is unlabeled Weak supervision In this setting noisy limited or imprecise sources are used to provide supervision signal for labeling training data Active learning Instead of assuming that all of the training examples are given at the start active learning algorithms interactively collect new examples typically by making queries to a human user Often the queries are based on unlabeled data which is a scenario that combines semisupervised learning with active learning Structured prediction When the desired output value is a complex object such as a parse tree or a labeled graph then standard methods must be extended Learning to rank When the input is a set of objects and the desired output is a ranking of those objects then again the standard methods must be extended Approaches and algorithms edit Analytical learning Artificial neural network Backpropagation Boosting metaalgorithm Bayesian statistics Casebased reasoning Decision tree learning Inductive logic programming Gaussian process regression Genetic Programming Group method of data handling Kernel estimators Learning Automata Learning Classifier Systems Minimum message length decision trees decision graphs etc Multilinear subspace learning Naive Bayes classifier Maximum entropy classifier Conditional random field Nearest Neighbor Algorithm Probably approximately correct learning PAC learning Ripple down rules a knowledge acquisition methodology Symbolic machine learning algorithms Subsymbolic machine learning algorithms Support vector machines Minimum Complexity Machines MCM Random Forests Ensembles of Classifiers Ordinal classification Data Preprocessing Handling imbalanced datasets Statistical relational learning Proaftn a multicriteria classification algorithm Zero shot learning Applications edit Bioinformatics Cheminformatics Quantitative structureactivity relationship Database marketing Handwriting recognition Information retrieval Learning to rank Information extraction Object recognition in computer vision Optical character recognition Spam detection Pattern recognition Speech recognition Supervised learning is a special case of Downward causation in biological systems General issues edit Computational learning theory Inductive bias Overfitting machine learning Uncalibrated Class membership probabilities Unsupervised learning Version spaces See also edit List of datasets for machine learning research References edit Stuart J Russell Peter Norvig 2010 Artificial Intelligence A Modern Approach Third Edition Prentice Hall mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput idlockfree amwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput idlocklimited amwparseroutput idlockregistration amwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput idlocksubscription amwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em ISBN 9780136042594 Mehryar Mohri Afshin Rostamizadeh Ameet Talwalkar 2012 Foundations of Machine Learning The MIT Press ISBN 9780262018258 S Geman E Bienenstock and R Doursat 1992 Neural networks and the biasvariance dilemma Neural Computation 4 158 G James 2003 Variance and Bias for General Loss Functions Machine Learning 51 115135 httpwwwbcfuscedugarethresearchbvpdf CE Brodely and MA Friedl 1999 Identifying and Eliminating Mislabeled Training Instances Journal of Artificial Intelligence Research 11 131167 httpjairorgmedia606live6061803jairpdf MR Smith and T Martinez 2011 Improving Classification Accuracy by Identifying and Removing Instances that Should Be Misclassified Proceedings of International Joint Conference on Neural Networks IJCNN 2011 pp26902697 CiteSeerX 10112211371 doi 101109IJCNN20116033571 Vapnik V N The Nature of Statistical Learning Theory 2nd Ed Springer Verlag 2000 External links edit Machine Learning Open Source Software MLOSS 