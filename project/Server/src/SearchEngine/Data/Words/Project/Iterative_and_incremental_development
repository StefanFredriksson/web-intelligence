Iterative and incremental development Iterative and incremental development is any combination of both iterative design or iterative method and incremental build model for development Usage of the term began in software development with a longstanding combination of the two terms iterative and incremental 1 having been widely suggested for large development efforts For example the 1985 DODSTD2167 2 mentions in section 412 During software development more than one iteration of the software development cycle may be in progress at the same time and This process may be described as an evolutionary acquisition or incremental build approach In software the relationship between iterations and increments is determined by the overall software development process Software development Core activities Processes Requirements Design Engineering Construction Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DevOps DAD DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TSP OpenUP UP XP Supporting disciplines Configuration management Documentation Software quality assurance SQA Project management User experience Practices ATDD BDD CCO CI CD DDD PP SBE Standup TDD Tools Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing Standards and Bodies of Knowledge BABOK CMMI IEEE standards ISO 9001 ISOIEC standards PMBOK SWEBOK ITIL Glossaries Artificial intelligence Computer science Electrical and electronics engineering v t e Iterative development model Contents 1 Overview 11 Phases 12 UsageHistory 13 Contrast with Waterfall development 14 Implementation guidelines 2 Use in hardware and embedded systems 3 See also 4 Notes 5 References Overview edit A simplified version of a typical iteration cycle in agile project management The basic idea behind this method is to develop a system through repeated cycles iterative and in smaller portions at a time incremental allowing software developers to take advantage of what was learned during development of earlier parts or versions of the system Learning comes from both the development and use of the system where possible key steps in the process start with a simple implementation of a subset of the software requirements and iteratively enhance the evolving versions until the full system is implemented At each iteration design modifications are made and new functional capabilities are added 3 The procedure itself consists of the initialization step the iteration step and the Project Control List The initialization step creates a base version of the system The goal for this initial implementation is to create a product to which the user can react It should offer a sampling of the key aspects of the problem and provide a solution that is simple enough to understand and implement easily To guide the iteration process a project control list is created that contains a record of all tasks that need to be performed It includes items such as new features to be implemented and areas of redesign of the existing solution The control list is constantly being revised as a result of the analysis phase The iteration involves the redesign and implementation of iteration is to be simple straightforward and modular supporting redesign at that stage or as a task added to the project control list clarification needed The level of design detail is not dictated by the iterative approach In a lightweight iterative project the code may represent the major source of documentation of the system however in a critical iterative project a formal Software Design Document may be used The analysis of an iteration is based upon user feedback and the program analysis facilities available It involves analysis of the structure modularity usability reliability efficiency achievement of goals The project control list is modified in light of the analysis results Iterative development Phases edit Incremental development slices the system functionality into increments portions In each increment a slice of functionality is delivered through crossdiscipline work from the requirements to the deployment The Unified Process groups incrementsiterations into phases inception elaboration construction and transition Inception identifies project scope requirements functional and nonfunctional and risks at a high level but in enough detail that work can be estimated Elaboration delivers a working architecture that mitigates the top risks and fulfills the nonfunctional requirements Construction incrementally fillsin the architecture with productionready code produced from analysis design implementation and testing of the functional requirements Transition delivers the system into the production operating environment Each of the phases may be divided into 1 or more iterations which are usually timeboxed rather than featureboxed Architects and analysts work one iteration ahead of developers and testers to keep their workproduct backlog full UsageHistory edit Many examples of early usage are provided in Craig Larman and Victor Basili s article Iterative and Incremental Development A Brief History 4 with one of the earliest being NASAs 1960s Project Mercury Some of those Mercury engineers later formed a new division within IBM where another early and striking example of a major IID success was the very heart of NASAs space shuttle softwarethe primary avionics software system which they built from 1977 to 1980 The team applied IID in a series of 17 iterations over 31 months averaging around eight weeks per iteration Their motivation for avoiding the waterfall life cycle was that the shuttle programs requirements changed during the software development process 4 Some organizations such as the US Department of Defense have a preference for iterative methodologies starting with MILSTD498 clearly encouraging evolutionary acquisition and IID The DoD Instruction 50002 released in 2000 stated a clear preference for IID There are two approaches evolutionary and single step waterfall to full capability An evolutionary approach is preferred In this approach the ultimate capability delivered to the user is divided into two or more blocks with increasing increments of capabilitysoftware development shall follow an iterative spiral development process in which continually expanding software versions are based on learning from earlier development It can also be done in phases Recent revisions to DoDI 500002 no longer refer to spiral development but do advocate the general approach as a baseline for softwareintensive developmentprocurement programs 5 In addition the United States Agency for International Development USAID also employs an iterative and incremental developmental approach to its programming cycle to design monitor evaluate learn and adapt international development projects with a project management approach that focuses on incorporating collaboration learning and adaptation strategies to iterate and adapt programming 6 Contrast with Waterfall development edit Programming paradigms Action Agentoriented Arrayoriented Automatabased Concurrent computing Relativistic programming Datadriven Declarative contrast Imperative Functional Functional logic Purely functional Logic Abductive logic Answer set Concurrent logic Functional logic Inductive logic Constraint Constraint logic Concurrent constraint logic Dataflow Flowbased Reactive Ontology Differentiable Dynamicscripting Eventdriven Functionlevel contrast Valuelevel Pointfree style Concatenative Generic Imperative contrast Declarative Procedural Objectoriented Polymorphic Intentional Languageoriented Domainspecific Literate Naturallanguage programming Metaprogramming Automatic Inductive programming Reflective Attributeoriented Macro Template Nonstructured contrast Structured Array Nondeterministic Parallel computing Processoriented Probabilistic Quantum Settheoretic Stackbased Structured contrast Nonstructured Blockstructured Structured concurrency Objectoriented Actorbased Classbased Concurrent Prototypebased By separation of concerns Aspectoriented Roleoriented Subjectoriented Recursive Symbolic Valuelevel contrast Functionlevel v t e The main cause of the software development projects failure is the choice of the model so should be made with a great care vague 7 For example the Waterfall development paradigm completes the projectwide workproducts of each discipline in one step before moving on to the next discipline in a succeeding step Business value is delivered all at once and only at the very end of the project whereas backtracking clarification needed is possible in an iterative approach Comparing the two approaches some patterns begin to emerge citation needed User involvement In the waterfall model the user is involved in two stages of the model ie requirements and acceptance testing and possibly creation of user education material Whereas in the incremental model the client is involved at each and every stage Variability The software is delivered to the user only after the build stage of the life cycle is completed for user acceptance testing On the other hand every increment is delivered to the user and after the approval of user the developer is allowed to move towards the next module Human resources In the incremental model fewer staff are potentially required as compared to the waterfall model Time limitation An operational product is delivered after months while in the incremental model the product is given to the user within a few weeks Project size Waterfall model is unsuitable for small projects while the incremental model is suitable for small as well as large projects Implementation guidelines edit Guidelines that drive software implementation and analysis include citation needed Any difficulty in design coding and testing a modification should signal the need for redesign or recoding Modifications should fit easily into isolated and easytofind modules If they do not some redesign is possibly needed Modifications to tables should be especially easy to make If any table modification is not quickly and easily done redesign is indicated Modifications should become easier to make as the iterations progress If they are not there is a basic problem such as a design flaw or a proliferation of patches Patches should normally be allowed to exist for only one or two iterations Patches may be necessary to avoid redesigning during an implementation phase The existing implementation should be analyzed frequently to determine how well it measures up to project goals Program analysis facilities should be used whenever available to aid in the analysis of partial implementations User reaction should be solicited and analyzed for indications of deficiencies in the current implementation Use in hardware and embedded systems edit While the term iterative and incremental development got started in the software industry many hardware and embedded software development efforts are using iterative and incremental techniques Examples of this may be seen in a number of industries One sector that has recently been substantially affected by this shift of thinking has been the space launch industry with substantial new competitive forces at work brought about by faster and more extensive technology innovation brought to bear by the formation of private companies pursuing space launch These companies such as SpaceX 8 and Rocket Lab 9 are now both providing commercial orbital launch services in the past decade something that only six nations had done prior to a decade 10 ago New innovation in technology development approaches pricing and service offeringsincluding the ability that has existed only since 2016 to fly to space on a previouslyflown reusable booster stage further decreasing the price of obtaining access to space 11 8 SpaceX has been explicit about its effort to bring iterative design practices into the space industry and uses the technique on spacecraft launch vehicles electronics and avionics and operational flight hardware operations 12 As the industry has begun to change other launch competitors are beginning to change their longterm development practices with government agencies as well For example the large US launch service provider United Launch Alliance ULA began in 2015 a decadelong project to restructure its launch businessreducing two lau nch vehicles to one using an iterative and incremental approach to get to a partiallyreusable and much lowercost launch system over the next decade 13 See also edit Adaptive management Continuous integration DevOps Incremental adoption Dynamic systems development method GoalDriven Software Development Process Interaction design Kaizen Microsoft Solutions Framework Objectoriented analysis and design OpenUPBasic PDCA Rapid application development Release early release often Notes edit Larman Craig June 2003 Iterative and Incremental Development A Brief History PDF Computer 36 6 4756 doi 101109MC20031204375 ISSN 00189162 We were doing incremental development as early as 1957 in Los Angeles under the direction of Bernie Dimsdale at IBMs ServiceBureau Corporation He was a colleague of John von Neumann so perhaps he learned it there or assumed it as totally natural I do remember Herb Jacobs primarily though we all participated developing a large simulation for Motorola where the technique used was as far as I can tell mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em DODSTD2167 Defense Systems Software Development 04 JUN 1985 on everyspeccom Farcic Viktor January 21 2014 Software Development Models Iterative and Incremental Development Technology Conversations a b Iterative and Incremental Development A Brief History Craig Larman and Victor Basili IEEE Computer June 2003 Kendall Frank Gilmore J Michael Halvorsen Terry 20170202 Operation of the Defense Acquisition System PDF DoD Issuances Under Secretary of Defense for Acquisition Technology and Logistics pp1214 Archived from the original PDF on 20170809 Retrieved 20170809 USAID ADS Chapter 201 Program Cycle Operational Policy Retrieved April 19 2017 Difference between Waterfall and Incremental Model May 19 2016 a b Belfiore Michael 9 December 2013 The Rocketeer Foreign Policy Retrieved 11 November 2018 Exclusive Inside Look at Rocket Labs Previouslysecret new Mega Factory Everyday Astronaut 11 October 2018 Retrieved 11 November 2018 Clark Stephen 28 September 2008 Sweet Success at Last for Falcon 1 Rocket Spaceflight Now Retrieved 11 November 2018 the first privately developed liquidfueled rocket to successfully reach orbit Berger Eric 20180625 Russias Proton rocket which predates Apollo will finally stop flying Technical problems rise of SpaceX are contributing factors arsTechica Retrieved 20180626 the rapid rise of lowcost alternatives such as SpaceXs Falcon 9 rocket have caused the number of Proton launches in a given year to dwindle from eight or so to just one or two Fernholz Tim 21 October 2014 What it took for Elon Musks SpaceX to disrupt Boeing leapfrog NASA and become a serious space company Quartz Retrieved 11 November 2018 But SpaceX always thought of itself as a tech firm and its clashes with NASA often took a form computer developersor anyone familiar with the troubled rollout of healthcaregovwould recognize as generational SpaceX followed an iterative design process continually improving prototypes in response to testing Traditional product management calls for a robust plan executed to completion a recipe for cost overruns Gruss Mike 20150424 Evolution of a Plan ULA Execs Spell Out Logic Behind Vulcan Design Choices Space News Retrieved 25 April 2015 ULAs April 13 announcement that it would develop a rocket dubbed Vulcan using an incremental approach whose first iteration essentially is an Atlas 5 outfitted with a new first stage This article includes a list of references but its sources remain unclear because it has insufficient inline citations Please help to improve this article by introducing more precise citations September 2010 Learn how and when to remove this template message References edit Dr Alistair Cockburn May 2008 Using Both Incremental and Iterative Development PDF STSC CrossTalk USAF Software Technology Support Center 21 5 2730 ISSN 21601593 Retrieved 20110720 Craig Larman Victor R Basili June 2003 Iterative and Incremental Development A Brief History PDF IEEE Computer IEEE Computer Society 36 6 4756 doi 101109MC20031204375 ISSN 00189162 Retrieved 20090110 v t e Software engineering Fields Computer programming Requirements engineering Software deployment Software design Software maintenance Software testing Systems analysis Formal methods Concepts Data modeling Enterprise architecture Functional specification Modeling language Orthogonality Programming paradigm Software Software archaeology Software architecture Software configuration management Software development methodology Software development process Software quality Software quality assurance Software verification and validation Structured analysis Orientations Agile Aspectoriented Object orientation Ontology Service orientation SDLC Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD UP Scrum Spiral model VModel Waterfall model XP Other SPICE CMMI Data model ER model Function model Information model Metamodeling Object model Systems model View model Languages IDEF UML USL SysML Software engineers Victor Basili Kent Beck Grady Booch Fred Brooks Barry Boehm Peter Chen Danese Cooper Ward Cunningham Tom DeMarco Edsger W Dijkstra Delores M Etter Martin Fowler Adele Goldstine Margaret Hamilton C A R Hoare Lois Haibt Mary Jean Harrold Grace Hopper Watts Humphrey Michael A Jackson Ivar Jacobson Alan Kay Nancy Leveson Stephen J Mellor Bertrand Meyer David Parnas Trygve Reenskaug Winston W Royce James Rumbaugh Mary Shaw Peri Tarr Elaine Weyuker Niklaus Wirth Edward Yourdon Related fields Computer science Computer engineering Project management Risk management Systems engineering Category Commons