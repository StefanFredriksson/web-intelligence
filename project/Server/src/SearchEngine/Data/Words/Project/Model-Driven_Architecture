Modeldriven architecture Modeldriven architecture MDA is a software design approach for the development of software systems It provides a set of guidelines for the structuring of specifications which are expressed as models Modeldriven architecture is a kind of domain engineering and supports modeldriven engineering of software systems It was launched by the Object Management Group OMG in 2001 1 Contents 1 Overview 11 Related standards 12 Trademark 2 Modeldriven architecture topics 21 MDA approach 22 MDA tools 23 MDA concerns 3 Code generation controversy 4 See also 5 References 6 Further reading 7 External links Overview edit Then given a platform model corresponding to CORBA NET the Web etc the platform independent model PIM is translated to one or more platformspecific models PSMs that computers can run This requires mappings and transformations and should be modeled too The OMG organization provides rough specifications rather than implementations often as answers to Requests for Proposals RFPs Implementations come from private companies or open source groups Related standards edit The MDA model is related to multiple standards including the Unified Modeling Language UML the MetaObject Facility MOF XML Metadata Interchange XMI Enterprise Distributed Object Computing EDOC the Software Process Engineering Metamodel SPEM and the Common Warehouse Metamodel CWM Note that the term architecture in Modeldriven architecture does not refer to the architecture of the system being modeled but rather to the architecture of the various standards and model forms that serve as the technology basis for MDA Executable UML was the UML profile used when MDA was born Now the OMG is promoting fUML instead The action language for fUML is ALF Trademark edit The Object Management Group holds registered trademarks on the term Model Driven Architecture and its acronym MDA as well as trademarks for terms such as Model Based Application Development Model Driven Application Development Model Based Application Development Model Based Programming Model Driven Systems and others 2 Modeldriven architecture topics edit MDA approach edit OMG focuses Modeldriven architecture on forward engineering ie producing code from abstract humanelaborated modelling diagrams eg class diagrams citation needed OMGs ADTF Analysis and Design Task Force group leads this effort With some humour the group chose ADM MDA backwards to name the study of reverse engineering ADM decodes to ArchitectureDriven Modernization The objective of ADM is to produce standards for modelbased reverse engineering of legacy systems 3 Knowledge Discovery Metamodel KDM is the furthest along of these efforts and describes information systems in terms of various assets programs specifications data test files database schemas etc As the concepts and technologies used to realize designs and the concepts and technologies used to realize architectures have changed at their own pace decoupling them allows system developers to choose from the best and most fitting in both domains The design addresses the functional use case requirements while architecture provides the infrastructure through which nonfunctional requirements like scalability reliability and performance are realized MDA envisages that the platform independent model PIM which represents a conceptual design realizing the functional requirements will survive changes in realization technologies and software architectures Of particular importance to modeldriven architecture is the notion of model transformation A specific standard language for model transformation has been defined by OMG called QVT MDA tools edit The OMG organization provides rough specifications rather than implementations often as answers to Requests for Proposals RFPs The OMG documents the overall process in a document called the MDA Guide Basically an MDA tool is a tool used to develop interpret compare align measure verify transform etc models or metamodels 4 In the following section model is interpreted as meaning any kind of model eg a UML model or metamodel eg the CWM metamodel In any MDA approach we have essentially two kinds of models initial models are created manually by human agents while derived models are created automatically by programs For example an analyst may create a UML initial model from its observation of some loose business situation while a Java model may be automatically derived from this UML model by a Model transformation operation An MDA tool may be a tool used to check models for completeness inconsistencies or error and warning conditions Also used to calculate metrics for the model 5 Some tools perform more than one of the functions listed above For example some creation tools may also have transformation and test capabilities There are other tools that are solely for creation solely for graphical presentation solely for transformation etc Implementations of the OMG specifications come from private companies or open source groups One important source of implementations for OMG specifications is the Eclipse Foundation EF Many implementations of OMG modeling standards may be found in the Eclipse Modeling Framework EMF or Graphical Modeling Framework GMF the Eclipse foundation is also developing other tools of various profiles as GMT Eclipses compliance to OMG specifications is often not strict This is true for example for OMGs EMOF standard which EMF approximates with its Ecore implementation More examples may be found in the M2M project implementing the QVT standard or in the M2T project implementing the MOF2Text standard One should be careful not to confuse the List of MDA Tools and the List of UML tools the former being much broader This distinction can be made more general by distinguishing variable metamodel tools and fixed metamodel tools A UML CASE tool is typically a fixed metamodel tool since it has been hardwired to work only with a given version of the UML metamodel eg UML 21 On the contrary other tools have internal generic capabilities allowing them to adapt to arbitrary metamodels or to a particular kind of metamodels Usually MDA tools focus rudimentary architecture specification although in some cases the tools are architectureindependent or platform independent Simple examples of architecture specifications include Selecting one of a number of supported reference architectures like Java EE or Microsoft NET Specifying the architecture at a finer level including the choice of presentation layer technology business logic layer technology persistence technology and persistence mapping technology eg objectrelational mapper Metadata information about data MDA concerns edit Some key concepts that underpin the MDA approach launched in 2001 were first elucidated by the ShlaerMellor method during the late 1980s Indeed a key absent technical standard of the MDA approach that of an action language syntax for Executable UML has been bridged by some vendors by adapting the original ShlaerMellor Action Language modified for UML citation needed However during this period the MDA approach has not gained mainstream industry acceptance with the Gartner Group still identifying MDA as an on the rise technology in its 2006 Hype Cycle 6 and Forrester Research declaring MDA to be DOA in 2006 7 Potential concerns that have been raised with the OMG MDA approach include Incomplete Standards The MDA approach is underpinned by a variety of technical standards some of which are yet to be specified eg an action semantic language for xtUML or are yet to be implemented in a standard manner eg a QVT transformation engine or a PIM with a virtual execution environment 8 9 Vendor Lockin Although MDA was conceived as an approach for achieving technical platform independence current MDA vendors have been reluctant to engineer their MDA toolsets to be interoperable Such an outcome could result in vendor lockin for those pursuing an MDA approach citation needed Idealistic MDA is conceived as a forward engineering approach in which models that incorporate Action Language programming are transformed into implementation artifacts eg executable code database schema in one direction via a fully or partially automated generation step This aligns with OMGs vision that MDA should allow modelling of a problem domains full complexity in UML and related standards with subsequent transformation to a complete executable application 10 This approach does however imply that changes to implementation artifacts eg database schema tuning are not supported This constitutes a problem in situations where such posttransformation adapting of implementation artifacts is seen to be necessary Evidence that the full MDA approach may be too idealistic for some real world deployments has been seen in the rise of socalled pragmatic MDA 11 Pragmatic MDA blends the literal standards from OMGs MDA with more traditional model driven mechanisms such as roundtrip engineering that provides support for adapting implementation artifacts Specialised Skillsets Practitioners of MDA based software engineering are as with other toolsets required to have a high level of expertise in their field Current expert MDA practitioners often referred to as ModellerArchitects are scarce relative to the availability of traditional developers 12 OMG Track Record The OMG consortium who sponsor the MDA approach and own the MDA trademark also introduced and sponsored the CORBA standard which itself failed to materialise as a widely utilised standard 13 Uncertain Value Proposition UVP As discussed the vision of MDA allows for the specification of a system as an abstract model which may be realized as a concrete implementation program for a particular computing platform eg NET Thus an application that has been successfully developed via a pure MDA approach could theoretically be ported to a newer release NET platform or even a Java platform in a deterministic manner although significant questions remain as to realworld practicalities during translation such as user interface implementation Whether this capability represents a significant value proposition remains a question for particular adopters Regardless adopters of MDA who are seeking value via an alternative to programming should be very careful when assessing this approach The complexity of any given problem domain will always remain and the programming of business logic needs to be undertaken in MDA as with any other approach The difference with MDA is that the programming language used eg xtUML is more abstract than say Java or C and exists interwoven with traditional UML artifacts eg class diagrams Whether programming in a language that is more abstract than mainstream 3GL languages will result in systems of better quality cheaper cost or faster delivery is a question that has yet to be adequately answered MDA was recognized as a possible way to bring various independently developed standardized solutions together For the simulation community it was recommended as a business and industry based alternative to yet another US DoD mandated standard 14 Code generation controversy edit Code generation means that the user abstractly models solutions which are connoted by some model data and then an automated tool derives from the models parts or all of the source code for the software system In some tools the user can provide a skeleton of the program source code in the form of a source code template where predefined tokens are then replaced with program source code parts during the code generation process An often cited criticism is that the UML diagrams just lack the detail which is needed to contain the same information as is covered with the program source Some developers even claim that the Code is the design 15 16 See also edit ATLAS Transformation Language Automatic programming Domaindriven design Enterprise Resource Planning Executable UML Executable Architecture MetaObject Facility Metamodeling Modeldriven engineering Modeldriven integration Modeldriven security Model Driven Interoperability Modeldriven application Model Transformation Language Modeling Maturity Levels Platformindependent model Platformspecific model Software factory Unified Modeling Language Universal Systems Language QVT Web engineering WebML References edit OMG pursues new strategic direction to build on success of past efforts Archived 20060924 at the Wayback Machine httpwwwomgorglegaltmlisthtm adm website httpadmomgorg Bézivin J Gérard S Muller PA and Rioux L 2003 MDA components Challenges and Opportunities PDF In Metamodelling for MDA Archived from the original PDF on 20061206 Cite journal requires journal help CS1 maint multiple names authors list link mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em Monperrus Martin Jézéquel JeanMarc Champeau Joël Hoeltzener Brigitte 2008 A ModelDriven Measurement Approach Model Driven Engineering Languages and Systems Lecture Notes in Computer Science 5301 pp505519 doi 101007978354087875936 ISBN 9783540878742 ISSN 03029743 Hype Cycle for Emerging Technologies 2006 49500 MDA Is DOA Partly Thanks To SOA Archived 20071013 at the Wayback Machine UML Unified or Universal Modeling Language UML2 OCL MOF EDOC The Emperor Has Too Many Clothes MDA Nice Idea Shame about the Bringing MDA to Eclipse using a pragmatic approach A Response to Forrester Are You Ready For the MDA The Rise and Fall of CORBA Archived 20081202 at the Wayback Machine Avoiding Another Green Elephant httpwwwdeveloperdotstarcommagarticlesreevesdesignmainhtml by Jack W Reeves BleadingEdge Further reading edit Kevin Lano ModelDriven Software Development With UML and Java CENGAGE Learning ISBN 9781844809523 David S Frankel Model Driven Architecture Applying MDA to Enterprise Computing John Wiley Sons ISBN 0471319201 Meghan Kiffer The MDA Journal Model Driven Architecture Straight From The Masters ISBN 0929652258 Anneke Kleppe 2003 MDA Explained The Model Driven Architecture Practice and Promise AddisonWesley ISBN 032119442X Stephen J Mellor 2004 MDA Distilled Principles of Model Driven Architecture AddisonWesley Professional ISBN 0201788918 Chris Raistrick Model Driven Architecture With Executable UML Cambridge University Press ISBN 0521537711 Marco Brambilla Jordi Cabot Manuel Wimmer Model Driven Software Engineering in Practice foreword by Richard Soley OMG Chairman Morgan Claypool USA 2012 Synthesis Lectures on Software Engineering 1 182 pages ISBN 9781608458820 paperback ISBN 9781608458837 ebook httpwwwmdsebookcom Stanley J Sewall Executive Justification for MDA Soylu A De Causmaecker Patrick Merging model driven and ontology driven system development approaches pervasive computing perspective in Proc 24th Intl Symposium on Computer and Information Sciences 2009 pp 730735 External links edit OMGs MDA Web site ModelDriven Software Development Course B Tekinerdogan Bilkent University v t e Unified Modeling Language Actors Organizations Object Management Group UML Partners Persons Grady Booch Ivar Jacobson James Rumbaugh Concepts Object oriented Objectoriented programming Objectoriented analysis and design Objectoriented modeling Structure Actor Attribute Artifact Class Component Interface Object Package Profile diagram Behavior Activity Event Message Method State Use case Relationships Association Composition Dependency Generalization or Inheritance Extensibility Profile Stereotype Other Multiplicity Diagrams Structure Class Component Composite structure Deployment Object Package Behaviour Activity State Machine Use case Interaction Communications Sequence Interaction overview Timing Derived languages Systems Modeling Language SysML UML eXchange Format UXF XML Metadata Interchange XMI Executable UML xUML Other topics Glossary of UML terms Rational Unified Process List of Unified Modeling Language tools Object Modeling in Color Authority control GND 48323652 LCCN sh2008001499