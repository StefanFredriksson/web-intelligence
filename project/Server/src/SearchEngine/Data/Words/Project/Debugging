Debugging Debug redirects here For other uses see Debug disambiguation Software development Core activities Processes Requirements Design Engineering Construction Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DevOps DAD DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TSP OpenUP UP XP Supporting disciplines Configuration management Documentation Software quality assurance SQA Project management User experience Practices ATDD BDD CCO CI CD DDD PP SBE Standup TDD Tools Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing Standards and Bodies of Knowledge BABOK CMMI IEEE standards ISO 9001 ISOIEC standards PMBOK SWEBOK ITIL Glossaries Artificial intelligence Computer science Electrical and electronics engineering v t e Debugging is the process of finding and resolving defects or problems within a computer program that prevent correct operation of computer software or a system Debugging tactics can involve interactive debugging control flow analysis unit testing integration testing log file analysis monitoring at the application or system level memory dumps and profiling Contents 1 Origin of the term 2 Scope 3 Tools 4 Debugging process 5 Techniques 6 Debugging for embedded systems 7 Antidebugging 8 See also 9 References 10 Further reading 11 External links Origin of the term edit A computer log entry from the MarkII with a moth taped to the page The terms bug and debugging are popularly attributed to Admiral Grace Hopper in the 1940s 1 While she was working on a Mark II computer at Harvard University her associates discovered a moth stuck in a relay and thereby impeding operation whereupon she remarked that they were debugging the system However the term bug in the sense of technical error dates back at least to 1878 and Thomas Edison see software bug for a full discussion Similarly the term debugging seems to have been used as a term in aeronautics before entering the world of computers Indeed in an interview Grace Hopper remarked that she was not coining the term citation needed The moth fit the already existing terminology so it was saved A letter from J Robert Oppenheimer director of the WWII atomic bomb Manhattan project at Los Alamos NM used the term in a letter to Dr Ernest Lawrence at UC Berkeley dated October 27 1944 2 regarding the recruitment of additional technical staff The Oxford English Dictionary entry for debug quotes the term debugging used in reference to airplane engine testing in a 1945 article in the Journal of the Royal Aeronautical Society An article in Airforce June 1945 p50 also refers to debugging this time of aircraft cameras Hoppers bug was found on September 9 1947 Computer programmers did not adopt the term until the early 1950sThe seminal article by Gill 3 in 1951 is the earliest indepth discussion of programming errors but it does not use the term bug or debuggingIn the ACM s digital library the term debugging is first used in three papers from 1952 ACM National Meetings 4 5 6 Two of the three use the term in quotation marksBy 1963 debugging was a commonenough term to be mentioned in passing without explanation on page 1 of the CTSS manual 7 Kidwells article Stalking the Elusive Computer Bug 8 discusses the etymology of bug and debug in greater detail Scope edit As software and electronic systems have become generally more complex the various common debugging techniques have expanded with more methods to detect anomalies assess impact and schedule software patches or full updates to a system The words anomaly and discrepancy can be used as being more neutral terms to avoid the words error and defect or bug where there might be an implication that all socalled errors defects or bugs must be fixed at all costs Instead an impact assessment can be made to determine if changes to remove an anomaly or discrepancy would be costeffective for the system or perhaps a scheduled new release might render the changes unnecessary Not all issues are safetycritical or missioncritical in a system Also it is important to avoid the situation where a change might be more upsetting to users longterm than living with the known problems where the cure would be worse than the disease Basing decisions of the acceptability of some anomalies can avoid a culture of a zerodefects mandate where people might be tempted to deny the existence of problems so that the result would appear as zero defects Considering the collateral issues such as the costversusbenefit impact assessment then broader debugging techniques will expand to determine the frequency of anomalies how often the same bugs occur to help assess their impact to the overall system Tools edit See also Debugger Debugging on video game consoles is usually done with special hardware such as this Xbox debug unit intended for developers Debugging ranges in complexity from fixing simple errors to performing lengthy and tiresome tasks of data collection analysis and scheduling updates The debugging skill of the programmer can be a major factor in the ability to debug a problem but the difficulty of software debugging varies greatly with the complexity of the system and also depends to some extent on the programming language s used and the available tools such as debuggers Debuggers are software tools which enable the programmer to monitor the execution of a program stop it restart it set breakpoints and change values in memory The term debugger can also refer to the person who is doing the debugging Generally highlevel programming languages such as Java make debugging easier because they have features such as exception handling and type checking that make real sources of erratic behaviour easier to spot In programming languages such as C or assembly bugs may cause silent problems such as memory corruption and it is often difficult to see where the initial problem happened In those cases memory debugger tools may be needed In certain situations general purpose software tools that are language specific in nature can be very useful These take the form of static code analysis tools These tools look for a very specific set of known problems some common and some rare within the source code concentrating more on the semantics eg data flow rather than the syntax as compilers and interpreters do Both commercial and free tools exist for various languages some claim to be able to detect hundreds of different problems These tools can be extremely useful when checking very large source trees where it is impractical to do code walkthroughs A typical example of a problem detected would be a variable dereference that occurs before the variable is assigned a value As another example some such tools perform strong type checking when the language does not require it Thus they are better at locating likely errors in code that is syntactically correct But these tools have a reputation of false positives where correct code is flagged as dubious The old Unix lint program is an early example For debugging electronic hardware eg computer hardware as well as lowlevel software eg BIOSes device drivers and firmware instruments such as oscilloscopes logic analyzers or incircuit emulators ICEs are often used alone or in combination An ICE may perform many of the typical software debuggers tasks on lowlevel software and firmware Debugging process edit Normally the first step in debugging is to attempt to reproduce the problem This can be a nontrivial task for example as with parallel processes and some Heisenbugs Also specific user environment and usage history can make it difficult to reproduce the problem After the bug is reproduced the input of the program may need to be simplified to make it easier to debug For example a bug in a compiler can make it crash when parsing some large source file However after simplification of the test case only few lines from the original source file can be sufficient to reproduce the same crash Such simplification can be made manually using a divideandconquer approach The programmer will try to remove some parts of original test case and check if the problem still exists When debugging the problem in a GUI the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear After the test case is sufficiently simplified a programmer can use a debugger tool to examine program states values of variables plus the call stack and track down the origin of the problems Alternatively tracing can be used In simple cases tracing is just a few print statements which output the values of variables at certain points of program execution citation needed Techniques edit Interactive debugging Print debugging or tracing is the act of watching live or recorded trace statements or print statements that indicate the flow of execution of a process This is sometimes called printf debugging due to the use of the printf function in C This kind of debugging was turned on by the command TRON in the original versions of the noviceoriented BASIC programming language TRON stood for Trace On TRON caused the line numbers of each BASIC command line to print as the program ran Remote debugging is the process of debugging a program running on a system different from the debugger To start remote debugging a debugger connects to a remote system over a communications link such as a local area network The debugger can then control the execution of the program on the remote system and retrieve information about its state Postmortem debugging is debugging of the program after it has already crashed Related techniques often include various tracing techniques like examining log files outputting a call stack on crash 9 and analysis of memory dump or core dump of the crashed process The dump of the process could be obtained automatically by the system for example when the process has terminated due to an unhandled exception or by a programmerinserted instruction or manually by the interactive user Wolf fence algorithm Edward Gauss described this simple but very useful and now famous algorithm in a 1982 article for Communications of the ACM as follows Theres one wolf in Alaska how do you find it First build a fence down the middle of the state wait for the wolf to howl determine which side of the fence it is on Repeat process on that side only until you get to the point where you can see the wolf 10 This is implemented eg in the Git version control system as the command git bisect which uses the above algorithm to determine which commit introduced a particular bug Record and replay debugging is the technique of creating a program execution recording which can be replayed and interactively debugged Useful for remote debugging and debugging intermittent nondeterminstic and other hardtoreproduce defects Delta Debugging a technique of automating test case simplification 11 p123 Saff Squeeze a technique of isolating failure within the test using progressive inlining of parts of the failing test 12 Causality tracking There are techniques to track the cause effect chains in the computation 13 Those techniques can be tailored for specific bugs such as null pointer dereferences 14 15 Debugging for embedded systems edit In contrast to the general purpose computer software design environment a primary characteristic of embedded environments is the sheer number of different platforms available to the developers CPU architectures vendors operating systems and their variants Embedded systems are by definition not generalpurpose designs they are typically developed for a single task or small range of tasks and the platform is chosen specifically to optimize that application Not only does this fact make life tough for embedded system developers it also makes debugging and testing of these systems harder as well since different debugging tools are needed for different platforms Despite the challenge of heterogeneity mentioned above some debuggers have been developed commercially as well as research prototypes Examples of commercial solutions come from Green Hills Software 16 and Microchip s MPLABICD for incircuit debugger Two examples of research prototype tools are Aveksha 17 and Flocklab 18 They all leverage a functionality available on lowcost embedded processors an OnChip Debug Module OCDM whose signals are exposed through a standard JTAG interface They are benchmarked based on how much change to the application is needed and the rate of events that they can keep up with In addition to the typical task of identifying bugs in the system embedded system debugging also seeks to collect information about the operating states of the system that may then be used to analyze the system to find ways to boost its performance or to optimize other important characteristics eg energy consumption reliability realtime response etc Antidebugging edit Antidebugging is the implementation of one or more techniques within computer code that hinders attempts at reverse engineering or debugging a target process 19 It is actively used by recognized publishers in copyprotection schemas but is also used by malware to complicate its detection and elimination 20 Techniques used in antidebugging include APIbased check for the existence of a debugger using system information Exceptionbased check to see if exceptions are interfered with Process and thread blocks check whether process and thread blocks have been manipulated Modified code check for code modifications made by a debugger handling software breakpoints Hardware and registerbased check for hardware breakpoints and CPU registers Timing and latency check the time taken for the execution of instructions Detecting and penalizing debugger 20 An early example of antidebugging existed in early versions of Microsoft Word which if a debugger was detected produced a message that said The tree of evil bears bitter fruit Now trashing program disk after which it caused the floppy disk drive to emit alarming noises with the intent of scaring the user away from attempting it again 21 22 See also edit Assertion software development Automatic bug fixing Debugging pattern Magic debug values Shotgun debugging Software bug Software testing Troubleshooting References edit InfoWorld Oct 5 1981 httpsbancroftberkeleyeduExhibitsphysicsimagesbigscience25jpg S Gill The Diagnosis of Mistakes in Programmes on the EDSAC Proceedings of the Royal Society of London Series A Mathematical and Physical Sciences Vol 206 No 1087 May 22 1951 pp 538554 Robert V D Campbell Evolution of automatic computation Proceedings of the 1952 ACM national meeting Pittsburgh p 2932 1952 Alex Orden Solution of systems of linear inequalities on a digital computer Proceedings of the 1952 ACM national meeting Pittsburgh p 9195 1952 Howard B Demuth John B Jackson Edmund Klein N Metropolis Walter Orvedahl James H Richardson MANIAC doi101145800259808982 Proceedings of the 1952 ACM national meeting Toronto p 1316 The Compatible TimeSharing System MIT Press 1963 Peggy Aldrich Kidwell Stalking the Elusive Computer Bug IEEE Annals of the History of Computing 1998 Postmortem Debugging mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em E J Gauss 1982 Pracniques The Wolf Fence Algorithm for Debugging Communications of the ACM doi 101145358690358695 Zeller Andreas 2005 Why Programs Fail A Guide to Systematic Debugging Morgan Kaufmann ISBN 1558608664 Kent Beck Hit em High Hit em Low Regression Testing and the Saff Squeeze Zeller Andreas 20021101 Isolating causeeffect chains from computer programs ACM SIGSOFT Software Engineering Notes 27 6 1 doi 101145605466605468 ISSN 01635948 Bond Michael D Nethercote Nicholas Kent Stephen W Guyer Samuel Z McKinley Kathryn S 2007 Tracking bad apples Proceedings of the 22nd annual ACM SIGPLAN conference on Object oriented programming systems and applications OOPSLA 07 p405 doi 10114512970271297057 ISBN 9781595937865 Cornu Benoit Barr Earl T Seinturier Lionel Monperrus Martin 2016 Casper Automatic tracking of null dereferences to inception with causality traces Journal of Systems and Software 122 5262 doi 101016jjss201608062 ISSN 01641212 SuperTrace Probe hardware debugger wwwghscom Retrieved 20171125 Tancreti Matthew Hossain Mohammad Sajjad Bagchi Saurabh Raghunathan Vijay 2011 Aveksha A Hardwaresoftware Approach for Nonintrusive Tracing and Profiling of Wireless Embedded Systems Proceedings of the 9th ACM Conference on Embedded Networked Sensor Systems SenSys 11 New York NY USA ACM 288301 doi 10114520709422070972 ISBN 9781450307185 Lim Roman Ferrari Federico Zimmerling Marco Walser Christoph Sommer Philipp Beutel Jan 2013 FlockLab A Testbed for Distributed Synchronized Tracing and Profiling of Wireless Embedded Systems Proceedings of the 12th International Conference on Information Processing in Sensor Networks IPSN 13 New York NY USA ACM 153166 doi 10114524613812461402 ISBN 9781450319591 Shields Tyler 20081202 AntiDebugging Series Part I Veracode Retrieved 20090317 a b Software Protection through AntiDebugging Michael N Gagnon Stephen Taylor Anup Ghosh PDF Archived from the original PDF on 20111001 Retrieved 20101025 Ross J Anderson 20010323 Security Engineering p 684 ISBN 0471389226 Microsoft Word for DOS 115 Further reading edit Agans David J 2002 Debugging The Nine Indispensable Rules for Finding Even the Most Elusive Software and Hardware Problems AMACOM ISBN 0814471684 Blunden Bill 2003 Software Exorcism A Handbook for Debugging and Optimizing Legacy Code APress ISBN 1590592344 Ford Ann R Teorey Toby J 2002 Practical Debugging in C Prentice Hall ISBN 0130653942 Grötker Thorsten Holtmann Ulrich Keding Holger Wloka Markus 2012 The Developers Guide to Debugging Second Edition Createspace ISBN 9781470185527 Metzger Robert C 2003 Debugging by Thinking A Multidisciplinary Approach Digital Press ISBN 1555583075 Myers Glenford J 2004 The Art of Software Testing John Wiley Sons Inc ISBN 0471043281 Robbins John 2000 Debugging Applications Microsoft Press ISBN 0735608865 Telles Matthew A Hsieh Yuan 2001 The Science of Debugging The Coriolis Group ISBN 1576109178 Vostokov Dmitry 2008 Memory Dump Analysis Anthology Volume 1 OpenTask ISBN 9780955832802 Zeller Andreas 2009 Why Programs Fail Second Edition A Guide to Systematic Debugging Morgan Kaufmann ISBN 9780123745156 External links edit Wikiquote has quotations related to Debugging The Wikibook Computer Programming Principles has a page on the topic of Debugging Crash dump analysis patterns indepth articles on analyzing and finding bugs in crash dumps Learn the essentials of debugging how to improve your debugging skills a good article at IBM developerWorks archived from the original on February 18 2007 Plugin Based Debugging For Embedded Systems Embedded Systems test and debug about digital input generation results of a survey about embedded system test and debug Byte Paradigm archived from the original on January 12 2012