Theory of computation Not to be confused with computational theory of mind For the journal see Theory of Computing An artistic representation of a Turing machine Turing machines are frequently used as theoretical models for computing In theoretical computer science and mathematics the theory of computation is the branch that deals with how efficiently problems can be solved on a model of computation using an algorithm The field is divided into three major branches automata theory and languages computability theory and computational complexity theory which are linked by the question What are the fundamental capabilities and limitations of computers 1 In order to perform a rigorous study of computation computer scientists work with a mathematical abstraction of computers called a model of computation There are several models in use but the most commonly examined is the Turing machine 2 Computer scientists study the Turing machine because it is simple to formulate can be analyzed and used to prove results and because it represents what many consider the most powerful possible reasonable model of computation see ChurchTuring thesis 3 It might seem that the potentially infinite memory capacity is an unrealizable attribute but any decidable problem 4 solved by a Turing machine will always require only a finite amount of memory So in principle any problem that can be solved decided by a Turing machine can be solved by a computer that has a finite amount of memory Contents 1 History 2 Branches 21 Automata theory 211 Formal Language theory 22 Computability theory 23 Computational complexity theory 3 Models of computation 4 References 5 Further reading 6 External links History edit The theory of computation can be considered the creation of models of all kinds in the field of computer science Therefore mathematics and logic are used In the last century it became an independent academic discipline and was separated from mathematics Some pioneers of the theory of computation were Ramon Llull Alonzo Church Kurt Gödel Alan Turing Stephen Kleene Rózsa Péter John von Neumann and Claude Shannon Branches edit Automata theory edit Main article Automata theory Grammar Languages Automaton Production rules constraints Type0 Recursively enumerable Turing machine α β displaystyle alpha rightarrow beta no restrictions Type1 Contextsensitive Linearbounded nondeterministic Turing machine α A β α γ β displaystyle alpha Abeta rightarrow alpha gamma beta Type2 Contextfree Nondeterministic pushdown automaton A γ displaystyle Arightarrow gamma Type3 Regular Finite state automaton A a displaystyle Arightarrow a and A a B displaystyle Arightarrow aB Automata theory is the study of abstract machines or more appropriately abstract mathematical machines or systems and the computational problems that can be solved using these machines These abstract machines are called automata Automata comes from the Greek word Αυτόματα which means that something is doing something by itselfAutomata theory is also closely related to formal language theory 5 as the automata are often classified by the class of formal languages they are able to recognize An automaton can be a finite representation of a formal language that may be an infinite set Automata are used as theoretical models for computing machines and are used for proofs about computability Formal Language theory edit Main article Formal language Set inclusions described by the Chomsky hierarchy Language theory is a branch of mathematics concerned with describing languages as a set of operations over an alphabet It is closely linked with automata theory as automata are used to generate and recognize formal languages There are several classes of formal languages each allowing more complex language specification than the one before it ie Chomsky hierarchy 6 and each corresponding to a class of automata which recognizes it Because automata are used as models for computation formal languages are the preferred mode of specification for any problem that must be computed Computability theory edit Main article Computability theory Computability theory deals primarily with the question of the extent to which a problem is solvable on a computer The statement that the halting problem cannot be solved by a Turing machine 7 is one of the most important results in computability theory as it is an example of a concrete problem that is both easy to formulate and impossible to solve using a Turing machine Much of computability theory builds on the halting problem result Another important step in computability theory was Rices theorem which states that for all nontrivial properties of partial functions it is undecidable whether a Turing machine computes a partial function with that property 8 Computability theory is closely related to the branch of mathematical logic called recursion theory which removes the restriction of studying only models of computation which are reducible to the Turing model 9 Many mathematicians and computational theorists who study recursion theory will refer to it as computability theory Computational complexity theory edit Main article Computational complexity theory A representation of the relation among complexity classes Complexity theory considers not only whether a problem can be solved at all on a computer but also how efficiently the problem can be solved Two major aspects are considered time complexity and space complexity which are respectively how many steps does it take to perform a computation and how much memory is required to perform that computation In order to analyze how much time and space a given algorithm requires computer scientists express the time or space required to solve the problem as a function of the size of the input problem For example finding a particular number in a long list of numbers becomes harder as the list of numbers grows larger If we say there are n numbers in the list then if the list is not sorted or indexed in any way we may have to look at every number in order to find the number were seeking We thus say that in order to solve this problem the computer needs to perform a number of steps that grows linearly in the size of the problem To simplify this problem computer scientists have adopted Big O notation which allows functions to be compared in a way that ensures that particular aspects of a machines construction do not need to be considered but rather only the asymptotic behavior as problems become large So in our previous example we might say that the problem requires O n displaystyle On steps to solve Perhaps the most important open problem in all of computer science is the question of whether a certain broad class of problems denoted NP can be solved efficiently This is discussed further at Complexity classes P and NP and P versus NP problem is one of the seven Millennium Prize Problems stated by the Clay Mathematics Institute in 2000 The Official Problem Description was given by Turing Award winner Stephen Cook Models of computation edit Main article Model of computation Aside from a Turing machine other equivalent See ChurchTuring thesis models of computation are in use Lambda calculus A computation consists of an initial lambda expression or two if you want to separate the function and its input plus a finite sequence of lambda terms each deduced from the preceding term by one application of Beta reduction Combinatory logic is a concept which has many similarities to λ displaystyle lambda calculus but also important differences exist eg fixed point combinator Y has normal form in combinatory logic but not in λ displaystyle lambda calculus Combinatory logic was developed with great ambitions understanding the nature of paradoxes making foundations of mathematics more economic conceptually eliminating the notion of variables thus clarifying their role in mathematics μrecursive functions a computation consists of a murecursive function ie its defining sequence any input values and a sequence of recursive functions appearing in the defining sequence with inputs and outputs Thus if in the defining sequence of a recursive function f x displaystyle fx the functions g x displaystyle gx and h x y displaystyle hxy appear then terms of the form g57 or h3210 might appear Each entry in this sequence needs to be an application of a basic function or follow from the entries above by using composition primitive recursion or μ recursion For instance if f x h x g x displaystyle fxhxgx then for f53 to appear terms like g56 and h563 must occur above The computation terminates only if the final term gives the value of the recursive function applied to the inputs Markov algorithm a string rewriting system that uses grammar like rules to operate on strings of symbols Register machine is a theoretically interesting idealization of a computer There are several variants In most of them each register can hold a natural number of unlimited size and the instructions are simple and few in number eg only decrementation combined with conditional jump and incrementation exist and halting The lack of the infinite or dynamically growing external store seen at Turing machines can be understood by replacing its role with Gödel numbering techniques the fact that each register holds a natural number allows the possibility of representing a complicated thing eg a sequence or a matrix etc by an appropriate huge natural number unambiguity of both representation and interpretation can be established by number theoretical foundations of these techniques In addition to the general computational models some simpler computational models are useful for special restricted applications Regular expressions for example specify string patterns in many contexts from office productivity software to programming languages Another formalism mathematically equivalent to regular expressions Finite automata are used in circuit design and in some kinds of problemsolving Contextfree grammars specify programming language syntax Nondeterministic pushdown automata are another formalism equivalent to contextfree grammars Primitive recursive functions are a defined subclass of the recursive functions Different models of computation have the ability to do different tasks One way to measure the power of a computational model is to study the class of formal languages that the model can generate in such a way to the Chomsky hierarchy of languages is obtained References edit Michael Sipser 2013 Introduction to the Theory of Computation 3rd Cengage Learning ISBN 9781133187790 central areas of the theory of computation automata computability and complexity Page 1 mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput idlockfree amwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput idlocklimited amwparseroutput idlockregistration amwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput idlocksubscription amwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em Hodges Andrew 2012 Alan Turing The Enigma The Centenary Edition Princeton University Press ISBN 9780691155647 Rabin Michael O June 2012 Turing Church Gödel Computability Complexity and Randomization A Personal View Donald Monk 1976 Mathematical Logic SpringerVerlag ISBN 9780387901701 Hopcroft John E and Jeffrey D Ullman 2006 Introduction to Automata Theory Languages and Computation 3rd ed Reading MA AddisonWesley ISBN 9780321455369 Chomsky hierarchy 1956 Three models for the description of language Information Theory IRE Transactions on IEEE 2 3 113124 doi 101109TIT19561056813 Alan Turing 1937 On computable numbers with an application to the Entscheidungsproblem Proceedings of the London Mathematical Society IEEE 2 42 230265 doi 101112plmss2421230 Retrieved 6 January 2015 Henry Gordon Rice 1953 Classes of Recursively Enumerable Sets and Their Decision Problems Transactions of the American Mathematical Society American Mathematical Society 74 2 358366 doi 1023071990888 JSTOR 1990888 Martin Davis 2004 The undecidable Basic papers on undecidable propositions unsolvable problems and computable functions Dover Ed Dover Publications ISBN 9780486432281 Further reading edit Textbooks aimed at computer scientists There are many textbooks in this area this list is by necessity incomplete Hopcroft John E and Jeffrey D Ullman 2006 Introduction to Automata Theory Languages and Computation 3rd ed Reading MA AddisonWesley ISBN 9780321455369 One of the standard references in the field Linz P An introduction to formal language and automata Narosa Publishing ISBN 9788173197819 Michael Sipser 2013 Introduction to the Theory of Computation 3rd ed Cengage Learning ISBN 9781133187790 Eitan Gurari 1989 An Introduction to the Theory of Computation Computer Science Press ISBN 0716781824 Archived from the original on 20070107 Hein James L 1996 Theory of Computation Sudbury MA Jones Bartlett ISBN 9780867204971 A gentle introduction to the field appropriate for secondyear undergraduate computer science students Taylor R Gregory 1998 Models of Computation and Formal Languages New York Oxford University Press ISBN 9780195109832 An unusually readable textbook appropriate for upperlevel undergraduates or beginning graduate students Lewis F D 2007 Essentials of theoretical computer science A textbook covering the topics of formal languages automata and grammars The emphasis appears to be on presenting an overview of the results and their applications rather than providing proofs of the results Martin Davis Ron Sigal Elaine J Weyuker Computability complexity and languages fundamentals of theoretical computer science 2nd ed Academic Press 1994 ISBN 0122063821 Covers a wider range of topics than most other introductory books including program semantics and quantification theory Aimed at graduate students Books on computability theory from the wider mathematical perspective Hartley Rogers Jr 1987 Theory of Recursive Functions and Effective Computability MIT Press ISBN 0262680521 S Barry Cooper 2004 Computability Theory Chapman and HallCRC ISBN 1584882379 Carl H Smith A recursive introduction to the theory of computation Springer 1994 ISBN 0387943323 A shorter textbook suitable for graduate students in Computer Science Historical perspective Richard L Epstein and Walter A Carnielli 2000 Computability Computable Functions Logic and the Foundations of Mathematics with Computability A Timeline 2nd ed WadsworthThomson Learning ISBN 0534546447 External links edit Theory of Computation at MIT Theory of Computation at Harvard Computability Logic A theory of interactive computation The main web source on this subject v t e Mathematics Areas of mathematics Foundations Category theory Information theory Mathematical logic Philosophy of mathematics Set theory Algebra Abstract Elementary Linear Multilinear Universal Analysis Calculus Real analysis Complex analysis Differential equations Functional analysis Harmonic analysis Discrete Combinatorics Graph theory Order theory Game theory Geometry Algebraic Analytic Differential Discrete Euclidean Finite Number theory Arithmetic Algebraic number theory Analytic number theory Diophantine geometry Topology Algebraic Differential Geometric Applied Control theory Mathematical biology Mathematical chemistry Mathematical economics Mathematical finance Mathematical physics Mathematical psychology Mathematical statistics Probability Statistics Computational Computer science Theory of computation Numerical analysis Optimization Computer algebra Related topics History of mathematics Recreational mathematics Mathematics and art Mathematics education Category Portal Commons WikiProject 