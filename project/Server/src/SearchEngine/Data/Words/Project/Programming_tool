Programming tool Software development Core activities Processes Requirements Design Engineering Construction Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DevOps DAD DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TSP OpenUP UP XP Supporting disciplines Configuration management Documentation Software quality assurance SQA Project management User experience Practices ATDD BDD CCO CI CD DDD PP SBE Standup TDD Tools Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing Standards and Bodies of Knowledge BABOK CMMI IEEE standards ISO 9001 ISOIEC standards PMBOK SWEBOK ITIL Glossaries Artificial intelligence Computer science Electrical and electronics engineering v t e A programming tool or software development tool is a computer program that software developers use to create debug maintain or otherwise support other programs and applications The term usually refers to relatively simple programs that can be combined together to accomplish a task much as one might use multiple hand tools to fix a physical object The most basic tools are a source code editor and a compiler or interpreter which are used ubiquitously and continuously Other tools are used more or less depending on the language development methodology and individual engineer and are often used for a discrete task like a debugger or profiler Tools may be discrete programs executed separately often from the command line or may be parts of a single large program called an integrated development environment IDE In many cases particularly for simpler use simple ad hoc techniques are used instead of a tool such as print debugging instead of using a debugger manual timing of overall program or section of code instead of a profiler or tracking bugs in a text file or spreadsheet instead of a bug tracking system The distinction between tools and applications is murky For example developers use simple databases such as a file containing a list of important values all the time as tools dubious discuss However a fullblown database is usually thought of as an application or software in its own right For many years computerassisted software engineering CASE tools were sought after Successful tools have proven elusive In one sense CASE tools emphasized design and architecture support such as for UML But the most successful of these tools are IDEs Contents 1 Uses of programming tools 11 Translating from human to computer language 12 Making program information available for humans 2 List of tools 3 IDEs 4 See also 5 References 6 External links Uses of programming tools edit Translating from human to computer language edit Modern computers are very complex and in order to productively program themvarious abstractions are needed For example rather than writing down aprograms binary representation a programmer will write a program in a programming language like C Java or PythonProgramming tools like assemblers compilers and linkers translate aprogram from a human writeable and readable source language into the bits andbytes that can be executed by a computer Interpreters interpret theprogram on the fly to produce the desired behavior These programs perform many well defined and repetitive tasks that wouldnonetheless be time consuming and errorprone when performed by a humanlike laying out parts of a program in memory and fixing up the referencesbetween parts of a program as a linker doesOptimizing compilers on the other hand can perform complex transformationson the source code in order to improve the execution speed orother characteristics of a program This allows a programmer to focus moreon higher level conceptual aspects of a program without worrying about the detailsof the machine it is running on Making program information available for humans edit Because of the high complexity of software it is not possible to understandmost programs at a single glance even for the most experienced software developerThe abstractions provided by highlevel programming languages also make it harderto understand the connection between the source code written by a programmer andthe actual programs behaviourIn order to find bugs in programs and to prevent creating new bugs when extending a program a software developer uses some programming tools to visualize all kinds of information about programs For example a debugger allows a programmer to extract information about arunning program in terms of the source language used to program itThe debugger can compute the value of a variable in the source program from the state of the concrete machine by using information stored by the compiler Memory debuggers can directly point out questionable or outright wrong memory accesses of running programs which may otherwise remain undetected and are a common source of program failures List of tools edit Software tools come in many forms Binary compatibility analysis tools Bug databases Comparison of issue tracking systems Including bug tracking systems Build tools Build automation List of build automation software Call graph Code coverage Code coverageSoftware code coverage tools Code review List of tools for code review Code sharing sites Freshmeat Krugle Sourceforge GitHub See also Code search engines Compilation and linking tools GNU toolchain gcc Microsoft Visual Studio CodeWarrior Xcode ICC Debuggers DebuggerList of debuggers See also Debugging Disassemblers Generally reverseengineering tools Documentation generators Comparison of documentation generators help2man Plain Old Documentation asciidoc Formal methods Mathematical techniques for specification development and verification GUI interface generators Library interface generators SWIG Integration Tools Memory debuggers are frequently used in programming languages such as C and C that allow manual memory management and thus the possibility of memory leaks and other problems They are also useful to optimize efficiency of memory usage Examples dmalloc Electric Fence Insure Valgrind Parser generators ParsingParser development software Performance analysis or profiling List of performance analysis tool Revision control List of revision control software Comparison of revision control software Scripting languages PHP Awk Perl Python REXX Ruby Shell Tcl Search grep find Source code ClonesDuplications Finding Duplicate codeTools Source code editor Text editors List of text editors Comparison of text editors Source code formatting indent prettyprinters beautifiers minifiers Source code generation tools Automatic programmingImplementations Static code analysis lint List of tools for static code analysis Unit testing List of unit testing frameworks IDEs edit Integrated development environments combine the features of many tools into one package They for example make it easier to do specific tasks such as searching for content only in files in a particular project IDEs may for example be used for development of enterpriselevel applications Different aspects of IDEs for specific programming languages can be found in this comparison of integrated development environments See also edit Computer aided software engineering tools Computer science Configuration System Scripting language Software development kit Software engineering and list of software engineering topics Software systems Toolkits for User Innovation References edit This article includes a list of references but its sources remain unclear because it has insufficient inline citations Please help to improve this article by introducing more precise citations August 2010 Learn how and when to remove this template message mwparseroutput refbeginfontsize90marginbottom05emmwparseroutput refbeginhangingindentsgtulliststyletypenonemarginleft0mwparseroutput refbeginhangingindentsgtulgtlimwparseroutput refbeginhangingindentsgtdlgtddmarginleft0paddingleft32emtextindent32emliststylenonemwparseroutput refbegin100fontsize100 Software Development Tools for Petascale Computing Workshop 2007 Kernighan Brian W Plauger P J 1976 Software Tools AddisonWesley pp 352 ISBN 020103669X mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em External links edit Media related to Programming tools at Wikimedia Commons Authority control GND 41165263 v t e Software engineering Fields Computer programming Requirements engineering Software deployment Software design Software maintenance Software testing Systems analysis Formal methods Concepts Data modeling Enterprise architecture Functional specification Modeling language Orthogonality Programming paradigm Software Software archaeology Software architecture Software configuration management Software development methodology Software development process Software quality Software quality assurance Software verification and validation Structured analysis Orientations Agile Aspectoriented Object orientation Ontology Service orientation SDLC Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD UP Scrum Spiral model VModel Waterfall model XP Other SPICE CMMI Data model ER model Function model Information model Metamodeling Object model Systems model View model Languages IDEF UML USL SysML Software engineers Victor Basili Kent Beck Grady Booch Fred Brooks Barry Boehm Peter Chen Danese Cooper Ward Cunningham Tom DeMarco Edsger W Dijkstra Delores M Etter Martin Fowler Adele Goldstine Margaret Hamilton C A R Hoare Lois Haibt Mary Jean Harrold Grace Hopper Watts Humphrey Michael A Jackson Ivar Jacobson Alan Kay Nancy Leveson Stephen J Mellor Bertrand Meyer David Parnas Trygve Reenskaug Winston W Royce James Rumbaugh Mary Shaw Peri Tarr Elaine Weyuker Niklaus Wirth Edward Yourdon Related fields Computer science Computer engineering Project management Risk management Systems engineering Category Commons