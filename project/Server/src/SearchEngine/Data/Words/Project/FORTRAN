Fortran Generalpurpose programming language Fortran The Fortran Automatic Coding System for the IBM 704 15 October 1956 the first programmers reference manual for Fortran Paradigm multiparadigm structured imperative procedural objectoriented generic Designedby John Backus Developer John Backus and IBM Firstappeared 1957 62years ago 1957 Stable release Fortran 2018 ISOIEC 153912018 November28 2018 12 months ago 20181128 Typing discipline strong static manifest Filename extensions f for f90 Major implementations Absoft Cray GFortran G95 IBM XL Fortran Intel Hitachi LaheyFujitsu Numerical Algorithms Group Open Watcom PathScale PGI Silverfrost Oracle Solaris Studio Visual Fortran others Influenced by Speedcoding Influenced ALGOL 58 BASIC C Chapel 1 CMS2 Fortress PLI PACT I MUMPS IDL Ratfor Fortran ˈ f ɔːr t r æ n formerly FORTRAN derived from Formula Translation 2 is a generalpurpose compiled imperative programming language that is especially suited to numeric computation and scientific computing Originally developed by IBM 3 in the 1950s for scientific and engineering applications FORTRAN came to dominate this area of programming early on and has been in continuous use for over six decades in computationally intensive areas such as numerical weather prediction finite element analysis computational fluid dynamics computational physics crystallography and computational chemistry It is a popular language for highperformance computing 4 and is used for programs that benchmark and rank the worlds fastest supercomputers 5 6 Fortran encompasses a lineage of versions each of which evolved to add extensions to the language while usually retaining compatibility with prior versions Successive versions have added support for structured programming and processing of characterbased data FORTRAN 77 array programming modular programming and generic programming Fortran 90 high performance Fortran Fortran 95 objectoriented programming Fortran 2003 concurrent programming Fortran 2008 and native parallel computing capabilities Coarray Fortran 20082018 Fortrans design was the basis for many other programming languages Among the betterknown is BASIC which is based on FORTRAN II with a number of syntax cleanups notably better logical structures 7 and other changes to work more easily in an interactive environment 8 Contents 1 Naming 2 History 21 FORTRAN 211 Fixed layout and punched cards 22 FORTRAN II 221 Simple FORTRAN II program 23 FORTRAN III 24 IBM 1401 FORTRAN 25 FORTRAN IV 26 FORTRAN 66 27 FORTRAN 77 271 Variants Minnesota FORTRAN 28 Transition to ANSI Standard Fortran 29 Fortran 90 291 Obsolescence and deletions 292 Hello World example 210 Fortran 95 2101 Conditional compilation and varying length strings 211 Fortran 2003 212 Fortran 2008 213 Fortran 2018 3 Science and engineering 4 Language features 5 Portability 6 Variants 61 Fortran 5 62 FORTRAN V 63 Fortran 6 64 Specific variants 641 FOR TRANSIT for the IBM 650 65 Fortranbased languages 7 Code examples 8 Humor 9 See also 10 References 11 Further reading 12 External links Naming edit The names of earlier versions of the language through FORTRAN 77 were conventionally spelled in allcapitals FORTRAN 77 was the last version in which the use of lowercase letters in keywords was strictly nonstandard The capitalization has been dropped in referring to newer versions beginning with Fortran 90 The official language standards now refer to the language as Fortran rather than allcaps FORTRAN History edit An IBM 704 mainframe computer In late 1953 John W Backus submitted a proposal to his superiors at IBM to develop a more practical alternative to assembly language for programming their IBM 704 mainframe computer 9 69 Backus historic FORTRAN team consisted of programmers Richard Goldberg Sheldon F Best Harlan Herrick Peter Sheridan Roy Nutt Robert Nelson Irving Ziller Harold Stern Lois Haibt and David Sayre 10 Its concepts included easier entry of equations into a computer an idea developed by J Halcombe Laning and demonstrated in the Laning and Zierler system of 1952 11 Some of these programmers were chess players and were chosen to work at IBM with the thought being they had logical minds citation needed A draft specification for The IBM Mathematical Formula Translating System was completed by November 1954 9 71 The first manual for FORTRAN appeared in October 1956 9 72 with the first FORTRAN compiler delivered in April 1957 9 75 This was the first optimizing compiler because customers were reluctant to use a highlevel programming language unless its compiler could generate code with performance comparable to that of handcoded assembly language 12 While the community was skeptical that this new method could possibly outperform handcoding it reduced the number of programming statements necessary to operate a machine by a factor of 20 and quickly gained acceptance John Backus said during a 1979 interview with Think the IBM employee magazine Much of my work has come from being lazy I didnt like writing programs and so when I was working on the IBM 701 writing programs for computing missile trajectories I started work on a programming system to make it easier to write programs 13 The language was widely adopted by scientists for writing numerically intensive programs which encouraged compiler writers to produce compilers that could generate faster and more efficient code The inclusion of a complex number data type in the language made Fortran especially suited to technical applications such as electrical engineering citation needed By 1960 versions of FORTRAN were available for the IBM 709 650 1620 and 7090 computers Significantly the increasing popularity of FORTRAN spurred competing computer manufacturers to provide FORTRAN compilers for their machines so that by 1963 over 40 FORTRAN compilers existed For these reasons FORTRAN is considered to be the first widely used crossplatform programming language The development of Fortran paralleled the early evolution of compiler technology and many advances in the theory and design of compilers were specifically motivated by the need to generate efficient code for Fortran programs FORTRAN edit The initial release of FORTRAN for the IBM 704 contained 32 statements including DIMENSION and EQUIVALENCE statements Assignment statements Threeway arithmetic IF statement which passed control to one of three locations in the program depending on whether the result of the arithmetic statement was negative zero or positive IF statements for checking exceptions ACCUMULATOR OVERFLOW QUOTIENT OVERFLOW and DIVIDE CHECK and IF statements for manipulating sense switches and sense lights GO TO computed GO TO ASSIGN and assigned GO TO DO loops Formatted IO FORMAT READ READ INPUT TAPE WRITE WRITE OUTPUT TAPE PRINT and PUNCH Unformatted IO READ TAPE READ DRUM WRITE TAPE and WRITE DRUM Other IO END FILE REWIND and BACKSPACE PAUSE STOP and CONTINUE FREQUENCY statement for providing optimization hints to the compiler The arithmetic IF statement was reminiscent of but not readily implementable by a threeway comparison instruction CASCompare Accumulator with Storage available on the 704 The statement provided the only way to compare numbersby testing their difference with an attendant risk of overflow This deficiency was later overcome by logical facilities introduced in FORTRAN IV The FREQUENCY statement was used originally and optionally to give branch probabilities for the three branch cases of the arithmetic IF statement The first FORTRAN compiler used this weighting to perform at compile time a Monte Carlo simulation of the generated code the results of which were used to optimize the placement of basic blocks in memorya very sophisticated optimization for its time The Monte Carlo technique is documented in Backus et als paper on this original implementation The FORTRAN Automatic Coding System The fundamental unit of program is the basic block a basic block is a stretch of program which has one entry point and one exit point The purpose of section 4 is to prepare for section 5 a table of predecessors PRED table which enumerates the basic blocks and lists for every basic block each of the basic blocks which can be its immediate predecessor in flow together with the absolute frequency of each such basic block link This table is obtained by running the program once in MonteCarlo fashion in which the outcome of conditional transfers arising out of IFtype statements and computed GO TOs is determined by a random number generator suitably weighted according to whatever FREQUENCY statements have been provided 10 Many years later the FREQUENCY statement had no effect on the code and was treated as a comment statement since the compilers no longer did this kind of compiletime simulation A similar fate has befallen compiler hints in several other programming languages eg the register keyword in C citation needed The first FORTRAN compiler reported diagnostic information by halting the program when an error was found and outputting an error code on its console That code could be looked up by the programmer in an error messages table in the operators manual providing them with a brief description of the problem 14 15 Later an errorhandling subroutine to handle user errors such as division by zero developed by NASA 16 was incorporated informing users of which line of code contained the error Fixed layout and punched cards edit FORTRAN code on a punched card showing the specialized uses of columns 15 6 and 7380 Further information Computer programming in the punched card era Before the development of disk files text editors and terminals programs were most often entered on a keypunch keyboard onto 80column punched cards one line to a card The resulting deck of cards would be fed into a card reader to be compiled Punched card codes included no lowercase letters or many special characters and special versions of the IBM 026 keypunch were offered that would correctly print the repurposed special characters used in FORTRAN Reflecting punched card input practice Fortran programs were originally written in a fixedcolumn format with the first 72 columns read into twelve 36bit words A letter C in column 1 caused the entire card to be treated as a comment and ignored by the compiler Otherwise the columns of the card were divided into four fields 1 to 5 were the label field a sequence of digits here was taken as a label for use in DO or control statements such as GO TO and IF or to identify a FORMAT statement referred to in a WRITE or READ statement Leading zeros are ignored and 0 is not a valid label number 6 was a continuation field a character other than a blank or a zero here caused the card to be taken as a continuation of the statement on the prior card The continuation cards were usually numbered 1 2 etc and the starting card might therefore have zero in its continuation columnwhich is not a continuation of its preceding card 7 to 72 served as the statement field 73 to 80 were ignored the IBM 704s card reader only used 72 columns 17 Columns 73 to 80 could therefore be used for identification information such as punching a sequence number or text which could be used to reorder cards if a stack of cards was dropped though in practice this was reserved for stable production programs An IBM 519 could be used to copy a program deck and add sequence numbers Some early compilers eg the IBM 650s had additional restrictions due to limitations on their card readers 18 Keypunches could be programmed to tab to column 7 and skip out after column 72 Later compilers relaxed most fixedformat restrictions and the requirement was eliminated in the Fortran 90 standard Within the statement field whitespace characters blanks were ignored outside a text literal This allowed omitting spaces between tokens for brevity or including spaces within identifiers for clarity For example AVG OF X was a valid identifier equivalent to AVGOFX and 101010 DO101I 1 101 was a valid statement equivalent to 10101 DO 101 I 1 101 because the zero in column 6 is treated as if it were a space while 101010 DO101I 1101 was instead 10101 DO101I 1101 the assignment of 1101 to a variable called DO101I Note the slight visual difference between a comma and a period Hollerith strings originally allowed only in FORMAT and DATA statements were prefixed by a character count and the letter H eg 26HTHIS IS ALPHANUMERIC DATA allowing blanks to be retained within the character string Miscounts were a problem FORTRAN II edit IBMs FORTRAN II appeared in 1958 The main enhancement was to support procedural programming by allowing userwritten subroutines and functions which returned values with parameters passed by reference The COMMON statement provided a way for subroutines to access common or global variables Six new statements were introduced 19 SUBROUTINE FUNCTION and END CALL and RETURN COMMON Over the next few years FORTRAN II would also add support for the DOUBLE PRECISION and COMPLEX data types Early FORTRAN compilers supported no recursion in subroutines Early computer architectures supported no concept of a stack and when they did directly support subroutine calls the return location was often stored in one fixed location adjacent to the subroutine code eg the IBM 1130 or a specific machine register IBM 360 et seq which only allows recursion if a stack is maintained by software and the return address is stored on the stack before the call is made and restored after the call returns Although not specified in FORTRAN 77 many F77 compilers supported recursion as an option and the Burroughs mainframes designed with recursion builtin did so by default It became a standard in Fortran 90 via the new keyword RECURSIVE 20 Simple FORTRAN II program edit This program for Herons formula reads data on a tape reel containing three 5digit integers A B and C as input There are no type declarations available variables whose name starts with I J K L M or N are fixedpoint ie integers otherwise floatingpoint Since integers are to be processed in this example the names of the variables start with the letter I The name of a variable must start with a letter and can continue with both letters and digits up to a limit of six characters in FORTRAN II If A B and C cannot represent the sides of a triangle in plane geometry then the programs execution will end with an error code of STOP 1 Otherwise an output line will be printed showing the input values for A B and C followed by the computed AREA of the triangle as a floatingpoint number occupying ten spaces along the line of output and showing 2 digits after the decimal point the 2 in F102 of the FORMAT statement with label 601 C AREA OF A TRIANGLE WITH A STANDARD SQUARE ROOT FUNCTION C INPUT TAPE READER UNIT 5 INTEGER INPUT C OUTPUT LINE PRINTER UNIT 6 REAL OUTPUT C INPUT ERROR DISPLAY ERROR OUTPUT CODE 1 IN JOB CONTROL LISTING READ INPUT TAPE 5 501 IA IB IC 501 FORMAT 3 I5 C IA IB AND IC MAY NOT BE NEGATIVE OR ZERO C FURTHERMORE THE SUM OF TWO SIDES OF A TRIANGLE C MUST BE GREATER THAN THE THIRD SIDE SO WE CHECK FOR THAT TOO IF IA 777 777 701 701 IF IB 777 777 702 702 IF IC 777 777 703 703 IF IA IB IC 777 777 704 704 IF IA IC IB 777 777 705 705 IF IB IC IA 777 777 799 777 STOP 1 C USING HERONS FORMULA WE CALCULATE THE C AREA OF THE TRIANGLE 799 S FLOATF IA IB IC 20 AREA SQRTF S S FLOATF IA S FLOATF IB S FLOATF IC WRITE OUTPUT TAPE 6 601 IA IB IC AREA 601 FORMAT 4 H A I5 5 H B I5 5 H C I5 8 H AREA F10 2 13 H SQUARE UNITS STOP END FORTRAN III edit A reproduction of a FORTRAN coding form printed on paper and intended to be used by programmers to prepare programs for punching onto cards by keypunch operators Now obsolete IBM also developed a FORTRAN III in 1958 that allowed for inline assembly code among other features however this version was never released as a product Like the 704 FORTRAN and FORTRAN II FORTRAN III included machinedependent features that made code written in it unportable from machine to machine 9 76 Early versions of FORTRAN provided by other vendors suffered from the same disadvantage IBM 1401 FORTRAN edit FORTRAN was provided for the IBM 1401 computer by an innovative 63phase compiler that ran entirely in its core memory of only 8000 sixbit characters The compiler could be run from tape or from a 2200card deck it used no further tape or disk storage It kept the program in memory and loaded overlays that gradually transformed it in place into executable form as described by Haines 21 This article was reprinted edited in both editions of Anatomy of a Compiler 22 and in the IBM manual Fortran Specifications and Operating Procedures IBM 1401 23 The executable form was not entirely machine language rather floatingpoint arithmetic subscripting inputoutput and function references were interpreted preceding UCSD Pascal Pcode by two decades IBM later provided a FORTRAN IV compiler for the 1400 series of computers 24 FORTRAN IV edit IBM began development of FORTRAN IV starting in 1961 as a result of customer demands FORTRAN IV removed the machinedependent features of FORTRAN II such as READ INPUT TAPE while adding new features such as a LOGICAL data type logical Boolean expressions and the logical IF statement as an alternative to the arithmetic IF statement FORTRAN IV was eventually released in 1962 first for the IBM 7030 Stretch computer followed by versions for the IBM 7090 IBM 7094 and later for the IBM 1401 in 1966 By 1965 FORTRAN IV was supposed to be compliant with the standard being developed by the American Standards Association X343 FORTRAN Working Group 25 Between 1966 and 1968 IBM offered several FORTRAN IV compilers for its System360 each named by letters that indicated the minimum amount of memory the complier needed to run 26 The letters F G H matched the codes used with System360 model numbers to indicate memory size each letter increment being a factor of two larger 27 p 5 1966 FORTRAN IV F for DOS360 64K bytes 1966 FORTRAN IV G for OS360 128K bytes 1968 FORTRAN IV H for OS360 256K bytes At about this time FORTRAN IV had started to become an important educational tool and implementations such as the University of Waterloos WATFOR and WATFIV were created to simplify the complex compile and link processes of earlier compilers FORTRAN 66 edit Perhaps the most significant development in the early history of FORTRAN was the decision by the American Standards Association now American National Standards Institute ANSI to form a committee sponsored by BEMA the Business Equipment Manufacturers Association to develop an American Standard Fortran The resulting two standards approved in March 1966 defined two languages FORTRAN based on FORTRAN IV which had served as a de facto standard and Basic FORTRAN based on FORTRAN II but stripped of its machinedependent features The FORTRAN defined by the first standard officially denoted X391966 became known as FORTRAN 66 although many continued to term it FORTRAN IV the language on which the standard was largely based FORTRAN 66 effectively became the first industrystandard version of FORTRAN FORTRAN 66 included Main program SUBROUTINE FUNCTION and BLOCK DATA program units INTEGER REAL DOUBLE PRECISION COMPLEX and LOGICAL data types COMMON DIMENSION and EQUIVALENCE statements DATA statement for specifying initial values Intrinsic and EXTERNAL eg library functions Assignment statement GO TO computed GO TO assigned GO TO and ASSIGN statements Logical IF and arithmetic threeway IF statements DO loop statement READ WRITE BACKSPACE REWIND and ENDFILE statements for sequential IO FORMAT statement and assigned format CALL RETURN PAUSE and STOP statements Hollerith constants in DATA and FORMAT statements and as arguments to procedures Identifiers of up to six characters in length Comment lines END line FORTRAN 77 edit FORTRAN77 program with compiler output written on a CDC 175 at RWTH Aachen University Germany in 1987 43 BSD for the Digital Equipment Corporation DEC VAX displaying the manual for FORTRAN 77 f77 compiler After the release of the FORTRAN 66 standard compiler vendors introduced several extensions to Standard Fortran prompting ANSI committee X3J3 in 1969 to begin work on revising the 1966 standard under sponsorship of CBEMA the Computer Business Equipment Manufacturers Association formerly BEMA Final drafts of this revised standard circulated in 1977 leading to formal approval of the new FORTRAN standard in April 1978 The new standard called FORTRAN 77 and officially denoted X391978 added a number of significant features to address many of the shortcomings of FORTRAN 66 Block IF and END IF statements with optional ELSE and ELSE IF clauses to provide improved language support for structured programming DO loop extensions including parameter expressions negative increments and zero trip counts OPEN CLOSE and INQUIRE statements for improved IO capability Directaccess file IO IMPLICIT statement to override implicit conventions that undeclared variables are INTEGER if their name begins with I J K L M or N and REAL otherwise CHARACTER data type replacing Hollerith strings with vastly expanded facilities for character input and output and processing of characterbased data PARAMETER statement for specifying constants SAVE statement for persistent local variables Generic names for intrinsic functions eg SQRT also accepts arguments of other types such as COMPLEX or REAL16 A set of intrinsics LGE LGT LLE LLT for lexical comparison of strings based upon the ASCII collating sequence These ASCII functions were demanded by the US Department of Defense in their conditional approval vote citation needed In this revision of the standard a number of features were removed or altered in a manner that might invalidate formerly standardconforming programs Removal was the only allowable alternative to X3J3 at that time since the concept of deprecation was not yet available for ANSI standards While most of the 24 items in the conflict list see Appendix A2 of X391978 addressed loopholes or pathological cases permitted by the prior standard but rarely used a small number of specific capabilities were deliberately removed such as Hollerith constants and Hollerith data such as GREET 12 HHELLO THERE Reading into an H edit Hollerith field descriptor in a FORMAT specification Overindexing of array bounds by subscripts DIMENSION A 10 5 Y A 11 1 Transfer of control out of and back into the range of a DO loop also known as Extended Range Variants Minnesota FORTRAN edit Control Data Corporation computers had another version of FORTRAN 77 called Minnesota FORTRAN MNF designed especially for student use with variations in output constructs special uses of COMMON and DATA statements optimization code levels for compiling detailed error listings extensive warning messages and debugging features 28 Transition to ANSI Standard Fortran edit The development of a revised standard to succeed FORTRAN 77 would be repeatedly delayed as the standardization process struggled to keep up with rapid changes in computing and programming practice In the meantime as the Standard FORTRAN for nearly fifteen years FORTRAN 77 would become the historically most important dialect An important practical extension to FORTRAN 77 was the release of MILSTD1753 in 1978 29 This specification developed by the US Department of Defense standardized a number of features implemented by most FORTRAN 77 compilers but not included in the ANSI FORTRAN 77 standard These features would eventually be incorporated into the Fortran 90 standard DO WHILE EXIT CYCLE and END DO statements INCLUDE statement IMPLICIT NONE variant of the IMPLICIT statement Bit manipulation intrinsic functions based on similar functions included in Industrial RealTime Fortran ANSIISA S611 1976 The IEEE 10039 POSIX Standard released in 1991 provided a simple means for FORTRAN 77 programmers to issue POSIX system calls 30 Over 100 calls were defined in the document allowing access to POSIXcompatible process control signal handling file system control device control procedure pointing and stream IO in a portable manner Fortran 90 edit The muchdelayed successor to FORTRAN 77 informally known as Fortran 90 and prior to that Fortran 8X was finally released as ISOIEC standard 15391991 in 1991 and an ANSI Standard in 1992 In addition to changing the official spelling from FORTRAN to Fortran this major revision added many new features to reflect the significant changes in programming practice that had evolved since the 1978 standard Freeform source input also with lowercase Fortran keywords Identifiers up to 31 characters in length In the previous standard it was only six characters Inline comments Ability to operate on arrays or array sections as a whole thus greatly simplifying math and engineering computations whole partial and masked array assignment statements and array expressions such as X 1 N R 1 N COS A 1 N WHERE statement for selective array assignment arrayvalued constants and expressions userdefined arrayvalued functions and array constructors RECURSIVE procedures Modules to group related procedures and data together and make them available to other program units including the capability to limit the accessibility to only specific parts of the module A vastly improved argumentpassing mechanism allowing interfaces to be checked at compile time Userwritten interfaces for generic procedures Operator overloading Derived structured data types New data type declaration syntax to specify the data type and other attributes of variables Dynamic memory allocation by means of the ALLOCATABLE attribute and the ALLOCATE and DEALLOCATE statements POINTER attribute pointer assignment and NULLIFY statement to facilitate the creation and manipulation of dynamic data structures Structured looping constructs with an END DO statement for loop termination and EXIT and CYCLE statements for terminating normal DO loop iterations in an orderly way SELECT CASE construct for multiway selection Portable specification of numerical precision under the users control New and enhanced intrinsic procedures Obsolescence and deletions edit Unlike the prior revision Fortran 90 removed no features Appendix B1 says The list of deleted features in this standard is empty Any standardconforming FORTRAN 77 program is also standardconforming under Fortran 90 and either standard should be usable to define its behavior A small set of features were identified as obsolescent and expected to be removed in a future standard All of the functionalities of these early version features are performed by new Fortran 95 features Some are kept to simplify porting of old programs but may eventually be deleted Obsolescent feature Example Statusfate in Fortran 95 Arithmetic IFstatement IF X 10 20 30 Deprecated Noninteger DO parameters or control variables DO 9 X 17 16 01 Deleted Shared DOloop termination or termination with a statement other than END DO or CONTINUE DO 9 J 1 10 DO 9 K 1 10 9 L J K Deprecated Branching to END IF from outside a block 66 GO TO 77 IF E THEN 77 END IF Deleted Alternate return CALL SUBR X Y 100 200 Deprecated PAUSE statement PAUSE 600 Deleted ASSIGN statement and assigned GO TO statement 100 ASSIGN 100 TO H GO TO H Deleted Assigned statement numbers and FORMAT specifiers ASSIGN 606 TO F WRITE 6 F Deleted H edit descriptors 606 FORMAT 9 H1GOODBYE Deleted Computed GO TO statement GO TO 10 20 30 40 index obsolete Statement functions FOIL X Y X 2 2 X Y Y 2 obsolete DATA statements among executable statements X 2 73 DATA A B C 50 1 20 1 30 obsolete CHARACTER form of CHARACTER declaration CHARACTER 8 STRING Use CHARACTER8 obsolete Assumed character length functions CHARACTER STRING obsolete 31 Fixed form source code Column 1 contains C or or for comments Columns 1 through 5 for statement numbers Any character in column 6 for continuation Columns 73 and up ignored obsolete Hello World example edit program helloworld print Hello World end program helloworld Fortran 95 edit F95 redirects here For the Düsseldorfbased football club see Fortuna Düsseldorf Main article Fortran 95 language features Fortran 95 published officially as ISOIEC 153911997 was a minor revision mostly to resolve some outstanding issues from the Fortran 90 standard Nevertheless Fortran 95 also added a number of extensions notably from the High Performance Fortran specification FORALL and nested WHERE constructs to aid vectorization Userdefined PURE and ELEMENTAL procedures Default initialization of derived type components including pointer initialization Expanded the ability to use initialization expressions for data objects Initialization of pointers to NULL Clearly defined that ALLOCATABLE arrays are automatically deallocated when they go out of scope A number of intrinsic functions were extended for example a dim argument was added to the maxloc intrinsic Several features noted in Fortran 90 to be obsolescent were removed from Fortran 95 DO statements using REAL and DOUBLE PRECISION index variables Branching to an END IF statement from outside its block PAUSE statement ASSIGN and assigned GO TO statement and assigned format specifiers H Hollerith edit descriptor An important supplement to Fortran 95 was the ISO technical report TR15581 Enhanced Data Type Facilities informally known as the Allocatable TR This specification defined enhanced use of ALLOCATABLE arrays prior to the availability of fully Fortran 2003compliant Fortran compilers Such uses include ALLOCATABLE arrays as derived type components in procedure dummy argument lists and as function return values ALLOCATABLE arrays are preferable to POINTER based arrays because ALLOCATABLE arrays are guaranteed by Fortran 95 to be deallocated automatically when they go out of scope eliminating the possibility of memory leakage In addition elements of allocatable arrays are contiguous and aliasing is not an issue for optimization of array references allowing compilers to generate faster code than in the case of pointers 32 Another important supplement to Fortran 95 was the ISO technical report TR15580 Floatingpoint exception handling informally known as the IEEE TR This specification defined support for IEEE floatingpoint arithmetic and floating point exception handling Conditional compilation and varying length strings edit In addition to the mandatory Base languagedefined in ISOIEC 15391 1997the Fortran 95 language also includes two optional modules Varying length character strings ISOIEC 15392 2000 Conditional compilation ISOIEC 15393 1998 which together compose the multipart International Standard ISOIEC 1539 According to the standards developers the optional parts describe selfcontained features which have been requested by a substantial body of users andor implementors but which are not deemed to be of sufficient generality for them to be required in all standardconforming Fortran compilers Nevertheless if a standardconforming Fortran does provide such options then they must be provided in accordance with the description of those facilities in the appropriate Part of the Standard Fortran 2003 edit Fortran 2003 officially published as ISOIEC 153912004 is a major revision introducing many new features 33 A comprehensive summary of the new features of Fortran 2003 is available at the Fortran Working Group ISOIEC JTC1SC22WG5 official Web site 34 From that article the major enhancements for this revision include Derived type enhancements parameterized derived types improved control of accessibility improved structure constructors and finalizers Objectoriented programming support type extension and inheritance polymorphism dynamic type allocation and typebound procedures providing complete support for abstract data types Data manipulation enhancements allocatable components incorporating TR 15581 deferred type parameters VOLATILE attribute explicit type specification in array constructors and allocate statements pointer enhancements extended initialization expressions and enhanced intrinsic procedures Inputoutput enhancements asynchronous transfer stream access user specified transfer operations for derived types user specified control of rounding during format conversions named constants for preconnected units the FLUSH statement regularization of keywords and access to error messages Procedure pointers Support for IEEE floatingpoint arithmetic and floating point exception handling incorporating TR 15580 Interoperability with the C programming language Support for international usage access to ISO 10646 4byte characters and choice of decimal or comma in numeric formatted inputoutput Enhanced integration with the host operating system access to command line arguments environment variables and processor error messages An important supplement to Fortran 2003 was the ISO technical report TR19767 Enhanced module facilities in Fortran This report provided submodules which make Fortran modules more similar to Modula2 modules They are similar to Ada private child subunits This allows the specification and implementation of a module to be expressed in separate program units which improves packaging of large libraries allows preservation of trade secrets while publishing definitive interfaces and prevents compilation cascades Fortran 2008 edit ISOIEC 153912010 informally known as Fortran 2008 was approved in September 2010 35 36 As with Fortran 95 this is a minor upgrade incorporating clarifications and corrections to Fortran 2003 as well as introducing some new capabilities The new capabilities include Submodulesadditional structuring facilities for modules supersedes ISOIEC TR 197672005 Coarray Fortran a parallel execution model The DO CONCURRENT constructfor loop iterations with no interdependencies The CONTIGUOUS attributeto specify storage layout restrictions The BLOCK construct can contain declarations of objects with construct scope Recursive allocatable components as an alternative to recursive pointers in derived types The Final Draft international Standard FDIS is available as document N1830 37 A supplement to Fortran 2008 is the International Organization for Standardization ISO Technical Specification TS 29113 on Further Interoperability of Fortran with C 38 39 which has been submitted to ISO in May 2012 for approval The specification adds support for accessing the array descriptor from C and allows ignoring the type and rank of arguments Fortran 2018 edit The latest revision of the language Fortran 2018 was earlier referred to as Fortran 2015 40 It is a significant revision and was released on November 28 2018 41 Fortran 2018 incorporates two previously published Technical Specifications ISOIEC TS 291132012 Further Interoperability with C 42 ISOIEC TS 185082015 Additional Parallel Features in Fortran 43 Additional changes and new features include support for ISOIECIEEE 605592011 the version of the IEEE floating point standard before the latest minor revision IEEE 7542019 hexadecimal inputoutput IMPLICIT NONE enhancements and other changes 44 45 46 47 Science and engineering edit Although a 1968 journal article by the authors of BASIC already described FORTRAN as oldfashioned 48 Fortran has now been in use for several decades and there is a vast body of Fortran software in daily use throughout the scientific and engineering communities 49 Jay Pasachoff wrote in 1984 that physics and astronomy students simply have to learn FORTRAN So much exists in FORTRAN that it seems unlikely that scientists will change to Pascal Modula2 or whatever 50 In 1993 Cecil E Leith called FORTRAN the mother tongue of scientific computing adding that its replacement by any other possible language may remain a forlorn hope 51 It is the primary language for some of the most intensive supercomputing tasks such as in astronomy climate modeling computational chemistry computational economics computational fluid dynamics computational physics data analysis hydrological modeling numerical linear algebra and numerical libraries LAPACK IMSL and NAG optimization satellite simulation structural engineering and weather prediction citation needed Many of the floatingpoint benchmarks to gauge the performance of new computer processors such as the floatingpoint components of the SPEC benchmarks eg CFP2006 CFP2017 are written in Fortran Apart from this more modern codes in computational science generally use large program libraries such as METIS for graph partitioning PETSc or Trilinos for linear algebra capabilities DUNE or FEniCS for mesh and finite element support and other generic libraries Since the early 2000s many of the widely used support libraries have also been implemented in C and more recently in C On the other hand highlevel languages such as MATLAB Python and R have become popular in particular areas of computational science Consequently a growing fraction of scientific programs is also written in such higherlevel scripting languages For this reason facilities for interoperation with C were added to Fortran 2003 and enhanced by the ISOIEC technical specification 29113 which was incorporated into Fortran 2018 to allow more flexible interoperation with other programming languages Software for NASA probes Voyager 1 and Voyager 2 was originally written in FORTRAN 5 and later ported to FORTRAN 77 As of 25September2013 update some of the software is still written in Fortran and some has been ported to C 52 Language features edit This section needs expansion You can help by adding to it January 2018 The precise characteristics and syntax of Fortran 95 are discussed in Fortran 95 language features Portability edit Portability was a problem in the early days because there was no agreed upon standardnot even IBMs reference manualand computer companies vied to differentiate their offerings from others by providing incompatible features Standards have improved portability The 1966 standard provided a reference syntax and semantics but vendors continued to provide incompatible extensions Although careful programmers were coming to realize that use of incompatible extensions caused expensive portability problems and were therefore using programs such as The PFORT Verifier 53 54 it was not until after the 1977 standard when the National Bureau of Standards now NIST published FIPS PUB 69 that processors purchased by the US Government were required to diagnose extensions of the standard Rather than offer two processors essentially every compiler eventually had at least an option to diagnose extensions 55 56 Incompatible extensions were not the only portability problem For numerical calculations it is important to take account of the characteristics of the arithmetic This was addressed by Fox et al in the context of the 1966 standard by the PORT library 54 The ideas therein became widely used and were eventually incorporated into the 1990 standard by way of intrinsic inquiry functions The widespread now almost universal adoption of the IEEE 754 standard for binary floatingpoint arithmetic has essentially removed this problem Access to the computing environment eg the programs command line environment variables textual explanation of error conditions remained a problem until it was addressed by the 2003 standard Large collections of library software that could be described as being loosely related to engineering and scientific calculations such as graphics libraries have been written in C and therefore access to them presented a portability problem This has been addressed by incorporation of C interoperability into the 2003 standard It is now possible and relatively easy to write an entirely portable program in Fortran even without recourse to a preprocessor Variants edit Fortran 5 edit Fortran 5 was marketed by Data General Corp in the late 1970s and early 1980s for the Nova Eclipse and MV line of computers It had an optimizing compiler that was quite good for minicomputers of its time The language most closely resembles FORTRAN 66 The name is a pun on the earlier FORTRAN IV FORTRAN V edit FORTRAN V was distributed by Control Data Corporation in 1968 for the CDC 6600 series The language was based upon FORTRAN IV 57 Univac also offered a compiler for the 1100 series known as FORTRAN V A spinoff of Univac Fortran V was Athena FORTRAN Fortran 6 edit Fortran 6 or Visual Fortran 2001 was licensed to Compaq by Microsoft They have licensed Compaq Visual Fortran and have provided the Visual Studio 5 environment interface for Compaq v6 up to v61 58 Specific variants edit Vendors of highperformance scientific computers eg Burroughs Control Data Corporation CDC Cray Honeywell IBM Texas Instruments and UNIVAC added extensions to Fortran to take advantage of special hardware features such as instruction cache CPU pipelines and vector arrays For example one of IBMs FORTRAN compilers H Extended IUP had a level of optimization which reordered the machine code instructions to keep multiple internal arithmetic units busy simultaneously Another example is CFD a special variant of FORTRAN designed specifically for the ILLIAC IV supercomputer running at NASA s Ames Research Center IBM Research Labs also developed an extended FORTRANbased language called VECTRAN for processing vectors and matrices ObjectOriented Fortran was an objectoriented extension of Fortran in which data items can be grouped into objects which can be instantiated and executed in parallel It was available for Sun Iris iPSC and nCUBE but is no longer supported Such machinespecific extensions have either disappeared over time or have had elements incorporated into the main standards The major remaining extension is OpenMP which is a crossplatform extension for shared memory programming One new extension Coarray Fortran is intended to support parallel programming FOR TRANSIT for the IBM 650 edit FOR TRANSIT was the name of a reduced version of the IBM 704 FORTRAN languagewhich was implemented for the IBM 650 using a translator program developedat Carnegie in the late 1950s 59 The following comment appears in the IBM Reference Manual FOR TRANSIT Automatic Coding System C284038 Copyright 1957 1959 by IBM The FORTRAN system was designed for a more complex machine than the 650 and consequently some of the 32 statements found in the FORTRAN Programmers Reference Manual are not acceptable to the FOR TRANSIT system In addition certain restrictions to the FORTRAN language have been added However none of these restrictions make a source program written for FOR TRANSIT incompatible with the FORTRAN system for the 704 The permissible statements were Arithmetic assignment statements eg a b GO to n GO TO n 1 n 2 n m i IF a n 1 n 2 n 3 PAUSE STOP DO n i m1 m2 CONTINUE END READ n list PUNCH n list DIMENSION V V V EQUIVALENCE abc dc Up to ten subroutines could be used in one program FOR TRANSIT statements were limited to columns 7 through 56 onlyPunched cards were used for input and output on the IBM 650 Three passes were required to translate source code to the IT language then to compile the IT statements into SOAP assembly language and finally to produce the object program which could then be loaded into the machine to run the program using punched cards for data input and outputting results onto punched cards Two versions existed for the 650s with a 2000 word memory drum FOR TRANSIT I S and FOR TRANSIT II the latter for machines equipped with indexing registers and automatic floating point decimal biquinary arithmetic Appendix A of the manual included wiring diagrams for the IBM 533 card readerpunch control panel Fortranbased languages edit Prior to FORTRAN 77 a number of preprocessors were commonly used to provide a friendlier language with the advantage that the preprocessed code could be compiled on any machine with a standard FORTRAN compiler These preprocessors would typically support structured programming variable names longer than six characters additional data types conditional compilation and even macro capabilities Popular preprocessors included FLECS iftran MORTRAN SFtran SFortran Ratfor and Ratfiv Ratfor and Ratfiv for example implemented a C like language outputting preprocessed code in standard FORTRAN 66 Despite advances in the Fortran language preprocessors continue to be used for conditional compilation and macro substitution One of the earliest versions of FORTRAN introduced in the 60s was popularly used in colleges and universities Developed supported and distributed by the University of Waterloo WATFOR was based largely on FORTRAN IV A student using WATFOR could submit their batch FORTRAN job and if there were no syntax errors the program would move straight to execution This simplification allowed students to concentrate on their programs syntax and semantics or execution logic flow rather than dealing with submission Job Control Language JCL the compilelinkeditexecution successive processes or other complexities of the mainframeminicomputer environment A down side to this simplified environment was that WATFOR was not a good choice for programmers needing the expanded abilities of their host processors eg WATFOR typically had very limited access to IO devices WATFOR was succeeded by WATFIV and its later versions program s 0 i 1 n s s 1 stop i s s Stop line programming LRLTRAN was developed at the Lawrence Radiation Laboratory to provide support for vector arithmetic and dynamic storage among other extensions to support systems programming The distribution included the LTSS operating system The Fortran95 Standard includes an optional Part 3 which defines an optional conditional compilation capability This capability is often referred to as CoCo Many Fortran compilers have integrated subsets of the C preprocessor into their systems SIMSCRIPT is an application specific Fortran preprocessor for modeling and simulating large discrete systems The F programming language was designed to be a clean subset of Fortran 95 that attempted to remove the redundant unstructured and deprecated features of Fortran such as the EQUIVALENCE statement F retains the array features added in Fortran 90 and removes control statements that were made obsolete by structured programming constructs added to both FORTRAN 77 and Fortran 90 F is described by its creators as a compiled structured array programming language especially well suited to education and scientific computing 60 Lahey and Fujitsu teamed up to create Fortran for the Microsoft NET Framework 61 Silverfrost FTN95 is also capable of creating NET code 62 Code examples edit Further information WikibooksFortranFortran examples The following program illustrates dynamic memory allocation and arraybased operations two features introduced with Fortran 90 Particularly noteworthy is the absence of DO loops and IF THEN statements in manipulating the array mathematical operations are applied to the array as a whole Also apparent is the use of descriptive variable names and general code formatting that conform with contemporary programming style This example computes an average over data entered interactively program average Read in some numbers and take the average As written if there are no data points an average of zero is returned While this may not be desired behavior it keeps this example simple implicit none real dimension allocatable points integer numberofpoints 00 real averagepoints 0 positiveaverage 0 negativeaverage 0 write Input number of points to average read numberofpoints allocate points numberofpoints write Enter the points to average read points Take the average by summing points and dividing by numberofpoints if numberofpoints 0 averagepoints sum points numberofpoints Now form average over positive and negative points only if count points 0 0 then positiveaverage sum points points 0 count points 0 end if if count points 0 0 then negativeaverage sum points points 0 count points 0 end if deallocate points Print result to terminal write ag124 Average averagepoints write ag124 Average of positive points positiveaverage write ag124 Average of negative points negativeaverage end program average Humor edit During the same FORTRAN standards committee meeting at which the name FORTRAN 77 was chosen a satirical technical proposal was incorporated into the official distribution bearing the title Letter O Considered Harmful This proposal purported to address the confusion that sometimes arises between the letter O and the numeral zero by eliminating the letter from allowable variable names However the method proposed was to eliminate the letter from the character set entirely thereby retaining 48 as the number of lexical characters which the colon had increased to 49 This was considered beneficial in that it would promote structured programming by making it impossible to use the notorious GO TO statement as before Troublesome FORMAT statements would also be eliminated It was noted that this might invalidate some existing programs but that most of these probably were nonconforming anyway 63 64 When X3J3 debated whether the minimum trip count for a DO loop should be zero or one in Fortran 77 Loren Meissner suggested a minimum trip count of two reasoning tongueincheek that if it was less than two then there would be no reason for a loop When assumedlength arrays were being added there was a dispute as to the appropriate character to separate upper and lower bounds In a comment examining these arguments Dr Walt Brainerd penned an article entitled Astronomy vs Gastroenterology because some proponents had suggested using the star or asterisk while others favored the colon citation needed In FORTRAN 77 and most earlier versions variable names beginning with the letters IN had a default type of integer while variables starting with any other letters defaulted to real although programmers could override the defaults with an explicit declaration 65 This led to the joke In Fortran GOD is REAL unless declared INTEGER See also edit Computer programming portal f2c FORMAC List of Fortran compilers List of Fortran numerical libraries List of programming languages Matrix representation Rowmajor order References edit Chapel spec Acknowledgements PDF Cray Inc 1 October 2015 Retrieved 14 January 2016 mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em FORTRAN American Heritage Dictionary of the English Language 5 ed The Free Dictionary 2011 Retrieved 8 February 2016 John Backus The history of FORTRAN I II and III PDF Softwarepreservationorg Retrieved 19 November 2014 Eugene Loh 18 June 2010 The Ideal HPC Programming Language Queue 8 6 HPL A Portable Implementation of the HighPerformance Linpack Benchmark for DistributedMemory Computers Retrieved 21 February 2015 Q13 What are the benchmarks Overview CPU 2017 SPEC Retrieved 13 November 2019 Fifty Years of BASIC Time 29 April 2014 Szczepaniak John 1 May 2014 A basic history of BASIC on its 50th birthday Gamasutra a b c d e John Backus OctoberDecember 1998 The History of Fortran I II and III IEEE Annals of the History of Computing 20 4 6878 doi 10110985728232 a b J W Backus R J Beeber S Best R Goldberg L M Haibt H L Herrick R A Nelson D Sayre P B Sheridan H Stern L Ziller R A Hughes R Nutt February 1957 The FORTRAN Automatic Coding System PDF Western Joint Computer Conference pp188198 doi 10114514555671455599 Mindell David Digital Apollo MIT Press Cambridge MA 2008 p99 The Fortran I Compiler The Fortran I compiler was the first major project in code optimization It tackled problems of crucial importance whose general solution was an important research focus in compiler technology for several decades Many classical techniques for compiler analysis and optimization can trace their origins and inspiration to the Fortran I compiler Brian Bergstein 20 May 2007 Fortran creator John Backus dies MSNBC Retrieved 29 October 2018 Applied Science Division and Programming Research Department International Business Machines Corporation 15 October 1956 The FORTRAN Automatic Coding System for the IBM 704 EDPM Programmers Reference Manual PDF pp1920 Programming Research Department International Business Machines Corporation 8 April 1957 The FORTRAN Automatic Coding System for the IBM 704 EDPM Preliminary Operators Manual PDF pp637 Betty Jo Armstead 21 January 2015 My Years at NASA PDF Denver Museum of Nature Science Retrieved 15 June 2019 Reference Manual IBM 7090 Data Processing System 1961 IBM A2265283 Fortran II User Manual PDF Bitsaversorg Retrieved 19 November 2014 Reference Manual FORTRAN II for the IBM 704 Data Processing System PDF 1958 C2860002 Ibibilioorg Ibiblioorg Retrieved 15 September 2014 Haines L H 1965 Serial compilation and the 1401 FORTRAN compiler IBM Systems Journal 4 1 7380 doi 101147sj410073 Lee John A N 1967 Anatomy of a Compiler Van Nostrand Reinhold Fortran Specifications and Operating Procedures IBM 1401 PDF IBM C2414552 Fortran IV Language Specifications Program Specifications and Operating Procedures IBM 1401 1440 and 1460 PDF IBM April 1966 C2433222 McCracken Daniel D 1965 Preface A Guide to FORTRAN IV Programming New York Wiley pv ISBN 9780471582816 List of FORTRAN Implementations 1957 1967 IEEE Annals 2017 Retrieved 17 October 2017 IBM System360 Model 50 Functional Characteristics PDF IBM 1967 A2268981 FORTRAN Compilers and Loaders Chiltonprogrammingorguk Retrieved 19 November 2014 Milstd1753 DoD Supplement to X391978 United States Government Printing Office Archived from the original on 9 November 2007 Retrieved 13 December 2007 IEEE 100391992 IEEE Standard for InformationTechnology POSIXR FORTRAN 77 Language Interfaces Part 1 Binding for System Application Program Interface API IEEE Retrieved 24 November 2018 Declaration Statements for Character Types Compaq Fortran Language Reference Manual Texas Huston US Compaq Computer Corporation 1999 Retrieved 17 September 2018 The form CHARACTER is an obsolescent feature in Fortran 95 Fortran 95 Reference GnuOrg Retrieved 10 May 2014 Fortran 2003 Last Working Draft GnuOrg Retrieved 10 May 2014 Fortran Working Group WG5 It may also be downloaded as a PDF file FTPnagcouk N1836 Summary of VotingTable of Replies on ISOIEC FDIS 15391 Information technology Programming languages Fortran Part 1 Base language PDF Fortran 2008 Last Working Draft PDF GnuOrg Retrieved 10 May 2014 N1830 Information technology Programming languages Fortran Part 1 Base language 1 dead link ISO page to ISOIEC DTS 29113 Further Interoperability of Fortran with C Draft of the Technical Specification TS 29113 PDF wg5fortranorg Doctor Fortran in Eighteen is the new Fifteen Softwareintelcom Retrieved 20 November 2017 Fortran 2018 ISO Retrieved 30 November 2018 Further Interoperability with C PDF ISO Retrieved 20 November 2017 Additional Parallel Features in Fortran ISO Retrieved 20 November 2017 The New Features of Fortran 2015 ISO Retrieved 23 June 2017 Doctor Fortran in One Door Closes Softwareintelcom Retrieved 21 September 2015 Doctor Fortran Goes Dutch Fortran 2015 Softwareintelcom Retrieved 19 November 2014 Fortran 2018 Interpretation Document 9 October 2018 Kemeny John G Kurtz Thomas E 11 October 1968 Dartmouth TimeSharing Science 162 3850 223228 doi 101126science1623850223 PMID 5675464 Phillips Lee Scientific computings future Can any coding language top a 1950s behemoth Ars Technica Retrieved 8 May 2014 Pasachoff Jay M April 1984 Scientists FORTRAN vs Modula2 BYTE letter p404 Retrieved 6 February 2015 Galperin Boris 1993 26 Large Eddy Simulation of Complex Engineering and Geophysical Flows London Cambridgey p573 ISBN 9780521430098 Interstellar 8Track How Voyagers Vintage Tech Keeps Running WIRED Retrieved 23 December 2017 Methods to ensure the standardization of FORTRAN software OSTI 5361454 PFORT Library Cite journal requires journal help a b P A Fox 1977 Port A portable mathematical subroutine library A portable mathematical subroutine library Lecture Notes in Computer Science 57 pp165177 doi 101007354008446042 ISBN 9783540084464 PORT written in PFORT ANS Fortran D E Whitten 1975 A machine and configuration independent Fortran Portable Fortran IEEE org Portability Issues discusses portability of Fortran Healy MJR 1968 Towards FORTRAN VI Advanced scientific Fortran by CDC CDC pp169172 Archived from the original on 5 July 2009 Retrieved 10 April 2009 third party release notes for Fortran v61 Cssoftwarecom 15 March 2011 Retrieved 19 November 2014 Internal Translator IT A Compiler for the IBM 650by A J Perlis J W Smith and H R Van Zoeren Computation CenterCarnegie Institute of Technology F Programming Language Homepage Fortrancom Retrieved 19 November 2014 Fortran for NET Language System Archived from the original on 18 October 2014 FTN95 Fortran 95 for Windows Silverfrostcom Retrieved 19 November 2014 X3J3 postmeeting distribution for meeting held at Brookhaven National Laboratory in November 1976 unreliable source The obliteration of O Computer Weekly 3 March 1977 Rules for Data Typing FORTRAN 77 Language Reference docsoraclecom Retrieved 29 September 2016 Further reading edit Articles Allen FE September 1981 A History of Language Processor Technology in IBM IBM Journal of Research and Development 25 5 535548 doi 101147rd2550535 J W Backus R J Beeber S Best R Goldberg L M Haibt H L Herrick R A Nelson D Sayre P B Sheridan H Stern L Ziller R A Hughes R Nutt February 1957 The FORTRAN Automatic Coding System PDF Western Joint Computer Conference pp188198 doi 10114514555671455599 Chivers Ian D Sleightholme Jane 2013 Compiler support for the Fortran 2003 2008 standards ACM SIGPLAN Fortran Forum 28 1 2628 doi 10114515207521520755 ISSN 10617264 Archived from the original on 16 May 2008 Pigott Diarmuid 2006 FORTRAN Backus et al highlevel compiler Computer Language The Encyclopedia of Computer Languages Murdoch University Archived from the original on 8 October 2009 Retrieved 5 May 2010 Roberts Mark L Griffiths Peter D 1985 Design Considerations for IBM Personal Computer Professional FORTRAN an Optimizing Compiler PDF IBM Systems Journal 24 1 4960 doi 101147sj2410049 Core language standards Ansi x391966 USA Standard FORTRAN PDF American National Standards Institute Informally known as FORTRAN 66 Ansi x391978 American National Standard Programming Language FORTRAN American National Standards Institute Archived from the original on 29 October 2013 Retrieved 11 December 2007 Also known as ISO 15391980 informally known as FORTRAN 77 ANSI X31981992 R1997 ISOIEC 15391991 American National Standard Programming Language Fortran Extended American National Standards Institute ISOIEC Archived from the original on 1 May 2002 Informally known as Fortran 90 ISOIEC 153911997 Information technology Programming languages Fortran Part 1 Base language PDF Archived from the original PDF on 18 August 2011 Retrieved 13 December 2007 Informally known as Fortran 95 There are a further two parts to this standard Part 1 has been formally adopted by ANSI ISOIEC 153912004 Information technology Programming languages Fortran Part 1 Base language PDF Informally known as Fortran 2003 ISOIEC 153912010 Final Draft International Standard Information technology Programming languages Fortran Part 1 Base language PDF permanent dead link Informally known as Fortran 2008 Related standards Kneis Wilfried October 1981 Draft standard Industrial RealTime FORTRAN ACM SIGPLAN Notices 16 7 4560 doi 101145947864947868 ISSN 03621340 ISO 865111988 Information processing systems Computer graphics Graphical Kernel System GKS language bindings Part 1 FORTRAN Geneva Switzerland ISO 1988 Other reference material ECMA Standard on FORTRAN PDF European Computer Manufacturers Association April 1965 Retrieved 17 November 2014 FORTRAN 77 40 Reference Manual PDF Sun Microsystems Inc 1995 Retrieved 17 November 2014 FORTRAN Coding Form PDF IBM Archived from the original PDF on 8 June 2015 Retrieved 17 November 2014 IBM System360 and System370 Fortran IV Language PDF International Business Machines May 1974 Retrieved 17 November 2014 Goerz Michael 2014 Modern Fortran Reference Card PDF Retrieved 14 December 2014 Textbooks Adams Jeanne C Brainerd Walter S Hendrickson Richard A Maine Richard E Martin Jeanne T Smith Brian T 2009 The Fortran 2003 Handbook 1st ed Springer ISBN 9781846283789 Akin Ed 2003 Object Oriented Programming via Fortran 9095 1st ed Cambridge University Press ISBN 9780521524087 Chapman Stephen J 2007 Fortran 952003 for Scientists and Engineers 3rd ed McGrawHill ISBN 9780073191577 Chivers Ian Sleightholme Jane 2015 Introduction to Programming with Fortran 3rd ed Springer ISBN 9783319177007 Etter D M 1990 Structured FORTRAN 77 for Engineers and Scientists 3rd ed The BenjaminCummings Publishing Company Inc ISBN 9780805300512 Ellis T M R Phillips Ivor R Lahey Thomas M 1994 Fortran 90 Programming 1st ed Addison Wesley ISBN 9780201544466 Kupferschmid Michael 2002 Classical Fortran Programming for Engineering and Scientific Applications Marcel Dekker CRC Press ISBN 9780824708023 McCracken Daniel D 1961 A Guide to FORTRAN Programming New York Wiley LCCN 61016618 Metcalf Michael John Reid Malcolm Cohen 2011 Modern Fortran Explained Oxford University Press ISBN 9780199601424 Nyhoff Larry Sanford Leestma 1995 FORTRAN 77 for Engineers and Scientists with an Introduction to Fortran 90 4th ed Prentice Hall ISBN 9780133630039 Page Clive G 1988 Professional Programmers Guide to Fortran77 7 June 2005 ed London Pitman ISBN 9780273028567 Retrieved 4 May 2010 Press William H 1996 Numerical Recipes in Fortran 90 The Art of Parallel Scientific Computing Cambridge UK Cambridge University Press ISBN 9780521574396 Sleighthome Jane Chivers Ian David 1990 Interactive Fortran 77 A HandsOn Approach Computers and their applications 2nd ed Chichester E Horwood ISBN 9780134667645 Archived from the original on 12 March 2014 Retrieved 12 March 2014 Walter S Brainerd Charles H Goldberg Jeanne C Adams Programmers guide to Fortran 903rd Ed Springer 1996 Ed Akin ObjectOriented Programming via Fortran 9095 Cambridge Univ Press ISBN 9780521524087 Feb 2003 Michael Metcalf John Reid Malcolm Cohen Modern Fortran Explained Numerical Mathematics and Scientific Computation 4th Ed Oxford Univ Press ISBN 9780199601417 May 2011 Norman S Clerman Walter Spector Modern Fortran Style and Usage Cambridge University Press ISBN 9780521514538 Feb 2012 Walter S Brainerd Guide to Fortran 2008 Programming2nd Ed Springer ISBN 9781447167587 Sep 2015 Michael Metcalf John Reid Malcolm Cohen Modern Fortran Explained Incorporating Fortran 2018 5th Ed Oxford Univ Press ISBN 9780198811886 Nov 2018 Mark Jones Lorenzo Abstracting Away the Machine The History of the FORTRAN Programming Language FORmula TRANslation Independently published ISBN 9781082395949 Aug 2019 External links edit Wikibooks has a book on the topic of Fortran Wikiquote has quotations related to Fortran ISOIEC JTC1SC22WG5 the official home of Fortran standards Fortran Standards Documents GFortran standards History of FORTRAN and Fortran II Computer History Museum Valmer Norrod et alA selfstudy course in FORTRAN programingVolume Itextbook Computer Science Corporation El Segundo California April1970 NASAN7025287 Valmer Norrod Sheldom Blecher and Martha Horton A selfstudy course in FORTRAN programingVolume IIworkbook NASA CR1478 VolII April1970 NASAN7025288 v t e IBM History History of IBM Mergers and acquisitions Think motto Operating Systems Products IBM Cloud IBM Cognos Analytics Watson Cell microprocessor Power Systems Personal Computer Mainframe Information Management Software Lotus Software Rational Software SPSS ILOG Tivoli Software Service Automation Manager WebSphere alphaWorks Criminal Reduction Utilising Statistical History Mashup Center PureQuery Redbooks FlashSystem Fortran Connections Q System One Business entities IBM Aspera Center for The Business of Government Global Services IBM Hybrid Cloud International subsidiaries jStart Kenexa Research The Weather Company Weather Underground Watson Health Facilities Towers 1250 RenéLévesque Montreal QC One Atlantic Center Atlanta GA Software Labs Rome Software Lab Toronto Software Lab IBM Buildings 330 North Wabash Chicago IL Johannesburg Seattle Research Labs Africa Almaden Austin Laboratory Australia Brazil China Laboratory Haifa Laboratory India Laboratory Ireland Thomas J Watson Center New York Tokyo Zurich Laboratory Facilities Hakozaki Facility Yamato Facility Cambridge Scientific Center IBM Hursley Canada Head Office Building IBM Rochester Somers Office Complex Initiatives Academy of Technology Centers for Advanced Studies CASCON Deep Thunder IBM Fellow Pulse conference The Great Mind Challenge DeveloperWorks Develothon Linux Technology Center IBM Virtual Universe Community Smarter Planet World Community Grid Inventions Automated teller machine Electronic keypunch Hard disk drive Floppy disk DRAM Relational model Selectric typewriter Financial swaps Universal Product Code Magnetic stripe card Sabre airline reservation system Scanning tunneling microscope Terminology Globally Integrated Enterprise Commercial Processing Workload Consumability ebusiness CEOs Thomas J Watson 19141956 Thomas Watson Jr 19561971 T Vincent Learson 19711973 Frank T Cary 19731981 John R Opel 19811985 John Fellows Akers 19851993 Louis V Gerstner Jr 19932002 Samuel J Palmisano 20022011 Ginni Rometty 2012present Board of directors Alain Belda William R Brody Kenneth Chenault Michael L Eskew David Farr Shirley Ann Jackson Andrew N Liveris James McNerney James W Owens Samuel J Palmisano Virginia M Rometty Joan E Spero Sidney Taurel Lorenzo Zambrano Other A Boy and His Atom Common Public License IBM Public License Customer engineer Deep Blue Deep Thought Dynamic infrastructure GUIDE International IBM and the Holocaust IBM international chess tournament Lucifer cipher Mathematica IBM Plex SHARE computing ScicomP Quantum Experience v t e Programming languages Comparison Timeline History APL Assembly BASIC C C C COBOL Elixir Fortran Go Groovy Haskell Java JavaScript JS Julia Kotlin Lisp Lua MATLAB ObjectiveC OCaml Pascal Perl PHP Python R Ruby Rust Scala Shell Smalltalk Swift TypeScript Visual Basic NET VBNET more Category Lists Alphabetical Categorical Generational NonEnglishbased Authority control BNE XX531008 BNF cb11931442r data GND 40179849 LCCN sh85050987