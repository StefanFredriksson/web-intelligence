Highlevel programming language Programming language with strong abstraction from details of hardware Programming language with strong abstraction from details of hardware In computer science a highlevel programming language is a programming language with strong abstraction from the details of the computer In contrast to lowlevel programming languages it may use natural language elements be easier to use or may automate or even hide entirely significant areas of computing systems eg memory management making the process of developing a program simpler and more understandable than when using a lowerlevel language The amount of abstraction provided defines how highlevel a programming language is 1 In the 1960s highlevel programming languages using a compiler were commonly called autocodes 2 Examples of autocodes are COBOL and Fortran 3 The first highlevel programming language designed for computers was Plankalk√ºl created by Konrad Zuse 4 However it was not implemented in his time and his original contributions were largely isolated from other developments due to World War II aside from the languages influence on the Superplan language by Heinz Rutishauser and also to some degree Algol The first significantly widespread highlevel language was Fortran a machineindependent development of IBMs earlier Autocode systems Algol defined in 1958 and 1960 by committees of European and American computer scientists introduced recursion as well as nested functions under lexical scope It was also the first language with a clear distinction between value and nameparameters and their corresponding semantics 5 Algol also introduced several structured programming concepts such as the whiledo and ifthenelse constructs and its syntax was the first to be described in formal notation BackusNaur form BNF During roughly the same period Cobol introduced records also called structs and Lisp introduced a fully general lambda abstraction in a programming language for the first time Contents 1 Features 2 Abstraction penalty 3 Relative meaning 4 Execution modes 41 Highlevel language computer architecture 5 See also 6 References 7 External links Features edit Highlevel language refers to the higher level of abstraction from machine language Rather than dealing with registers memory addresses and call stacks highlevel languages deal with variables arrays objects complex arithmetic or boolean expressions subroutines and functions loops threads locks and other abstract computer science concepts with a focus on usability over optimal program efficiency Unlike lowlevel assembly languages highlevel languages have few if any language elements that translate directly into a machines native opcodes Other features such as string handling routines objectoriented language features and file inputoutput may also be present One thing to note about highlevel programming languages is that these languages allow the programmer to be detached and separated from the machine That is unlike lowlevel languages like assembly or machine language highlevel programming can amplify the programmers instructions and trigger a lot of data movements in the background without their knowledge The responsibility and power of executing instructions have been handed over to the machine from the programmer Abstraction penalty edit Highlevel languages intend to provide features which standardize common tasks permit rich debugging and maintain architectural agnosticism while lowlevel languages often produce more efficient code through optimization for a specific system architecture Abstraction penalty is the cost that highlevel programming techniques pay for being unable to optimize performance or use certain hardware because they dont take advantage of certain lowlevel architectural resources Highlevel programming exhibits features like more generic data structures and operations runtime interpretation and intermediate code files which often result in execution of far more operations than necessary higher memory consumption and larger binary program size 6 7 8 For this reason code which needs to run particularly quickly and efficiently may require the use of a lowerlevel language even if a higherlevel language would make the coding easier In many cases critical portions of a program mostly in a highlevel language can be handcoded in assembly language leading to a much faster more efficient or simply reliably functioning optimised program However with the growing complexity of modern microprocessor architectures welldesigned compilers for highlevel languages frequently produce code comparable in efficiency to what most lowlevel programmers can produce by hand and the higher abstraction may allow for more powerful techniques providing better overall results than their lowlevel counterparts in particular settings 9 Highlevel languages are designed independent of a specific computing system architecture This facilitates executing a program written in such a language on any computing system with compatible support for the Interpreted or JIT program Highlevel languages can be improved as their designers develop improvements In other cases new highlevel languages evolve from one or more others with the goal of aggregating the most popular constructs with new or improved features An example of this is Scala which maintains backward compatibility with Java which means that programs and libraries written in Java will continue to be usable even if a programming shop switches to Scala this makes the transition easier and the lifespan of such highlevel coding indefinite In contrast lowlevel programs rarely survive beyond the system architecture which they were written for without major revision This is the engineering tradeoff for the Abstraction Penalty Relative meaning edit This section does not cite any sources October 2018 Learn how and when to remove this template message Examples of highlevel programming languages in active use today include Python Visual Basic Delphi Perl PHP ECMAScript Ruby C Java and many others The terms highlevel and lowlevel are inherently relative Some decades ago the C language and similar languages were most often considered highlevel as it supported concepts such as expression evaluation parameterised recursive functions and data types and structures while assembly language was considered lowlevel Today many programmers might refer to C as lowlevel as it lacks a large runtime system no garbage collection etc basically supports only scalar operations and provides direct memory addressing It therefore readily blends with assembly language and the machine level of CPUs and microcontrollers Assembly language may itself be regarded as a higher level but often still onetoone if used without macros representation of machine code as it supports concepts such as constants and limited expressions sometimes even variables procedures and data structures Machine code in its turn is inherently at a slightly higher level than the microcode or microoperations used internally in many processors 10 Execution modes edit This section does not cite any sources October 2018 Learn how and when to remove this template message There are three general modes of execution for modern highlevel languages Interpreted When code written in a language is interpreted its syntax is read and then executed directly with no compilation stage A program called an interpreter reads each program statement following the program flow then decides what to do and does it A hybrid of an interpreter and a compiler will compile the statement into machine code and execute that the machine code is then discarded to be interpreted anew if the line is executed again Interpreters are commonly the simplest implementations of the behavior of a language compared to the other two variants listed here Compiled When code written in a language is compiled its syntax is transformed into an executable form before running There are two types of compilation Machine code generation Some compilers compile source code directly into machine code This is the original mode of compilation and languages that are directly and completely transformed to machinenative code in this way may be called truly compiled languages See assembly language Intermediate representations When code written in a language is compiled to an intermediate representation that representation can be optimized or saved for later execution without the need to reread the source file When the intermediate representation is saved it may be in a form such as bytecode The intermediate representation must then be interpreted or further compiled to execute it Virtual machines that execute bytecode directly or transform it further into machine code have blurred the once clear distinction between intermediate representations and truly compiled languages Sourcetosource translated or transcompiled Code written in a language may be translated into terms of a lowerlevel language for which native code compilers are already common JavaScript and the language C are common targets for such translators See CoffeeScript Chicken Scheme and Eiffel as examples Specifically the generated C and C code can be seen as generated from the Eiffel language when using the EiffelStudio IDE in the EIFGENs directory of any compiled Eiffel project In Eiffel the translated process is referred to as transcompiling or transcompiled and the Eiffel compiler as a transcompiler or sourcetosource compiler Note that languages are not strictly interpreted languages or compiled languages Rather implementations of language behavior use interpreting or compiling For example ALGOL 60 and Fortran have both been interpreted even though they were more typically compiled Similarly Java shows the difficulty of trying to apply these labels to languages rather than to implementations Java is compiled to bytecode which is then executed by either interpreting in a Java virtual machine JVM or compiling typically with a justintime compiler such as HotSpot again in a JVM Moreover compiling transcompiling and interpreting are not strictly limited to only a description of the compiler artifact binary executable or IL assembly Highlevel language computer architecture edit Alternatively it is possible for a highlevel language to be directly implemented by a computer the computer directly executes the HLL code This is known as a highlevel language computer architecture the computer architecture itself is designed to be targeted by a specific highlevel language The Burroughs large systems were target machines for ALGOL 60 for example 11 See also edit Computer programming portal Abstraction computer science Generational list of programming languages Lowlevel programming languages Highlevel assembler Very highlevel programming languages Categorical list of programming languages References edit HThreads RD Glossary London Keith 1968 4 Programming Introduction to Computers 24 Russell Square London WC1 Faber and Faber Limited p184 ISBN 0571085938 The high level programming languages are often called autocodes and the processor program a compiler mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em London Keith 1968 4 Programming Introduction to Computers 24 Russell Square London WC1 Faber and Faber Limited p186 ISBN 0571085938 Two high level programming languages which can be used here as examples to illustrate the structure and purpose of autocodes are COBOL Common Business Oriented Language and FORTRAN Formular Translation Giloi Wolfgang K de 1997 Konrad Zuses Plankalk√ºl The First HighLevel non von Neumann Programming Language IEEE Annals of the History of Computing vol 19 no 2 pp1724 AprilJune 1997 abstract Although it lacked a notion of referenceparameters which could be a problem in some situations Several successors including AlgolW Algol68 Simula Pascal Modula and Ada therefore included referenceparameters The related Clanguage family instead allowed addresses as value parameters Surana P 2006 MetaCompilation of Language Abstractions PDF Archived from the original PDF on 20150217 Retrieved 20080317 Cite journal requires journal help Kuketayev The Data Abstraction Penalty DAP Benchmark for Small Objects in Java Retrieved 20080317 Chatzigeorgiou Stephanides 2002 Evaluating Performance and Power Of ObjectOriented Vs Procedural Programming Languages In Blieberger Strohmeier eds Proceedings 7th International Conference on Reliable Software Technologies AdaEurope2002 Springer p367 Manuel Carro Jos√© F Morales Henk L Muller G Puebla M Hermenegildo 2006 Highlevel languages for small devices a case study PDF Proceedings of the 2006 International Conference on Compilers Architecture and Synthesis for Embedded Systems ACM Hyde Randall 2010 The art of assembly language 2nd ed San Francisco No Starch Press ISBN 9781593273019 OCLC 635507601 Chu Yaohan 1975 Concepts of HighLevel Language Computer Architecture HighLevel Language Computer Architecture Elsevier pp114 doi 101016b9780121741501500070 ISBN 9780121741501 External links edit httpc2comcgiwikiHighLevelLanguage The WikiWikiWeb s article on highlevel programming languages v t e Types of programming languages Actorbased Array Aspectoriented Classbased Concatenative Concurrent Dataflow Declarative Domainspecific Dynamic Esoteric Eventdriven Extensible Functional Imperative Logic Macro Metaprogramming Multiparadigm Objectbased Objectoriented Pipeline Procedural Prototypebased Reflective Rulebased Scripting Stack based Synchronous Tactile Templating Assembly Compiled Interpreted Machine Lowlevel Highlevel Very highlevel First generation Second generation Third generation Fourth generation Fifth generation NonEnglishbased Visual Authority control GND 41603679 LCCN sh2007005228