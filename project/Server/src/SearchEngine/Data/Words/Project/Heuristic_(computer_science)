Heuristic computer science For other uses see Heuristic disambiguation In computer science artificial intelligence and mathematical optimization a heuristic from Greek εὑρίσκω I find discover is a technique designed for solving a problem more quickly when classic methods are too slow or for finding an approximate solution when classic methods fail to find any exact solution This is achieved by trading optimality completeness accuracy or precision for speed In a way it can be considered a shortcut A heuristic function also called simply a heuristic is a function that ranks alternatives in search algorithms at each branching step based on available information to decide which branch to follow For example it may approximate the exact solution 1 Contents 1 Definition and motivation 2 Tradeoff 3 Examples 31 Simpler problem 32 Travelling salesman problem 33 Search 34 Newell and Simon heuristic search hypothesis 35 Antivirus software 4 Pitfalls 5 Etymology 6 See also 7 References Definition and motivation edit The objective of a heuristic is to produce a solution in a reasonable time frame that is good enough for solving the problem at hand This solution may not be the best of all the solutions to this problem or it may simply approximate the exact solution But it is still valuable because finding it does not require a prohibitively long time Heuristics may produce results by themselves or they may be used in conjunction with optimization algorithms to improve their efficiency eg they may be used to generate good seed values Results about NPhardness in theoretical computer science make heuristics the only viable option for a variety of complex optimization problems that need to be routinely solved in realworld applications Heuristics underlie the whole field of Artificial Intelligence and the computer simulation of thinking as they may be used in situations where there are no known algorithms 2 Tradeoff edit The tradeoff criteria for deciding whether to use a heuristic for solving a given problem include the following Optimality When several solutions exist for a given problem does the heuristic guarantee that the best solution will be found Is it actually necessary to find the best solution Completeness When several solutions exist for a given problem can the heuristic find them all Do we actually need all solutions Many heuristics are only meant to find one solution Accuracy and precision Can the heuristic provide a confidence interval for the purported solution Is the error bar on the solution unreasonably large Execution time Is this the best known heuristic for solving this type of problem Some heuristics converge faster than others Some heuristics are only marginally quicker than classic methods In some cases it may be difficult to decide whether the solution found by the heuristic is good enough because the theory underlying heuristics is not very elaborate Examples edit Simpler problem edit One way of achieving the computational performance gain expected of a heuristic consists of solving a simpler problem whose solution is also a solution to the initial problem Travelling salesman problem edit An example of approximation is described by Jon Bentley for solving the travelling salesman problem TSP Given a list of cities and the distances between each pair of cities what is the shortest possible route that visits each city and returns to the origin city so as to select the order to draw using a pen plotter TSP is known to be NPHard so an optimal solution for even a moderate size problem is difficult to solve Instead the greedy algorithm can be used to give a good but not optimal solution it is an approximation to the optimal answer in a reasonably short amount of time The greedy algorithm heuristic says to pick whatever is currently the best next step regardless of whether that prevents or even makes impossible good steps later It is a heuristic in that practice says it is a good enough solution theory says there are better solutions and even can tell how much better in some cases 3 Search edit Another example of heuristic making an algorithm faster occurs in certain search problems Initially the heuristic tries every possibility at each step like the fullspace search algorithm But it can stop the search at any time if the current possibility is already worse than the best solution already found In such search problems a heuristic can be used to try good choices first so that bad paths can be eliminated early see alphabeta pruning In the case of bestfirst search algorithms such as A search the heuristic improves the algorithms convergence while maintaining its correctness as long as the heuristic is admissible Newell and Simon heuristic search hypothesis edit In their Turing Award acceptance speech Allen Newell and Herbert A Simon discuss the heuristic search hypothesis a physical symbol system will repeatedly generate and modify known symbol structures until the created structure matches the solution structure Each following step depends upon the step before it thus the heuristic search learns what avenues to pursue and which ones to disregard by measuring how close the current step is to the solution Therefore some possibilities will never be generated as they are measured to be less likely to complete the solution A heuristic method can accomplish its task by using search trees However instead of generating all possible solution branches a heuristic selects branches more likely to produce outcomes than other branches It is selective at each decision point picking branches that are more likely to produce solutions 4 Antivirus software edit Antivirus software often uses heuristic rules for detecting viruses and other forms of malware Heuristic scanning looks for code andor behavioral patterns common to a class or family of viruses with different sets of rules for different viruses If a file or executing process is found to contain matching code patterns andor to be performing that set of activities then the scanner infers that the file is infected The most advanced part of behaviorbased heuristic scanning is that it can work against highly randomized selfmodifyingmutating polymorphic viruses that cannot be reliably detected by simpler string scanning methods Heuristic scanning has the potential to detect future viruses without requiring the virus to be first detected somewhere else submitted to the virus scanner developer analyzed and a detection update for the scanner provided to the scanners users Pitfalls edit Some heuristics have a strong underlying theory they are either derived in a topdown manner from the theory or are arrived at based on either experimental or real world data Others are just rules of thumb based on realworld observation or experience without even a glimpse of theory The latter are exposed to a larger number of pitfalls When a heuristic is reused in various contexts because it has been seen to work in one context without having been mathematically proven to meet a given set of requirements it is possible that the current data set does not necessarily represent future data sets see overfitting and that purported solutions turn out to be akin to noise Statistical analysis can be conducted when employing heuristics to estimate the probability of incorrect outcomes To use a heuristic for solving a search problem or a knapsack problem it is necessary to check that the heuristic is admissible Given a heuristic function h v i v g displaystyle hvivg meant to approximate the true optimal distance d v i v g displaystyle dstar vivg to the goal node v g displaystyle vg in a directed graph G displaystyle G containing n displaystyle n total nodes or vertexes labeled v 0 v 1 v n displaystyle v0v1cdots vn admissible means roughly that the heuristic underestimates the cost to the goal or formally that h v i v g d v i v g displaystyle hvivgleq dstar vivg for all v i v g displaystyle vivg where i g 0 1 n displaystyle igin 01n If a heuristic is not admissible it may never find the goal either by ending up in a dead end of graph G displaystyle G or by skipping back and forth between two nodes v i displaystyle vi and v j displaystyle vj where i j g displaystyle ijneq g Etymology edit Look up heuristic in Wiktionary the free dictionary The word heuristic came into usage in the early 19th century It is formed irregularly from the Greek word heuriskein meaning to find 5 See also edit Algorithm Constructive heuristic Genetic algorithm Heuristic Heuristic routing Heuristic evaluation Method for identifying usability problems in user interfaces Metaheuristic Methods for controlling and tuning basic heuristic algorithms usually with usage of memory and learning Matheuristics Optimization algorithms made by the interoperation of metaheuristics and mathematical programming MP techniques Reactive search optimization Methods using online machine learning principles for selftuning of heuristics References edit Pearl Judea 1984 Heuristics intelligent search strategies for computer problem solving United States AddisonWesley Pub Co Inc Reading MA p3 OSTI 5127296 mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput idlockfree amwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput idlocklimited amwparseroutput idlockregistration amwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput idlocksubscription amwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em Apter Michael J 1970 The Computer Simulation of Behaviour London Hutchinson Co p83 Jon Louis Bentley 1982 Writing Efficient Programs Prentice Hall p 11 Allen Newell and Herbert A Simon 1976 Computer Science as Empirical Inquiry Symbols and Search PDF Comm ACM 19 3 113126 doi 101145360018360022 Definition of heuristic in English Oxford University Press Archived from the original on 23 October 2016 Retrieved 22 October 2016 