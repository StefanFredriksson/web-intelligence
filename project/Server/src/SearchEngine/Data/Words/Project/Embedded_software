Embedded software Embedded software is computer software written to control machines or devices that are not typically thought of as computers commonly known as embedded systems It is typically specialized for the particular hardware that it runs on and has time and memory constraints 1 This term is sometimes used interchangeably with firmware A precise and stable characteristic feature is that no or not all functions of embedded software are initiatedcontrolled via a human interface but through machineinterfaces instead 2 Manufacturers build embeded software into the electronics of cars telephones modems robots appliances toys security systems pacemakers televisions and settop boxes and digital watches for example 3 This software can be very simple such as lighting controls running on an 8bit microcontroller with a few kilobytes of memory with the suitable level of processing complexity determined with a Probably Approximately Correct Computation framework 4 a methodology based on randomized algorithms or can become very sophisticated in applications such as airplanes missiles and process control systems 5 Contents 1 Operating systems 2 Differences from application software 3 Communication protocols 4 References 5 See also Operating systems edit Unlike standard computers that generally use an operating systems such as OS X Windows or GNULinux embedded software may use no operating system or when they do use a wide variety of operating systems can be chosen from typically a realtime operating system This runs from small oneperson operations consisting of a run loop and a timer to LynxOS VxWorks BeRTOS ThreadX to Windows CE or Linux with patched kernel Others include OpenWrt PikeOS eCos Fusion RTOS Nucleus RTOS RTEMS INTEGRITY uCOS QNX FreeBSD and OSE Code is typically written in C or C but various highlevel programming languages such as Python and JavaScript are now also in common use to target microcontrollers and embedded systems 6 Ada is used in some military and aviation projects Differences from application software edit Most consumers are familiar with application software that provide functionality on a computer Embedded software however is often less visible but no less complicated Unlike application software embedded software has fixed hardware requirements and capabilities and addition of thirdparty hardware or software is strictly controlled Embedded software needs to include all needed device drivers at manufacturing time and the device drivers are written for the specific hardware The software is highly dependent on the CPU and specific chips chosen Most embedded software engineers have at least a passing knowledge of reading schematics and reading data sheets for components to determine usage of registers and communication system Conversion between decimal hexadecimal and binary is useful as well as using bit manipulation 7 Web applications are rarely used although XML files and other output may be passed to a computer for display File systems with folders are typically absent as are SQL databases Software development requires use of a cross compiler which runs on a computer but produces executable code for the target device Debugging requires use of an incircuit emulator JTAG or SWD Software developers often have access to the complete kernel OS source code Size of the storage memory and RAM can vary significantly Some systems run in 16KB of Flash and 4KB of RAM with a CPU operating at 8MHz other systems can rival contemporary computers 8 These space requirements lead to more work being done in C or embedded C instead of C Interpreted languages like BASIC while eg Parallax Propeller can use compiled BASIC and Java Java ME Embedded 83 9 is available for eg ARM CortexM4 CortexM7 microcontrollers and older ARM11 used in Raspberry Pi and Intel Galileo Gen 2 are not commonly used while an implementation of the interpreted Python 3 language MicroPython is however available expressly for microcontroller use eg 32bit ARM based such as BBC microbit and 16bit PIC microcontrollers Communication protocols edit Communications between processors and between one processor and other components are essential Besides direct memory addressing common protocols include IC SPI serial ports and USB Communications protocols designed for use in embedded systems are available as closed source from companies including InterNiche Technologies and CMX Systems Opensource protocols stem from uIP lwip and others References edit Edward A Lee Embedded Software Advances in Computers M Zelkowitz editor 56 Academic Press London 2002 Stroustrup on C for embedded bottom p2 PDF Retrieved 9 December 2012 mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em ICS on embedded software Archived from the original on 22 March 2013 Retrieved 22 July 2013 Embedded Systems Methods and Technologies Archived from the original on 29 October 2013 Retrieved 9 December 2012 Alippi Cesare 2014 Intelligence for Embedded Systems Springer ISBN 9783319052786 httpptolemyeecsberkeleyedupublicationspapers02embsoftembsoftwrepdf Mazzei Daniele Montelisciani Gabriele Baldi Giacomo Fantoni Gualtiero 2015 Changing the programming paradigm for the embedded in the IoT domain Internet of Things WFIoT 2015 IEEE 2nd World Forum on Milan IEEE pp239244 doi 101109WFIoT20157389059 Stroustrup on embedded software Archived from the original on 3 February 2013 Retrieved 9 December 2012 Example of embedded CPU Retrieved 9 December 2012 Java ME Embedded Oracle Technology Network See also edit Embedded system v t e Embedded systems General terms ASIC Board support package Bootloader Consumer electronics Cross compiler Embedded database Embedded hypervisor Embedded OS Embedded software FPGA IoT Memory footprint Microcontroller Singleboard computer Raspberry Pi SoC Firmware and controls Closed platform Crippleware Custom firmware Defective by Design Hacking of consumer electronics Homebrew video games iOS jailbreaking PlayStation 3 Jailbreak Proprietary firmware Rooting Android Vendor lockin Software libraries uClibc dietlibc Embedded GLIBC lwIP musl Programming tools Almquist shell Bitbake Buildroot BusyBox OpenEmbedded Standalone shell Toybox Yocto Project Operating systems Linux on embedded systems Linux for mobile devices Lightweight Linux distribution Realtime operating system Windows IoT Win CE Programming languages Ada Assembly language CAPL Embedded C Embedded C Embedded Java MISRA C Lightweight browsers Opensource computing hardware Opensource robotics