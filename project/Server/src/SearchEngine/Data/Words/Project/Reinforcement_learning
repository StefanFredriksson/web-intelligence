Reinforcement learning For reinforcement learning in psychology see Reinforcement and Operant conditioning Machine learning and data mining Problems Classification Clustering Regression Anomaly detection AutoML Association rules Reinforcement learning Structured prediction Feature engineering Feature learning Online learning Semisupervised learning Unsupervised learning Learning to rank Grammar induction Supervised learning mwparseroutput noboldfontweightnormal classification regression Decision trees Ensembles Bagging Boosting Random forest k NN Linear regression Naive Bayes Artificial neural networks Logistic regression Perceptron Relevance vector machine RVM Support vector machine SVM Clustering BIRCH CURE Hierarchical k means Expectationmaximization EM DBSCAN OPTICS Meanshift Dimensionality reduction Factor analysis CCA ICA LDA NMF PCA tSNE Structured prediction Graphical models Bayes net Conditional random field Hidden Markov Anomaly detection k NN Local outlier factor Artificial neural network Autoencoder Deep learning DeepDream Multilayer perceptron RNN LSTM GRU Restricted Boltzmann machine GAN SOM Convolutional neural network UNet Reinforcement learning Qlearning SARSA Temporal difference TD Theory Biasvariance dilemma Computational learning theory Empirical risk minimization Occam learning PAC learning Statistical learning VC theory Machinelearning venues NeurIPS ICML ML JMLR ArXivcsLG Glossary of artificial intelligence Glossary of artificial intelligence Related articles List of datasets for machinelearning research Outline of machine learning v t e Reinforcement learning RL is an area of machine learning concerned with how software agents ought to take actions in an environment in order to maximize some notion of cumulative reward Reinforcement learning is one of three basic machine learning paradigms alongside supervised learning and unsupervised learning Reinforcement learning differs from supervised learning in not needing labelled inputoutput pairs be presented and in not needing suboptimal actions to be explicitly corrected Instead the focus is on finding a balance between exploration of uncharted territory and exploitation of current knowledge 1 The environment is typically stated in the form of a Markov decision process MDP because many reinforcement learning algorithms for this context utilize dynamic programming techniques 2 The main difference between the classical dynamic programming methods and reinforcement learning algorithms is that the latter do not assume knowledge of an exact mathematical model of the MDP and they target large MDPs where exact methods become infeasible mwparseroutput toclimit2 toclevel1 ulmwparseroutput toclimit3 toclevel2 ulmwparseroutput toclimit4 toclevel3 ulmwparseroutput toclimit5 toclevel4 ulmwparseroutput toclimit6 toclevel5 ulmwparseroutput toclimit7 toclevel6 uldisplaynone Contents 1 Introduction 2 Exploration 3 Algorithms for control learning 31 Criterion of optimality 311 Policy 312 Statevalue function 32 Brute force 33 Value function 331 Monte Carlo methods 332 Temporal difference methods 34 Direct policy search 4 Theory 5 Research 6 Comparison of reinforcement learning algorithms 61 Deep reinforcement learning 62 Inverse reinforcement learning 63 Apprenticeship learning 7 See also 8 References 9 Further reading 10 External links Introduction edit The typical framing of a Reinforcement Learning RL scenario an agent takes actions in an environment which is interpreted into a reward and a representation of the state which are fed back into the agent Reinforcement learning due to its generality is studied in many other disciplines such as game theory control theory operations research information theory simulationbased optimization multiagent systems swarm intelligence statistics and genetic algorithms In the operations research and control literature reinforcement learning is called approximate dynamic programming or neurodynamic programming The problems of interest in reinforcement learning have also been studied in the theory of optimal control which is concerned mostly with the existence and characterization of optimal solutions and algorithms for their exact computation and less with learning or approximation particularly in the absence of a mathematical model of the environment In economics and game theory reinforcement learning may be used to explain how equilibrium may arise under bounded rationality Basic reinforcement is modeled as a Markov decision process a set of environment and agent states S a set of actions A of the agent P a s s Pr s t 1 s s t s a t a displaystyle PassPrst1smid stsata is the probability of transition at time t displaystyle t from state s displaystyle s to state s displaystyle s under action a displaystyle a R a s s displaystyle Rass is the immediate reward after transition from s displaystyle s to s displaystyle s with action a displaystyle a rules that describe what the agent observes Rules are often stochastic The observation typically involves the scalar immediate reward associated with the last transition In many works the agent is assumed to observe the current environmental state full observability If not the agent has partial observability Sometimes the set of actions available to the agent is restricted a zero balance cannot be reduced For example if the current value of the agent is 3 and the state transition reduces the value by 4 the transition will not be allowed A reinforcement learning agent interacts with its environment in discrete time steps At each time t the agent receives an observation o t displaystyle ot which typically includes the reward r t displaystyle rt It then chooses an action a t displaystyle at from the set of available actions which is subsequently sent to the environment The environment moves to a new state s t 1 displaystyle st1 and the reward r t 1 displaystyle rt1 associated with the transition s t a t s t 1 displaystyle statst1 is determined The goal of a reinforcement learning agent is to collect as much reward as possible The agent can possibly randomly choose any action as a function of the history When the agents performance is compared to that of an agent that acts optimally the difference in performance gives rise to the notion of regret In order to act near optimally the agent must reason about the long term consequences of its actions ie maximize future income although the immediate reward associated with this might be negative Thus reinforcement learning is particularly wellsuited to problems that include a longterm versus shortterm reward tradeoff It has been applied successfully to various problems including robot control elevator scheduling telecommunications backgammon checkers 3 and Go AlphaGo Two elements make reinforcement learning powerful the use of samples to optimize performance and the use of function approximation to deal with large environments Thanks to these two key components reinforcement learning can be used in large environments in the following situations A model of the environment is known but an analytic solution is not available Only a simulation model of the environment is given the subject of simulationbased optimization 4 The only way to collect information about the environment is to interact with it The first two of these problems could be considered planning problems since some form of model is available while the last one could be considered to be a genuine learning problem However reinforcement learning converts both planning problems to machine learning problems Exploration edit The exploration vs exploitation tradeoff has been most thoroughly studied through the multiarmed bandit problem and for finite state space MDPs in Burnetas and Katehakis 1997 5 Reinforcement learning requires clever exploration mechanisms Randomly selecting actions without reference to an estimated probability distribution shows poor performance The case of small finite Markov decision processes is relatively well understood However due to the lack of algorithms that scale well with the number of states or scale to problems with infinite state spaces simple exploration methods are the most practical One such method is ϵ displaystyle epsilon greedy where 0 ϵ 1 displaystyle 0epsilon 1 is a parameter controlling the amount of exploration vs exploitation With probability 1 ϵ displaystyle 1epsilon exploitation is chosen and the agent chooses the action that it believes has the best longterm effect ties between actions are broken uniformly at random Alternatively with probability ϵ displaystyle epsilon exploration is chosen and the action is chosen uniformly at random ϵ displaystyle epsilon is usually a fixed parameter but can be adjusted either according to a schedule making the agent explore progressively less or adaptively based on heuristics 6 Algorithms for control learning edit Even if the issue of exploration is disregarded and even if the state was observable assumed hereafter the problem remains to use past experience to find out which actions are good Criterion of optimality edit Policy edit The agents action selection is modeled as a map called policy π A S 0 1 displaystyle pi Atimes Srightarrow 01 π a s Pr a t a s t s displaystyle pi asPratamid sts The policy map gives the probability of taking action a displaystyle a when in state s displaystyle s 7 61 There are also nonprobabilistic policies Statevalue function edit Value function V π s displaystyle Vpi s is defined as the expected return starting with state s displaystyle s ie s 0 s displaystyle s0s and successively following policy π displaystyle pi Hence roughly speaking the value function estimates how good it is to be in a given state 7 60 V π s E R E t 0 γ t r t s 0 s displaystyle Vpi soperatorname E Roperatorname E leftsum t0infty gamma trtmid s0sright where the random variable R displaystyle R denotes the return and is defined as the sum of future discounted rewards clarification needed R t 0 γ t r t displaystyle Rsum t0infty gamma trt where r t displaystyle rt is the reward at step t displaystyle t γ 0 1 displaystyle gamma in 01 is the discountrate clarification needed The algorithm must find a policy with maximum expected return From the theory of MDPs it is known that without loss of generality the search can be restricted to the set of socalled stationary policies A policy is stationary if the actiondistribution returned by it depends only on the last state visited from the observation agents history The search can be further restricted to deterministic stationary policies A deterministic stationary policy deterministically selects actions based on the current state Since any such policy can be identified with a mapping from the set of states to the set of actions these policies can be identified with such mappings with no loss of generality Brute force edit The brute force approach entails two steps For each possible policy sample returns while following it Choose the policy with the largest expected return One problem with this is that the number of policies can be large or even infinite Another is that variance of the returns may be large which requires many samples to accurately estimate the return of each policy These problems can be ameliorated if we assume some structure and allow samples generated from one policy to influence the estimates made for others The two main approaches for achieving this are value function estimation and direct policy search Value function edit See also Value function Value function approaches attempt to find a policy that maximizes the return by maintaining a set of estimates of expected returns for some policy usually either the current onpolicy or the optimal offpolicy one These methods rely on the theory of MDPs where optimality is defined in a sense that is stronger than the above one A policy is called optimal if it achieves the best expected return from any initial state ie initial distributions play no role in this definition Again an optimal policy can always be found amongst stationary policies To define optimality in a formal manner define the value of a policy π displaystyle pi by V π s E R s π displaystyle Vpi sERmid spi where R displaystyle R stands for the return associated with following π displaystyle pi from the initial state s displaystyle s Defining V s displaystyle Vs as the maximum possible value of V π s displaystyle Vpi s where π displaystyle pi is allowed to change V s max π V π s displaystyle Vsmax pi Vpi s A policy that achieves these optimal values in each state is called optimal Clearly a policy that is optimal in this strong sense is also optimal in the sense that it maximizes the expected return ρ π displaystyle rho pi since ρ π E V π S displaystyle rho pi EVpi S where S displaystyle S is a state randomly sampled from the distribution μ displaystyle mu clarification needed Although statevalues suffice to define optimality it is useful to define actionvalues Given a state s displaystyle s an action a displaystyle a and a policy π displaystyle pi the actionvalue of the pair s a displaystyle sa under π displaystyle pi is defined by Q π s a E R s a π displaystyle Qpi saoperatorname E Rmid sapi where R displaystyle R now stands for the random return associated with first taking action a displaystyle a in state s displaystyle s and following π displaystyle pi thereafter The theory of MDPs states that if π displaystyle pi is an optimal policy we act optimally take the optimal action by choosing the action from Q π s displaystyle Qpi scdot with the highest value at each state s displaystyle s The actionvalue function of such an optimal policy Q π displaystyle Qpi is called the optimal actionvalue function and is commonly denoted by Q displaystyle Q In summary the knowledge of the optimal actionvalue function alone suffices to know how to act optimally Assuming full knowledge of the MDP the two basic approaches to compute the optimal actionvalue function are value iteration and policy iteration Both algorithms compute a sequence of functions Q k displaystyle Qk k 0 1 2 displaystyle k012ldots that converge to Q displaystyle Q Computing these functions involves computing expectations over the whole statespace which is impractical for all but the smallest finite MDPs In reinforcement learning methods expectations are approximated by averaging over samples and using function approximation techniques to cope with the need to represent value functions over large stateaction spaces Monte Carlo methods edit Monte Carlo methods can be used in an algorithm that mimics policy iteration Policy iteration consists of two steps policy evaluation and policy improvement Monte Carlo is used in the policy evaluation step In this step given a stationary deterministic policy π displaystyle pi the goal is to compute the function values Q π s a displaystyle Qpi sa or a good approximation to them for all stateaction pairs s a displaystyle sa Assuming for simplicity that the MDP is finite that sufficient memory is available to accommodate the actionvalues and that the problem is episodic and after each episode a new one starts from some random initial state Then the estimate of the value of a given stateaction pair s a displaystyle sa can be computed by averaging the sampled returns that originated from s a displaystyle sa over time Given sufficient time this procedure can thus construct a precise estimate Q displaystyle Q of the actionvalue function Q π displaystyle Qpi This finishes the description of the policy evaluation step In the policy improvement step the next policy is obtained by computing a greedy policy with respect to Q displaystyle Q Given a state s displaystyle s this new policy returns an action that maximizes Q s displaystyle Qscdot In practice lazy evaluation can defer the computation of the maximizing actions to when they are needed Problems with this procedure include The procedure may spend too much time evaluating a suboptimal policy It uses samples inefficiently in that a long trajectory improves the estimate only of the single stateaction pair that started the trajectory When the returns along the trajectories have high variance convergence is slow It works in episodic problems only It works in small finite MDPs only Temporal difference methods edit Main article Temporal difference learning The first problem is corrected by allowing the procedure to change the policy at some or all states before the values settle This too may be problematic as it might prevent convergence Most current algorithms do this giving rise to the class of generalized policy iteration algorithms Many actor critic methods belong to this category The second issue can be corrected by allowing trajectories to contribute to any stateaction pair in them This may also help to some extent with the third problem although a better solution when returns have high variance is Suttons temporal difference TD methods that are based on the recursive Bellman equation 8 9 The computation in TD methods can be incremental when after each transition the memory is changed and the transition is thrown away or batch when the transitions are batched and the estimates are computed once based on the batch Batch methods such as the leastsquares temporal difference method 10 may use the information in the samples better while incremental methods are the only choice when batch methods are infeasible due to their high computational or memory complexity Some methods try to combine the two approaches Methods based on temporal differences also overcome the fourth issue In order to address the fifth issue function approximation methods are used Linear function approximation starts with a mapping ϕ displaystyle phi that assigns a finitedimensional vector to each stateaction pair Then the action values of a stateaction pair s a displaystyle sa are obtained by linearly combining the components of ϕ s a displaystyle phi sa with some weights θ displaystyle theta Q s a i 1 d θ i ϕ i s a displaystyle Qsasum i1dtheta iphi isa The algorithms then adjust the weights instead of adjusting the values associated with the individual stateaction pairs Methods based on ideas from nonparametric statistics which can be seen to construct their own features have been explored Value iteration can also be used as a starting point giving rise to the Qlearning algorithm and its many variants 11 The problem with using actionvalues is that they may need highly precise estimates of the competing action values that can be hard to obtain when the returns are noisy Though this problem is mitigated to some extent by temporal difference methods Using the socalled compatible function approximation method compromises generality and efficiency Another problem specific to TD comes from their reliance on the recursive Bellman equation Most TD methods have a socalled λ displaystyle lambda parameter 0 λ 1 displaystyle 0leq lambda leq 1 that can continuously interpolate between Monte Carlo methods that do not rely on the Bellman equations and the basic TD methods that rely entirely on the Bellman equations This can be effective in palliating this issue Direct policy search edit An alternative method is to search directly in some subset of the policy space in which case the problem becomes a case of stochastic optimization The two approaches available are gradientbased and gradientfree methods Gradient based methods policy gradient methods start with a mapping from a finitedimensional parameter space to the space of policies given the parameter vector θ displaystyle theta let π θ displaystyle pi theta denote the policy associated to θ displaystyle theta Defining the performance function by ρ θ ρ π θ displaystyle rho theta rho pi theta under mild conditions this function will be differentiable as a function of the parameter vector θ displaystyle theta If the gradient of ρ displaystyle rho was known one could use gradient ascent Since an analytic expression for the gradient is not available only a noisy estimate is available Such an estimate can be constructed in many ways giving rise to algorithms such as Williams REINFORCE method 12 which is known as the likelihood ratio method in the simulationbased optimization literature 13 Policy search methods have been used in the robotics context 14 Many policy search methods may get stuck in local optima as they are based on local search A large class of methods avoids relying on gradient information These include simulated annealing crossentropy search or methods of evolutionary computation Many gradientfree methods can achieve in theory and in the limit a global optimum Policy search methods may converge slowly given noisy data For example this happens in episodic problems when the trajectories are long and the variance of the returns is large Valuefunction based methods that rely on temporal differences might help in this case In recent years actorcritic methods have been proposed and performed well on various problems 15 Theory edit Both the asymptotic and finitesample behavior of most algorithms is well understood Algorithms with provably good online performance addressing the exploration issue are known Efficient exploration of large MDPs is largely unexplored except for the case of bandit problems clarification needed Although finitetime performance bounds appeared for many algorithms these bounds are expected to be rather loose and thus more work is needed to better understand the relative advantages and limitations For incremental algorithms asymptotic convergence issues have been settled Temporaldifferencebased algorithms converge under a wider set of conditions than was previously possible for example when used with arbitrary smooth function approximation Research edit Research topics include adaptive methods that work with fewer or no parameters under a large number of conditions addressing the exploration problem in large MDPs largescale empirical evaluations learning and acting under partial information eg using predictive state representation modular and hierarchical reinforcement learning 16 improving existing valuefunction and policy search methods algorithms that work well with large or continuous action spaces transfer learning 17 lifelong learning efficient samplebased planning eg based on Monte Carlo tree search bug detection in software projects 18 Multiagent or distributed reinforcement learning is a topic of interest Applications are expanding 19 Actorcritic reinforcement learning Reinforcement learning algorithms such as TD learning are under investigation as a model for dopamine based learning in the brain In this model the dopaminergic projections from the substantia nigra to the basal ganglia function as the prediction error Reinforcement learning has been used as a part of the model for human skill learning especially in relation to the interaction between implicit and explicit learning in skill acquisition the first publication on this application was in 19951996 20 Comparison of reinforcement learning algorithms edit Algorithm Description Model Policy Action Space State Space Operator Monte Carlo Every visit to Monte Carlo ModelFree Offpolicy Discrete Discrete Samplemeans Qlearning Stateactionrewardstate ModelFree Offpolicy Discrete Discrete Qvalue SARSA Stateactionrewardstateaction ModelFree Onpolicy Discrete Discrete Qvalue Qlearning Lambda Stateactionrewardstate with eligibility traces ModelFree Offpolicy Discrete Discrete Qvalue SARSA Lambda Stateactionrewardstateaction with eligibility traces ModelFree Onpolicy Discrete Discrete Qvalue DQN Deep Q Network ModelFree Offpolicy Discrete Continuous Qvalue DDPG Deep Deterministic Policy Gradient ModelFree Offpolicy Continuous Continuous Qvalue A3C Asynchronous Advantage ActorCritic Algorithm ModelFree Onpolicy Continuous Continuous Advantage NAF QLearning with Normalized Advantage Functions ModelFree Offpolicy Continuous Continuous Advantage TRPO Trust Region Policy Optimization ModelFree Onpolicy Continuous Continuous Advantage PPO Proximal Policy Optimization ModelFree Onpolicy Continuous Continuous Advantage TD3 Twin Delayed Deep Deterministic Policy Gradient ModelFree Offpolicy Continuous Continuous Qvalue SAC Soft ActorCritic ModelFree Offpolicy Continuous Continuous Advantage Deep reinforcement learning edit This approach extends reinforcement learning by using a deep neural network and without explicitly designing the state space 21 The work on learning ATARI games by Google DeepMind increased attention to deep reinforcement learning or endtoend reinforcement learning 22 Inverse reinforcement learning edit In inverse reinforcement learning IRL no reward function is given Instead the reward function is inferred given an observed behavior from an expert The idea is to mimic observed behavior which is often optimal or close to optimal 23 Apprenticeship learning edit In apprenticeship learning an expert demonstrates the target behavior The system tries to recover the policy via observation See also edit Temporal difference learning Qlearning Stateactionrewardstateaction SARSA Fictitious play Learning classifier system Optimal control Dynamic treatment regimes Errordriven learning Multiagent system Distributed artificial intelligence References edit Kaelbling Leslie P Littman Michael L Moore Andrew W 1996 Reinforcement Learning A Survey Journal of Artificial Intelligence Research 4 237285 arXiv cs9605103 doi 101613jair301 Archived from the original on 20011120 mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput idlockfree amwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput idlocklimited amwparseroutput idlockregistration amwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput idlocksubscription amwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em van Otterlo M Wiering M 2012 Reinforcement learning and markov decision processes Reinforcement Learning Adaptation Learning and Optimization 12 pp342 doi 10100797836422764531 ISBN 9783642276446 Sutton Barto Chapter 11 Gosavi Abhijit 2003 Simulationbased Optimization Parametric Optimization Techniques and Reinforcement Operations ResearchComputer Science Interfaces Series Springer ISBN 9781402074547 Burnetas Apostolos N Katehakis Michael N 1997 Optimal adaptive policies for Markov Decision Processes Mathematics of Operations Research 22 222255 doi 101287moor221222 Tokic Michel Palm Günther 2011 ValueDifference Based Exploration Adaptive Control Between EpsilonGreedy and Softmax PDF KI 2011 Advances in Artificial Intelligence Lecture Notes in Computer Science 7006 Springer pp335346 ISBN 9783642244551 a b Reinforcement learning An introduction PDF Sutton Richard S 1984 Temporal Credit Assignment in Reinforcement Learning PhD thesis University of Massachusetts Amherst MA Sutton Barto 1998 6 TemporalDifference Learning Bradtke Steven J Barto Andrew G 1996 Learning to predict by the method of temporal differences Machine Learning 22 3357 CiteSeerX 1011143857 doi 101023A1018056104778 Watkins Christopher JCH 1989 Learning from Delayed Rewards PDF PhD thesis Kings College Cambridge UK Williams Ronald J 1987 A class of gradientestimating algorithms for reinforcement learning in neural networks Proceedings of the IEEE First International Conference on Neural Networks CiteSeerX 10111298871 Peters Jan Vijayakumar Sethu Schaal Stefan 2003 Reinforcement Learning for Humanoid Robotics PDF IEEERAS International Conference on Humanoid Robots Deisenroth Marc Peter Neumann Gerhard Peters Jan 2013 A Survey on Policy Search for Robotics Foundations and Trends in Robotics 2 NOW Publishers pp1142 hdl 10044112051 Juliani Arthur 20161217 Simple Reinforcement Learning with Tensorflow Part 8 Asynchronous ActorCritic Agents A3C Medium Retrieved 20180222 Kulkarni Tejas D Narasimhan Karthik R Saeedi Ardavan Tenenbaum Joshua B 2016 Hierarchical Deep Reinforcement Learning Integrating Temporal Abstraction and Intrinsic Motivation Proceedings of the 30th International Conference on Neural Information Processing Systems NIPS16 USA Curran Associates Inc 36823690 arXiv 160406057 Bibcode 2016arXiv160406057K ISBN 9781510838819 George Karimpanal Thommen Bouffanais Roland 2019 Selforganizing maps for storage and transfer of knowledge in reinforcement learning Adaptive Behavior 27 2 111126 arXiv 181108318 doi 1011771059712318818568 ISSN 10597123 On the Use of Reinforcement Learning for Testing Game Mechanics ACM Computers in Entertainment cieacmorg Retrieved 20181127 Reinforcement Learning Successes of Reinforcement Learning umichrlpbworkscom Retrieved 20170806 1 Archived 20170426 at the Wayback Machine FrancoisLavet Vincent et al 2018 An Introduction to Deep Reinforcement Learning Foundations and Trends in Machine Learning 11 34 219354 arXiv 181112560 Bibcode 2018arXiv181112560F doi 1015612200000071 Mnih Volodymyr et al 2015 Humanlevel control through deep reinforcement learning Nature 518 7540 529533 Bibcode 2015Natur518529M doi 101038nature14236 PMID 25719670 Ng A Y Russell S J 2000 Algorithms for Inverse Reinforcement Learning PDF Proceeding ICML 00 Proceedings of the Seventeenth International Conference on Machine Learning pp663670 ISBN 1558607072 Further reading edit Auer Peter Jaksch Thomas Ortner Ronald 2010 Nearoptimal regret bounds for reinforcement learning Journal of Machine Learning Research 11 15631600 Busoniu Lucian Babuska Robert De Schutter Bart Ernst Damien 2010 Reinforcement Learning and Dynamic Programming using Function Approximators Taylor Francis CRC Press ISBN 9781439821084 FrançoisLavet Vincent Henderson Peter Islam Riashat Bellemare Marc G Pineau Joelle 2018 An Introduction to Deep Reinforcement Learning Foundations and Trends in Machine Learning 11 34 219354 arXiv 181112560 Bibcode 2018arXiv181112560F doi 1015612200000071 Powell Warren 2007 Approximate dynamic programming solving the curses of dimensionality WileyInterscience ISBN 9780470171554 Sutton Richard S Barto Andrew G 1998 Reinforcement Learning An Introduction MIT Press ISBN 9780262193986 Sutton Richard S 1988 Learning to predict by the method of temporal differences Machine Learning 3 944 doi 101007BF00115009 Szita Istvan Szepesvari Csaba 2010 Modelbased Reinforcement Learning with Nearly Tight Exploration Complexity Bounds PDF ICML 2010 Omnipress pp10311038 Archived from the original PDF on 20100714 External links edit Reinforcement Learning Repository Reinforcement Learning and Artificial Intelligence RLAI Rich Suttons lab at the University of Alberta Autonomous Learning Laboratory ALL Andrew Bartos lab at the University of Massachusetts Amherst Hybrid reinforcement learning Realworld reinforcement learning experiments at Delft University of Technology Stanford University Andrew Ng Lecture on Reinforcement Learning Dissecting Reinforcement Learning Series of blog post on RL with Python code v t e Computer science Note This template roughly follows the 2012 ACM Computing Classification System Hardware Printed circuit board Peripheral Integrated circuit Very Large Scale Integration Systems on Chip SoCs Energy consumption Green computing Electronic design automation Hardware acceleration Computer systems organization Computer architecture Embedded system Realtime computing Dependability Networks Network architecture Network protocol Network components Network scheduler Network performance evaluation Network service Software organization Interpreter Middleware Virtual machine Operating system Software quality Software notations and tools Programming paradigm Programming language Compiler Domainspecific language Modeling language Software framework Integrated development environment Software configuration management Software library Software repository Software development Software development process Requirements analysis Software design Software construction Software deployment Software maintenance Programming team Opensource model Theory of computation Model of computation Formal language Automata theory Computability theory Computational complexity theory Logic Semantics Algorithms Algorithm design Analysis of algorithms Algorithmic efficiency Randomized algorithm Computational geometry Mathematics of computing Discrete mathematics Probability Statistics Mathematical software Information theory Mathematical analysis Numerical analysis Information systems Database management system Information storage systems Enterprise information system Social information systems Geographic information system Decision support system Process control system Multimedia information system Data mining Digital library Computing platform Digital marketing World Wide Web Information retrieval Security Cryptography Formal methods Security services Intrusion detection system Hardware security Network security Information security Application security Humancomputer interaction Interaction design Social computing Ubiquitous computing Visualization Accessibility Concurrency Concurrent computing Parallel computing Distributed computing Multithreading Multiprocessing Artificial intelligence Natural language processing Knowledge representation and reasoning Computer vision Automated planning and scheduling Search methodology Control method Philosophy of artificial intelligence Distributed artificial intelligence Machine learning Supervised learning Unsupervised learning Reinforcement learning Multitask learning Crossvalidation Graphics Animation Rendering Image manipulation Graphics processing unit Mixed reality Virtual reality Image compression Solid modeling Applied computing Ecommerce Enterprise software Computational mathematics Computational physics Computational chemistry Computational biology Computational social science Computational engineering Computational healthcare Digital art Electronic publishing Cyberwarfare Electronic voting Video games Word processing Operations research Educational technology Document management Book Category Outline WikiProject Commons 