Code refactoring Process of restructuring existing computer code without changing its external behavior Refactor redirects here For the use of refactor on Wikipedia see WikipediaRefactoring talk pages This article is about a behaviourpreserving change It is not to be confused with Rewrite programming Code refactoring is the process of restructuring existing computer codechanging the factoring without changing its external behavior Refactoring is intended to improve nonfunctional attributes of the software Advantages include improved code readability and reduced complexity these can improve sourcecode maintainability and create a more expressive internal architecture or object model to improve extensibility Typically refactoring applies a series of standardised basic microrefactorings each of which is usually a tiny change in a computer program s source code that either preserves the behaviour of the software or at least does not modify its conformance to functional requirements Many development environments provide automated support for performing the mechanical aspects of these basic refactorings If done well code refactoring may help software developers discover and fix hidden or dormant bugs or vulnerabilities in the system by simplifying the underlying logic and eliminating unnecessary levels of complexity If done poorly it may fail the requirement that external functionality not be changed introduce new bugs or both mwparseroutput templatequoteoverflowhiddenmargin1em 0padding0 40pxmwparseroutput templatequote templatequotecitelineheight15emtextalignleftpaddingleft16emmargintop0 By continuously improving the design of code we make it easier and easier to work with This is in sharp contrast to what typically happens little refactoring and a great deal of attention paid to expediently adding new features If you get into the hygienic habit of refactoring continuously youll find that it is easier to extend and maintain code Joshua Kerievsky Refactoring to Patterns 1 Contents 1 Motivation 2 Benefits 3 Testing 4 Techniques 5 Hardware refactoring 6 History 7 Automated code refactoring 8 See also 9 References 10 Further reading 11 External links Motivation edit Refactoring is usually motivated by noticing a code smell 2 For example the method at hand may be very long or it may be a near duplicate of another nearby method Once recognized such problems can be addressed by refactoring the source code or transforming it into a new form that behaves the same as before but that no longer smells For a long routine one or more smaller subroutines can be extracted or for duplicate routines the duplication can be removed and replaced with one shared function Failure to perform refactoring can result in accumulating technical debt on the other hand refactoring is one of the primary means of repaying technical debt 3 Benefits edit There are two general categories of benefits to the activity of refactoring Maintainability It is easier to fix bugs because the source code is easy to read and the intent of its author is easy to grasp 4 This might be achieved by reducing large monolithic routines into a set of individually concise wellnamed singlepurpose methods It might be achieved by moving a method to a more appropriate class or by removing misleading comments Extensibility It is easier to extend the capabilities of the application if it uses recognizable design patterns and it provides some flexibility where none before may have existed 1 Testing edit Automatic unit tests should be set up before refactoring to ensure routines still behave as expected 5 Unit tests can bring stability to even large refactors when performed with a single atomic commit A common strategy to allow safe and atomic refactors spanning multiple projects is to store all projects in a single repository known as monorepo 6 With unit testing in place refactoring is then an iterative cycle of making a small program transformation testing it to ensure correctness and making another small transformation If at any point a test fails the last small change is undone and repeated in a different way Through many small steps the program moves from where it was to where you want it to be For this very iterative process to be practical the tests must run very quickly or the programmer would have to spend a large fraction of their time waiting for the tests to finish Proponents of extreme programming and other agile software development describe this activity as an integral part of the software development cycle Techniques edit Here are some examples of microrefactorings some of these may only apply to certain languages or language types A longer list can be found in Martin Fowler s refactoring book 2 pageneeded and website 7 Many development environments provide automated support for these microrefactorings For instance a programmer could click on the name of a variable and then select the Encapsulate field refactoring from a context menu The IDE would then prompt for additional details typically with sensible defaults and a preview of the code changes After confirmation by the programmer it would carry out the required changes throughout the code Techniques that allow for more abstraction Encapsulate field force code to access the field with getter and setter methods Generalize type create more general types to allow for more code sharing Replace typechecking code with statestrategy 8 Replace conditional with polymorphism 9 Techniques for breaking code apart into more logical pieces Componentization breaks code down into reusable semantic units that present clear welldefined simpletouse interfaces Extract class moves part of the code from an existing class into a new class Extract method to turn part of a larger method into a new method By breaking down code in smaller pieces it is more easily understandable This is also applicable to functions Techniques for improving names and location of code Move method or move field move to a more appropriate class or source file Rename method or rename field changing the name into a new one that better reveals its purpose Pull up in objectoriented programming OOP move to a superclass Push down in OOP move to a subclass 7 Automatic clone detection 10 Hardware refactoring edit While the term refactoring originally referred exclusively to refactoring of software code in recent years code written in hardware description languages HDLs has also been refactored The term hardware refactoring is used as a shorthand term for refactoring of code in hardware description languages Since HDLs are not considered to be programming languages by most hardware engineers 11 hardware refactoring is to be considered a separate field from traditional code refactoring Automated refactoring of analog hardware descriptions in VHDLAMS has been proposed by Zeng and Huss 12 In their approach refactoring preserves the simulated behavior of a hardware design The nonfunctional measurement that improves is that refactored code can be processed by standard synthesis tools while the original code cannotRefactoring of digital HDLs albeit manual refactoring has also been investigated by Synopsys fellow Mike Keating 13 14 His target is to make complex systems easier to understand which increases the designers productivity History edit Although refactoring code has been done informally for decades William Griswold s 1991 PhD dissertation 15 is one of the first major academic works on refactoring functional and procedural programs followed by William Opdyke s 1992 dissertation 16 on the refactoring of objectoriented programs 17 although all the theory and machinery have long been available as program transformation systems All of these resources provide a catalog of common methods for refactoring a refactoring method has a description of how to apply the method and indicators for when you should or should not apply the method Martin Fowler s book Refactoring Improving the Design of Existing Code 2 is the canonical reference according to whom The first known use of the term refactoring in the published literature was in a September 1990 article by William Opdyke and Ralph Johnson 18 Griswolds PhD thesis 15 Opdykes PhD thesis 16 published in 1992 also used this term 17 The term factoring has been used in the Forth community since at least the early 1980s Chapter Six of Leo Brodie s book Thinking Forth 1984 is dedicated to the subject In extreme programming the Extract Method refactoring technique has essentially the same meaning as factoring in Forth to break down a word or function into smaller more easily maintained functions Refactorings can also be reconstructed 19 posthoc to produce concise descriptions of complex software changes recorded in software repositories like CVS or SVN Automated code refactoring edit This section needs additional citations for verification Please help improve this article by adding citations to reliable sources Unsourced material may be challenged and removed Find sources Code refactoring news newspapers books scholar JSTOR July 2018 Learn how and when to remove this template message Many software editors and IDEs have automated refactoring support It is possible to refactor application code as well as test code 20 Here is a list of a few of these editors or socalled refactoring browsers DMS Software Reengineering Toolkit Implements largescale refactoring for C C C COBOL Java PHP and other languages Eclipse based Eclipse for Java and to a lesser extent C PHP Ruby and JavaScript PyDev for Python Photran a Fortran plugin for the Eclipse IDE Embarcadero Delphi IntelliJ based AppCode for ObjectiveC C and C IntelliJ IDEA for Java PyCharm for Python WebStorm for JavaScript Android Studio for Java JDeveloper for Java NetBeans for Java Smalltalk Most dialects include powerful refactoring tools Many use the original refactoring browser produced in the early 90s by Ralph Johnson Visual Studio based Visual Studio for NET and C CodeRush addon for Visual Studio Visual Assist addon for Visual Studio with refactoring support for C and C Wing IDE for Python Xcode for C ObjectiveC and Swift 21 See also edit Code review Database refactoring Decomposition computer science Design pattern computer science Obfuscated code Software peer review Prefactoring Separation of concerns Testdriven development Modular programming Amelioration pattern References edit a b Kerievsky Joshua 2004 Refactoring to Patterns Addison Wesley mwparseroutput citecitationfontstyleinheritmwparseroutput citation qquotesmwparseroutput citation cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665Lockgreensvg9pxLockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locklimited amwparseroutput citation cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6Lockgrayalt2svg9pxLockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput citation cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaaLockredalt2svg9pxLockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1wsicon abackgroundurluploadwikimediaorgwikipediacommonsthumb44cWikisourcelogosvg12pxWikisourcelogosvgpngnorepeatbackgroundpositionright 1em centermwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1maintdisplaynonecolor33aa33marginleft03emmwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em a b c Fowler Martin 1999 Refactoring Improving the Design of Existing Code AddisonWesley pp 63ff ISBN 9780201485677 Suryanarayana Girish November 2014 Refactoring for Software Design Smells Morgan Kaufmann p258 ISBN 9780128013977 Martin Robert 2009 Clean Code Prentice Hall 1963 Fowler Martin 1999 Refactoring improving the design of existing code Reading MA AddisonWesley ISBN 9780201485677 OCLC 41017370 Smart John Ferguson 2008 Java Power Tools OReilly Media Inc p301 ISBN 9781491954546 Retrieved 26 July 2018 a b these are only about OOP however Refactoring techniques in Fowlers refactoring Website Replace typechecking code with StateStrategy Replace conditional with polymorphism Bruntink Magiel et al An evaluation of clone detection techniques for crosscutting concerns Software Maintenance 2004 Proceedings 20th IEEE International Conference on IEEE 2004 Hardware description languagesHDL and programming languages Kaiping Zeng Sorin A Huss Architecture refinements by code refactoring of behavioral VHDLAMS models ISCAS 2006 M KeatingComplexity Abstraction and the Challenges of Designing Complex Systems in DAC08 tutorial 1 Bridging a Verification Gap C to RTL for Practical Design M Keating P Bricaud Reuse Methodology Manual for SystemonaChip Designs Kluwer Academic Publishers 1999 a b Griswold William G July 1991 Program Restructuring as an Aid to Software Maintenance PDF PhD thesis University of Washington Retrieved 20111224 a b Opdyke William F June 1992 Refactoring ObjectOriented Frameworks compressed Postscript PhD thesis University of Illinois at UrbanaChampaign Retrieved 20080212 permanent dead link a b Martin Fowler MF Bliki EtymologyOfRefactoring Opdyke William F Johnson Ralph E September 1990 Refactoring An Aid in Designing Application Frameworks and Evolving ObjectOriented Systems Proceedings of the Symposium on Object Oriented Programming Emphasizing Practical Applications SOOPPA ACM Weißgerber Peter Diehl S 2006 Identifying Refactorings from SourceCode Changes PDF Proceedings of 21st IEEEACM International Conference on Automated Software Engineering ASE 2006 ACM Xuan Jifeng Cornu Benoit Martinez Matias Baudry Benoit Seinturier Lionel Monperrus Martin 2016 BRefactoring Automatic test code refactoring to improve dynamic analysis Information and Software Technology 76 6580 doi 101016jinfsof201604016 Whats new in Xcode 9 Further reading edit Wake William C 2003 Refactoring Workbook AddisonWesley ISBN 9780321109293 Mens T Tourwe T nd A survey of software refactoring IEEE Transactions on Software Engineering 30 2 126139 doi 101109tse20041265817 ISSN 00985589 Feathers Michael C 2004 Working Effectively with Legacy Code Prentice Hall ISBN 9780131177055 Kerievsky Joshua 2004 Refactoring To Patterns AddisonWesley ISBN 9780321213358 Arsenovski Danijel 2008 Professional Refactoring in Visual Basic Wrox ISBN 9780470179796 Arsenovski Danijel 2009 Professional Refactoring in C and ASPNET Wrox ISBN 9780470434529 Ritchie Peter 2010 Refactoring with Visual Studio 2010 Packt ISBN 9781849680103 External links edit What Is Refactoring c2com article Martin Fowlers homepage about refactoring Refactoring at Curlie Authority control GND 47843433 LCCN sh99002049 NDL 01191220